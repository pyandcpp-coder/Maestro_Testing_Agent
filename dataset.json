
[
  {
    "instruction": "Launch the application.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp"
  },

  {
    "instruction": "Tap on the 'Login' button.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: \"Login\""
  },
  {
    "instruction": "Verify that the welcome text is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: \"Welcome\""
  },
  {
    "instruction": "Enter 'testuser' into the username field with ID 'usernameInput'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"usernameInput\" }\n- inputText: \"testuser\""
  },
  {
    "instruction": "Scroll down until the 'Submit' button is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: \"Submit\"\n    direction: DOWN"
  },
  {
    "instruction": "Execute the 'userLogin' flow.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow: \"userLogin.yaml\""
  },
  {
    "instruction": "Launch the app, ensuring its state is cleared first.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    clearState: true"
  },
  {
    "instruction": "Tap on the element with ID 'profileIcon'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"profileIcon\""
  },
  {
    "instruction": "Make sure the 'errorMessage' with text 'Invalid credentials' is displayed.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"errorMessage\"\n    text: \"Invalid credentials\""
  },
  {
    "instruction": "Input 'password123' into the focused password field.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- inputText: \"password123\""
  },
  {
    "instruction": "Scroll until the 'termsCheckbox' element is visible, with a timeout of 10 seconds.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"termsCheckbox\" }\n    direction: DOWN\n    timeout: 10000"
  },
  {
    "instruction": "Run the 'setup_user_data.yaml' flow, passing USER_ID '12345'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    file: \"setup_user_data.yaml\"\n    env:\n      USER_ID: \"12345\""
  },
  {
    "instruction": "Retry tapping on 'retryButton' up to 3 times if it fails.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 3\n    commands:\n      - tapOn: { id: \"retryButton\" }"
  },
  {
    "instruction": "Repeat tapping 'Next' and scrolling 5 times.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 5\n    commands:\n      - tapOn: \"Next\"\n      - scroll"
  },
  {
    "instruction": "Use AI to assert that a checkout confirmation screen is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"A checkout confirmation screen with order summary is visible.\""
  },
  {
    "instruction": "Run the script 'utils/helper.js'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runScript: \"utils/helper.js\""
  },
  {
    "instruction": "Evaluate a script to set 'isUserLoggedIn' to true in the output.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.isUserLoggedIn = true}\""
  },
  {
    "instruction": "Tap on the button labeled 'Submit Form'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    text: \"Submit Form\"\n    label: \"Click the final submission button\""
  },
  {
    "instruction": "Assert the 'settingsToggle' is visible and enabled.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"settingsToggle\"\n    enabled: true"
  },
  {
    "instruction": "Input a random email address into the 'emailInput' field.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"emailInput\" }\n- inputRandomEmail"
  },
  {
    "instruction": "Launch the app and tap on the 'Get Started' button, then verify 'Dashboard' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp\n- tapOn: \"Get Started\"\n- assertVisible: \"Dashboard\""
  },
  {
    "instruction": "Tap the point at 50% width and 20% height of the screen.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    point: \"50%,20%\""
  },
  {
    "instruction": "Assert that the text 'Product Details' is visible, optionally.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    text: \"Product Details\"\n    optional: true"
  },
  {
    "instruction": "Enter 'John Doe' into the 'nameField'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"nameField\" }\n- inputText: \"John Doe\""
  },
  {
    "instruction": "Scroll left until 'January' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: \"January\"\n    direction: LEFT"
  },
  {
    "instruction": "Run an inline flow that taps 'OK' and then 'Confirm'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    commands:\n      - tapOn: \"OK\"\n      - tapOn: \"Confirm\""
  },
  {
    "instruction": "Press the back button on Android.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- back"
  },
  {
    "instruction": "Clear the iOS keychain.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- clearKeychain"
  },
  {
    "instruction": "Copy text from the element with id 'shareableLink'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- copyTextFrom:\n    id: \"shareableLink\""
  },
  {
    "instruction": "Double tap the 'heartIcon' to like an item.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- doubleTapOn:\n    id: \"heartIcon\""
  },
  {
    "instruction": "Erase 10 characters from the current text field.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- eraseText: 10"
  },
  {
    "instruction": "Wait for up to 15 seconds for 'loadingIndicator' to disappear.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- extendedWaitUntil:\n    notVisible: { id: \"loadingIndicator\" }\n    timeout: 15000"
  },
  {
    "instruction": "Hide the keyboard.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- hideKeyboard"
  },
  {
    "instruction": "Kill the current application.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- killApp"
  },
  {
    "instruction": "Long press on the 'deleteButton'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- longPressOn:\n    id: \"deleteButton\""
  },
  {
    "instruction": "Open the link 'https://qoneqt.com/terms'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- openLink: \"https://qoneqt.com/terms\""
  },
  {
    "instruction": "Paste the copied text into 'promoCodeInput'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"promoCodeInput\" }\n- pasteText"
  },
  {
    "instruction": "Press the Enter key.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- pressKey: \"Enter\""
  },
  {
    "instruction": "Perform a simple scroll down.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scroll"
  },
  {
    "instruction": "Set the device location to Amsterdam.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- setLocation:\n    latitude: 52.3676\n    longitude: 4.9041"
  },
  {
    "instruction": "Start recording the screen, save as 'onboarding_flow'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- startRecording: \"onboarding_flow\""
  },
  {
    "instruction": "Stop the application with ID 'com.another.app'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- stopApp: \"com.another.app\""
  },
  {
    "instruction": "Stop the current screen recording.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- stopRecording"
  },
  {
    "instruction": "Swipe left on the 'carouselImage'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- swipe:\n    from: { id: \"carouselImage\" }\n    direction: LEFT"
  },
  {
    "instruction": "Take a screenshot and name it 'UserProfile'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- takeScreenshot: \"UserProfile\""
  },
  {
    "instruction": "Wait for any ongoing animation to end, up to 3 seconds.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- waitForAnimationToEnd:\n    timeout: 3000"
  },
  {
    "instruction": "Launch the app with notifications permission denied.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    permissions:\n      notifications: deny"
  },
  {
    "instruction": "Tap on 'Proceed to Checkout', retrying the tap if no UI change occurs.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    text: \"Proceed to Checkout\"\n    retryTapIfNoChange: true"
  },
  {
    "instruction": "Assert the 'checkboxIAgree' is visible and checked.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"checkboxIAgree\"\n    checked: true"
  },
  {
    "instruction": "Input a random 6-digit number.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- inputRandomNumber:\n    length: 6"
  },
  {
    "instruction": "Scroll up until 'pageHeader' is visible, with fast speed.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"pageHeader\" }\n    direction: UP\n    speed: 80"
  },
  {
    "instruction": "If 'promoBanner' is visible, run 'applyPromo.yaml'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      visible: { id: \"promoBanner\" }\n    file: \"applyPromo.yaml\""
  },
  {
    "instruction": "Clear app state for 'com.qoneqt.qoneqt'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- clearState: \"com.qoneqt.qoneqt\""
  },
  {
    "instruction": "Tap on the second item in a list that has text 'ListItem'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    text: \"ListItem\"\n    index: 1"
  },
  {
    "instruction": "Assert the input field 'searchInput' is focused.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"searchInput\"\n    focused: true"
  },
  {
    "instruction": "Enter 'test@example.com' into username and 'pass' into password, then tap Login.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"usernameInput\" }\n- inputText: \"test@example.com\"\n- tapOn: { id: \"passwordInput\" }\n- inputText: \"pass\"\n- tapOn: { id: \"loginButton\" }"
  },
  {
    "instruction": "Tap on the element below the text 'Username' which has id 'usernameInput'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"usernameInput\"\n    below: \"Username\""
  },
  {
    "instruction": "Verify 'Order Confirmed' is visible. If not, retry the previous submit action.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 1\n    commands:\n      - tapOn: { id: \"submitOrderButton\" }\n      - assertVisible: \"Order Confirmed\""
  },
  {
    "instruction": "Repeatedly tap on 'increaseQuantity' until 'quantityText' shows '5'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    while:\n      notVisible: { id: \"quantityText\", text: \"5\" }\n    commands:\n      - tapOn: { id: \"increaseQuantity\" }"
  },
  {
    "instruction": "Using AI, check if there are any visual defects on the current screen.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertNoDefectsWithAI"
  },
  {
    "instruction": "Run script 'api_caller.js' and pass API_ENDPOINT as 'https://api.qoneqt.com'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runScript:\n    file: \"api_caller.js\"\n    env:\n      API_ENDPOINT: \"https://api.qoneqt.com\""
  },
  {
    "instruction": "Set output variable 'timestamp' to current time using JavaScript.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.timestamp = new Date().toISOString()}\""
  },
  {
    "instruction": "Add './assets/profile.jpg' and './assets/intro.mp4' to device media.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- addMedia:\n    - \"./assets/profile.jpg\"\n    - \"./assets/intro.mp4\""
  },
  {
    "instruction": "Launch application with argument 'darkMode' set to true.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    arguments:\n      darkMode: true"
  },
  {
    "instruction": "Tap the 'Continue' button, but don't wait for the screen to settle too long (500ms).",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    text: \"Continue\"\n    waitToSettleTimeoutMs: 500"
  },
  {
    "instruction": "Assert the 'promoCodeField' is selected.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"promoCodeField\"\n    selected: true"
  },
  {
    "instruction": "Input a random person's name.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- inputRandomPersonName"
  },
  {
    "instruction": "Scroll until 'loadMoreButton' is visible and centered on screen.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"loadMoreButton\" }\n    direction: DOWN\n    centerElement: true"
  },
  {
    "instruction": "Run 'final_cleanup.yaml' only if the platform is iOS.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      platform: \"iOS\"\n    file: \"final_cleanup.yaml\""
  },
  {
    "instruction": "Use AI to extract the CAPTCHA value and input it into 'captchaInput'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- extractTextWithAI: \"CAPTCHA value\"\n- tapOn: { id: \"captchaInput\" }\n- inputText: \"${aiOutput}\""
  },
  {
    "instruction": "Double tap on 'mapMarker' with a 200ms delay between taps.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- doubleTapOn:\n    id: \"mapMarker\"\n    delay: 200"
  },
  {
    "instruction": "Wait until 'notificationPopup' is visible, checking for 5 seconds.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- extendedWaitUntil:\n    visible: { id: \"notificationPopup\" }\n    timeout: 5000"
  },
  {
    "instruction": "Long press on the item with text 'Long Press Me'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- longPressOn: \"Long Press Me\""
  },
  {
    "instruction": "Open the link 'qoneqt://product/123' and auto-verify on Android.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- openLink:\n    link: \"qoneqt://product/123\"\n    autoVerify: true"
  },
  {
    "instruction": "Press the Home key.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- pressKey: \"Home\""
  },
  {
    "instruction": "Swipe from 90%,50% to 10%,50% of the screen.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- swipe:\n    start: \"90%,50%\"\n    end: \"10%,50%\""
  },
  {
    "instruction": "Take a screenshot of the main screen.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- takeScreenshot: \"MainScreen\""
  },
  {
    "instruction": "Launch the app. Tap 'usernameInput', enter 'user', tap 'passwordInput', enter 'pass', tap 'loginButton', assert 'Welcome' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp\n- tapOn: { id: \"usernameInput\" }\n- inputText: \"user\"\n- tapOn: { id: \"passwordInput\" }\n- inputText: \"pass\"\n- tapOn: { id: \"loginButton\" }\n- assertVisible: \"Welcome\""
  },
  {
    "instruction": "Tap on the text 'Open Settings'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: \"Open Settings\""
  },
  {
    "instruction": "Assert the button with id 'saveButton' is present on screen.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: { id: \"saveButton\" }"
  },
  {
    "instruction": "Type 'My new note' into the 'noteEditor' text area.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"noteEditor\" }\n- inputText: \"My new note\""
  },
  {
    "instruction": "Scroll right on 'dateScroller' until 'Next Month' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"dateScroller\", text: \"Next Month\" }\n    direction: RIGHT"
  },
  {
    "instruction": "Run the 'logoutSequence.yaml' flow.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow: \"logoutSequence.yaml\""
  },
  {
    "instruction": "Launch the app without stopping the previous instance and clear keychain.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    stopApp: false\n    clearKeychain: true"
  },
  {
    "instruction": "Tap on an element that contains a child with text 'Notification Badge'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    containsChild: \"Notification Badge\""
  },
  {
    "instruction": "Verify the error message 'Network Error' is displayed.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: \"Network Error\""
  },
  {
    "instruction": "Input the text from environment variable 'USER_COMMENT'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- inputText: \"${USER_COMMENT}\""
  },
  {
    "instruction": "Scroll until 'sectionTitle' is visible, with 70% of it showing.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"sectionTitle\" }\n    visibilityPercentage: 70"
  },
  {
    "instruction": "Run the 'data_validation.js' script if output.isValid is true.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runScript:\n    when:\n      true: \"${output.isValid}\"\n    file: \"data_validation.js\""
  },
  {
    "instruction": "Retry the 'payment.yaml' flow twice if it fails.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 2\n    file: \"payment.yaml\""
  },
  {
    "instruction": "Repeat tapping 'Increment' while 'Counter' is not '10'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    while:\n      notVisible: { id: \"Counter\", text: \"10\" }\n    commands:\n      - tapOn: \"Increment\""
  },
  {
    "instruction": "Ask AI if the login form looks complete with username, password, and login button.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"The login form displays input fields for username and password, and a login button.\""
  },
  {
    "instruction": "Run script to fetch user details and store in 'output.userDetails'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runScript: \"fetchUserDetails.js\""
  },
  {
    "instruction": "Log the value of 'output.myVar' to console.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${console.log(output.myVar)}\""
  },
  {
    "instruction": "Tap the third button that says 'Option'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    text: \"Option\"\n    index: 2"
  },
  {
    "instruction": "Assert the 'statusMessage' is visible and its text is 'Success!'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"statusMessage\"\n    text: \"Success!\""
  },
  {
    "instruction": "Input a random 10-character text string.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- inputRandomText:\n    length: 10"
  },
  {
    "instruction": "Launch app, tap 'Settings', tap 'Appearance', tap 'Dark Mode', assert 'Dark Mode Enabled' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp\n- tapOn: \"Settings\"\n- tapOn: \"Appearance\"\n- tapOn: \"Dark Mode\"\n- assertVisible: \"Dark Mode Enabled\""
  },
  {
    "instruction": "Tap the element with ID 'closeAdButton', make this step optional.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"closeAdButton\"\n    optional: true"
  },
  {
    "instruction": "Verify that 'itemPrice' is visible and is not empty.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: { id: \"itemPrice\", text: \".+\" }"
  },
  {
    "instruction": "Enter the value of 'productCode' from output into 'productCodeInput'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"productCodeInput\" }\n- inputText: \"${output.productCode}\""
  },
  {
    "instruction": "Scroll until the element with text 'End of List' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: \"End of List\""
  },
  {
    "instruction": "Run a flow that first taps 'Agree' then inputs 'test@qoneqt.com' to 'emailInput'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    commands:\n      - tapOn: \"Agree\"\n      - tapOn: { id: \"emailInput\" }\n      - inputText: \"test@qoneqt.com\""
  },
  {
    "instruction": "On Android, press the back key, then assert 'HomePage' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- back\n- assertVisible: { id: \"HomePage\" }"
  },
  {
    "instruction": "Clear the entire app state.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- clearState"
  },
  {
    "instruction": "Copy text from 'confirmationCode' and then tap 'Verify'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- copyTextFrom: { id: \"confirmationCode\" }\n- tapOn: \"Verify\""
  },
  {
    "instruction": "Double tap the 'zoomInButton'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- doubleTapOn: { id: \"zoomInButton\" }"
  },
  {
    "instruction": "Erase all text from the currently focused field.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- eraseText"
  },
  {
    "instruction": "Wait until 'popupDialog' is no longer visible, for up to 8 seconds.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- extendedWaitUntil:\n    notVisible: { id: \"popupDialog\" }\n    timeout: 8000"
  },
  {
    "instruction": "Attempt to hide the software keyboard.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- hideKeyboard"
  },
  {
    "instruction": "Force stop the app.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- killApp"
  },
  {
    "instruction": "Long press the list item 'taskItem1' for 2 seconds.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- longPressOn: { id: \"taskItem1\" }"
  },
  {
    "instruction": "Open the privacy policy link 'https://qoneqt.com/privacy'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- openLink: \"https://qoneqt.com/privacy\""
  },
  {
    "instruction": "After copying text, tap on 'commentBox' and paste it.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- copyTextFrom: { id: \"originalText\" }\n- tapOn: { id: \"commentBox\" }\n- pasteText"
  },
  {
    "instruction": "Press the Backspace key to delete a character.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- pressKey: \"Backspace\""
  },
  {
    "instruction": "Scroll the view vertically.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scroll"
  },
  {
    "instruction": "Set mock location to Tokyo Imperial Palace.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- setLocation:\n    latitude: 35.6852\n    longitude: 139.7528"
  },
  {
    "instruction": "Start a screen recording labeled 'Feature Demo'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- startRecording:\n    path: \"FeatureDemo\"\n    label: \"Recording of feature demonstration\""
  },
  {
    "instruction": "Stop the current app.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- stopApp"
  },
  {
    "instruction": "Finalize and save the screen recording.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- stopRecording"
  },
  {
    "instruction": "Swipe upwards from the middle of the screen.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- swipe:\n    direction: UP"
  },
  {
    "instruction": "Capture a screenshot of the 'ErrorState'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- takeScreenshot: \"ErrorState\""
  },
  {
    "instruction": "Wait for a video ad to finish playing.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- waitForAnimationToEnd"
  },
  {
    "instruction": "Launch the app, denying all permissions.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    permissions: { all: deny }"
  },
  {
    "instruction": "Tap the 'Submit' button, and do not retry if no change detected.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    text: \"Submit\"\n    retryTapIfNoChange: false"
  },
  {
    "instruction": "Assert the 'termsAndConditionsLink' is visible and enabled.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"termsAndConditionsLink\"\n    enabled: true"
  },
  {
    "instruction": "Input a random 8-digit number into 'orderIdField'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"orderIdField\" }\n- inputRandomNumber:\n    length: 8"
  },
  {
    "instruction": "Scroll down slowly until 'footerElement' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"footerElement\" }\n    direction: DOWN\n    speed: 20"
  },
  {
    "instruction": "If the environment variable 'SKIP_ONBOARDING' is 'true', run 'skip_onboarding.yaml'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${MAESTRO_SKIP_ONBOARDING === 'true'}\"\n    file: \"skip_onboarding.yaml\""
  },
  {
    "instruction": "Set airplane mode to enabled.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- setAirplaneMode: \"enabled\""
  },
  {
    "instruction": "Toggle airplane mode.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- toggleAirplaneMode"
  },
  {
    "instruction": "Simulate travel along a predefined path at 100 m/s.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- travel:\n    points:\n      - \"40.7128,-74.0060\"\n      - \"40.7580,-73.9855\"\n    speed: 100"
  },
  {
    "instruction": "Use AI to check if the user profile page displays the correct avatar and username.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"The user profile page shows the user's avatar and username 'TestUser123'.\""
  },
  {
    "instruction": "Launch app and enter 'admin' for username and 'adminpass' for password, tap Login, then check if 'Admin Panel' text is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp\n- tapOn: { id: \"usernameInput\" }\n- inputText: \"admin\"\n- tapOn: { id: \"passwordInput\" }\n- inputText: \"adminpass\"\n- tapOn: { id: \"loginButton\" }\n- assertVisible: \"Admin Panel\""
  },
  {
    "instruction": "Define USERNAME as 'test_user' and PASSWORD as 'secure123' in the flow's environment, then run login_flow.yaml.",
    "output": "appId: com.qoneqt.qoneqt\nenv:\n  USERNAME: \"test_user\"\n  PASSWORD: \"secure123\"\n---\n- runFlow: \"login_flow.yaml\""
  },
  {
    "instruction": "Before the flow starts, run 'initial_setup.yaml'. After it completes, run 'cleanup_script.js'.",
    "output": "appId: com.qoneqt.qoneqt\nonFlowStart:\n  - runFlow: \"initial_setup.yaml\"\nonFlowComplete:\n  - runScript: \"cleanup_script.js\"\n---\n- launchApp\n- tapOn: \"Start Test\""
  },
  {
    "instruction": "Name this flow 'User Registration Test' and tag it with 'smoke' and 'regression'.",
    "output": "appId: com.qoneqt.qoneqt\nname: \"User Registration Test\"\ntags:\n  - \"smoke\"\n  - \"regression\"\n---\n- launchApp\n- tapOn: \"Register\""
  },
  {
    "instruction": "Use GraalJS engine for this flow and log a message.",
    "output": "appId: com.qoneqt.qoneqt\njsEngine: graaljs\n---\n- evalScript: \"${console.log('Using GraalJS')}\""
  },
  {
    "instruction": "Tap the 'Help' icon, then assert that 'FAQ Section' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"helpIcon\" }\n- assertVisible: \"FAQ Section\""
  },
  {
    "instruction": "Verify 'Total Amount: $19.99' is visible on the screen.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: \"Total Amount: $19.99\""
  },
  {
    "instruction": "Enter the promo code 'SAVE20' into 'promoCodeInput'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"promoCodeInput\" }\n- inputText: \"SAVE20\""
  },
  {
    "instruction": "Scroll until the element with regex ID '.*detailView.*' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \".*detailView.*\" }"
  },
  {
    "instruction": "Run 'user_actions.yaml' flow, providing 'actionType: delete' as an environment variable.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    file: \"user_actions.yaml\"\n    env:\n      actionType: \"delete\""
  },
  {
    "instruction": "Launch app with 'feature_flag_A' enabled and 'user_id' as 'test001'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    arguments:\n      feature_flag_A: true\n      user_id: \"test001\""
  },
  {
    "instruction": "Tap on the image with accessibility ID 'productImage_001'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"productImage_001\" }"
  },
  {
    "instruction": "Assert that the text 'No items in cart' is visible when the cart is empty.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: \"No items in cart\""
  },
  {
    "instruction": "Input the text 'Hello Maestro!' into any focused text field.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- inputText: \"Hello Maestro!\""
  },
  {
    "instruction": "Scroll the 'chatList' down until 'lastMessage' is visible, then tap on it.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"lastMessage\" }\n    direction: DOWN\n- tapOn: { id: \"lastMessage\" }"
  },
  {
    "instruction": "Execute 'navigation_test.yaml' only if the 'isNavigationTestEnabled' output variable is true.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.isNavigationTestEnabled}\"\n    file: \"navigation_test.yaml\""
  },
  {
    "instruction": "Retry tapping the 'connectButton'. If it fails, log an error then try to run 'fallback_connect.yaml'. Max 2 retries total for tap.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 2\n    commands:\n      - tapOn: { id: \"connectButton\", optional: true }\n      - evalScript: \"${!output.connectButton_tapped ? console.log('Connect button tap failed, trying fallback') : ''}\"\n      - runFlow:\n          when:\n            true: \"${!output.connectButton_tapped}\"\n          file: \"fallback_connect.yaml\""
  },
  {
    "instruction": "Tap the 'Add Item' button 10 times.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 10\n    commands:\n      - tapOn: \"Add Item\""
  },
  {
    "instruction": "Use AI to confirm the presence of a map view on the screen.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"A map view showing geographical location is displayed.\""
  },
  {
    "instruction": "Run 'data_processor.js' which uses 'API_KEY' from flow environment.",
    "output": "appId: com.qoneqt.qoneqt\nenv:\n  API_KEY: \"xyz123abc\"\n---\n- runScript: \"data_processor.js\""
  },
  {
    "instruction": "Set output.username to 'guest' if maestro.platform is 'android', else 'guest_ios'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.username = maestro.platform === 'android' ? 'guest' : 'guest_ios'}\""
  },
  {
    "instruction": "Tap on the element that is below 'titleText' and has the ID 'subtitleText'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"subtitleText\"\n    below: { id: \"titleText\" }"
  },
  {
    "instruction": "Ensure the 'confirmationDialog' with text 'Are you sure?' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"confirmationDialog\"\n    text: \"Are you sure?\""
  },
  {
    "instruction": "Type a random email address into the 'subscribeInput' field.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"subscribeInput\" }\n- inputRandomEmail"
  },
  {
    "instruction": "Launch app. Tap 'Skip'. Assert 'Main Content' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp\n- tapOn: \"Skip\"\n- assertVisible: \"Main Content\""
  },
  {
    "instruction": "Tap on 'acceptButton' if 'warningPopup' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      visible: { id: \"warningPopup\" }\n    commands:\n      - tapOn: { id: \"acceptButton\" }"
  },
  {
    "instruction": "Clear the app data of 'com.qoneqt.qoneqt' then launch it.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- clearState: \"com.qoneqt.qoneqt\"\n- launchApp"
  },
  {
    "instruction": "Copy text from 'invitationCode', tap 'codeInput', paste text, tap 'Submit'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- copyTextFrom: { id: \"invitationCode\" }\n- tapOn: { id: \"codeInput\" }\n- pasteText\n- tapOn: \"Submit\""
  },
  {
    "instruction": "Double tap the 'mapView' element.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- doubleTapOn: { id: \"mapView\" }"
  },
  {
    "instruction": "Erase the current content of 'searchField'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"searchField\" }\n- eraseText"
  },
  {
    "instruction": "Wait until 'progressSpinner' is no longer visible on screen.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- extendedWaitUntil:\n    notVisible: { id: \"progressSpinner\" }"
  },
  {
    "instruction": "If keyboard is open, hide it.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- hideKeyboard"
  },
  {
    "instruction": "Kill the app, then relaunch it without stopping it first.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- killApp\n- launchApp:\n    stopApp: false"
  },
  {
    "instruction": "Long press on the screen at point 100, 200.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- longPressOn:\n    point: \"100,200\""
  },
  {
    "instruction": "Open the deep link 'qoneqt://profile/edit'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- openLink: \"qoneqt://profile/edit\""
  },
  {
    "instruction": "Press the Tab key on Android.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- pressKey: \"Tab\""
  },
  {
    "instruction": "Scroll to make 'scrollToElement' appear.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"scrollToElement\" }"
  },
  {
    "instruction": "Record the login process and save as 'login_attempt'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- startRecording: \"login_attempt\"\n- tapOn: { id: \"usernameInput\" }\n- inputText: \"fail_user\"\n- tapOn: { id: \"passwordInput\" }\n- inputText: \"wrong_pass\"\n- tapOn: { id: \"loginButton\" }\n- stopRecording"
  },
  {
    "instruction": "Stop the app if it's running.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- stopApp"
  },
  {
    "instruction": "Swipe right on the 'tutorialSlide'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- swipe:\n    from: { id: \"tutorialSlide\" }\n    direction: RIGHT"
  },
  {
    "instruction": "Take a screenshot of the current view, name it 'current_state'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- takeScreenshot: \"current_state\""
  },
  {
    "instruction": "Wait for a loading animation to finish, with a 10 second max wait.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- waitForAnimationToEnd:\n    timeout: 10000"
  },
  {
    "instruction": "Launch app and grant fine location permission on Android.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    permissions:\n      android.permission.ACCESS_FINE_LOCATION: allow"
  },
  {
    "instruction": "Tap the 'Add to Watchlist' button, repeating 3 times with 200ms delay.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    text: \"Add to Watchlist\"\n    repeat: 3\n    delay: 200"
  },
  {
    "instruction": "Assert the 'emailInput' field is visible and not checked.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"emailInput\"\n    checked: false"
  },
  {
    "instruction": "Input a random 4-digit OTP.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- inputRandomNumber:\n    length: 4"
  },
  {
    "instruction": "Scroll up slowly until 'pageTitle' is 100% visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"pageTitle\" }\n    direction: UP\n    speed: 30\n    visibilityPercentage: 100"
  },
  {
    "instruction": "If 'newUserBanner' is not visible, run 'returning_user_flow.yaml'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      notVisible: { id: \"newUserBanner\" }\n    file: \"returning_user_flow.yaml\""
  },
  {
    "instruction": "Disable airplane mode.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- setAirplaneMode: \"disabled\""
  },
  {
    "instruction": "Assert with AI that the current screen does not show any error messages.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"The screen is free of any visible error messages or error indicators.\""
  },
  {
    "instruction": "Verify 'usernameDisplay' shows text matching regex 'User_[0-9]+'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"usernameDisplay\"\n    text: \"User_[0-9]+\""
  },
  {
    "instruction": "Tap on 'elementA', then on 'elementB', then verify 'elementC' appears.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"elementA\" }\n- tapOn: { id: \"elementB\" }\n- assertVisible: { id: \"elementC\" }"
  },
  {
    "instruction": "Define an environment variable 'API_URL' as 'http://local.test/api' for the flow.",
    "output": "appId: com.qoneqt.qoneqt\nenv:\n  API_URL: \"http://local.test/api\"\n---\n- launchApp"
  },
  {
    "instruction": "On flow start, tap 'Accept Cookies'. On flow complete, tap 'Logout'.",
    "output": "appId: com.qoneqt.qoneqt\nonFlowStart:\n  - tapOn: \"Accept Cookies\"\nonFlowComplete:\n  - tapOn: { id: \"logoutButton\" }\n---\n- launchApp\n- assertVisible: \"Welcome User\""
  },
  {
    "instruction": "Set this flow's name to 'Main Workflow Test'.",
    "output": "appId: com.qoneqt.qoneqt\nname: \"Main Workflow Test\"\n---\n- launchApp"
  },
  {
    "instruction": "Add tags 'critical' and 'onboarding' to this flow.",
    "output": "appId: com.qoneqt.qoneqt\ntags:\n  - \"critical\"\n  - \"onboarding\"\n---\n- launchApp\n- tapOn: \"Next\""
  },
  {
    "instruction": "Tap on the button 'Share'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: \"Share\""
  },
  {
    "instruction": "Assert the 'loadingSpinner' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: { id: \"loadingSpinner\" }"
  },
  {
    "instruction": "Enter 'My Feedback' into the 'feedbackTextArea'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"feedbackTextArea\" }\n- inputText: \"My Feedback\""
  },
  {
    "instruction": "Scroll until 'privacyPolicyLink' is visible, then tap it.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"privacyPolicyLink\" }\n- tapOn: { id: \"privacyPolicyLink\" }"
  },
  {
    "instruction": "Run the 'complex_setup.yaml' flow and provide 'testMode: full' as an environment var.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    file: \"complex_setup.yaml\"\n    env:\n      testMode: \"full\""
  },
  {
    "instruction": "Launch the app with 'initialScreen: dashboard' argument.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    arguments:\n      initialScreen: \"dashboard\""
  },
  {
    "instruction": "Tap on the icon with ID 'menuIcon'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"menuIcon\" }"
  },
  {
    "instruction": "Verify that text 'Payment Successful' is shown on screen.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: \"Payment Successful\""
  },
  {
    "instruction": "Type the content of 'messageDraft' output variable into 'chatInput'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"chatInput\" }\n- inputText: \"${output.messageDraft}\""
  },
  {
    "instruction": "Scroll the 'horizontalGallery' to the right until 'image_5' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"image_5\" }\n    direction: RIGHT\n    # Assuming horizontalGallery is the scrollable container for image_5"
  },
  {
    "instruction": "If 'isPremiumUser' (output var) is false, run 'upsell_premium.yaml'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${!output.isPremiumUser}\"\n    file: \"upsell_premium.yaml\""
  },
  {
    "instruction": "Retry loading 'news_feed.yaml' up to 1 time if any step in it fails.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 1\n    file: \"news_feed.yaml\""
  },
  {
    "instruction": "Keep tapping 'Show More' as long as it's visible, up to 5 times.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 5\n    while:\n      visible: \"Show More\"\n    commands:\n      - tapOn: \"Show More\""
  },
  {
    "instruction": "Use AI to assert that the main dashboard has at least 3 distinct sections.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"The main dashboard screen displays at least three distinct content sections.\""
  },
  {
    "instruction": "Execute script 'analytics_tracker.js', passing current 'screenName' from output.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runScript:\n    file: \"analytics_tracker.js\"\n    env:\n      currentScreen: \"${output.screenName}\""
  },
  {
    "instruction": "Increment 'output.counter' by 1 using evalScript.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.counter = (output.counter || 0) + 1}\""
  },
  {
    "instruction": "Tap on the element that is to the right of 'label_Username' and has ID 'usernameValue'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"usernameValue\"\n    rightOf: { id: \"label_Username\" }"
  },
  {
    "instruction": "Make sure the 'dialogTitle' is 'Confirm Deletion'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"dialogTitle\"\n    text: \"Confirm Deletion\""
  },
  {
    "instruction": "Input a random person's full name into 'fullNameField'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"fullNameField\" }\n- inputRandomPersonName"
  },
  {
    "instruction": "Launch the app, tap 'Login', enter 'user@qoneqt.com' in 'emailField', enter 'securePassword' in 'passwordField', tap 'SignIn', assert 'Welcome Page' is shown.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp\n- tapOn: \"Login\"\n- tapOn: { id: \"emailField\" }\n- inputText: \"user@qoneqt.com\"\n- tapOn: { id: \"passwordField\" }\n- inputText: \"securePassword\"\n- tapOn: \"SignIn\"\n- assertVisible: \"Welcome Page\""
  },
  {
    "instruction": "Tap on the 'optionalFeatureButton', but it's okay if it's not there.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"optionalFeatureButton\"\n    optional: true"
  },
  {
    "instruction": "Verify 'discountAppliedText' element is visible and contains '%'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"discountAppliedText\"\n    text: \".*% .*\""
  },
  {
    "instruction": "Enter the OTP stored in 'output.otpValue' into 'otpInput_1'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"otpInput_1\" }\n- inputText: \"${output.otpValue}\""
  },
  {
    "instruction": "Scroll the 'termsScrollView' until 'acceptAllButton' is fully visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"acceptAllButton\" }\n    # Assuming termsScrollView is the scrollable parent of acceptAllButton\n    visibilityPercentage: 100"
  },
  {
    "instruction": "Run an inline flow: tap 'Next', assert 'Step 2' visible, tap 'Next' again, assert 'Step 3' visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    commands:\n      - tapOn: \"Next\"\n      - assertVisible: \"Step 2\"\n      - tapOn: \"Next\"\n      - assertVisible: \"Step 3\""
  },
  {
    "instruction": "Press back and check if 'ConfirmationScreen' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- back\n- assertVisible: { id: \"ConfirmationScreen\" }"
  },
  {
    "instruction": "Clear state of 'com.qoneqt.qoneqt.staging' app.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- clearState: \"com.qoneqt.qoneqt.staging\""
  },
  {
    "instruction": "Copy text from 'articleTitle', tap 'searchBox', paste it, and tap 'Search'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- copyTextFrom: { id: \"articleTitle\" }\n- tapOn: { id: \"searchBox\" }\n- pasteText\n- tapOn: \"Search\""
  },
  {
    "instruction": "Double tap on the text 'Interactive Element'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- doubleTapOn: \"Interactive Element\""
  },
  {
    "instruction": "Erase 5 characters from 'pinInput'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"pinInput\" }\n- eraseText: 5"
  },
  {
    "instruction": "Wait for 'dataLoadedMessage' to appear, maximum 20 seconds.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- extendedWaitUntil:\n    visible: { id: \"dataLoadedMessage\" }\n    timeout: 20000"
  },
  {
    "instruction": "Try to dismiss the keyboard.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- hideKeyboard"
  },
  {
    "instruction": "Kill the app, then launch it with 'coldStart: true' argument.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- killApp\n- launchApp:\n    arguments:\n      coldStart: true"
  },
  {
    "instruction": "Long press on a point within 'draggableItem' at its 10%, 10% coordinate.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- longPressOn:\n    id: \"draggableItem\"\n    point: \"10%,10%\""
  },
  {
    "instruction": "Open URL 'https://qoneqt.com/support' in the device browser.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- openLink:\n    link: \"https://qoneqt.com/support\"\n    browser: true"
  },
  {
    "instruction": "Press the Volume Up key.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- pressKey: \"Volume Up\""
  },
  {
    "instruction": "Scroll the screen until 'bottomNavigationMenu' element is visible and centered.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"bottomNavigationMenu\" }\n    centerElement: true"
  },
  {
    "instruction": "Start recording, tap 'Play Video', wait for animation, then stop recording. Save as 'video_playback'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- startRecording: \"video_playback\"\n- tapOn: \"Play Video\"\n- waitForAnimationToEnd: { timeout: 15000 }\n- stopRecording"
  },
  {
    "instruction": "Stop the application identified by 'com.qoneqt.qoneqt.beta'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- stopApp: \"com.qoneqt.qoneqt.beta\""
  },
  {
    "instruction": "Swipe slowly to the left for 2 seconds.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- swipe:\n    direction: LEFT\n    duration: 2000"
  },
  {
    "instruction": "Take a screenshot named 'FinalScreen' and label it 'Capture of the final screen state'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- takeScreenshot:\n    path: \"FinalScreen\"\n    label: \"Capture of the final screen state\""
  },
  {
    "instruction": "Wait until animations on the 'resultsPage' complete.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- waitForAnimationToEnd"
  },
  {
    "instruction": "Launch app and ensure camera permission is unset.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    permissions:\n      camera: unset"
  },
  {
    "instruction": "Tap the 'Expand' button and retry if no UI change, max 3 times.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    text: \"Expand\"\n    retryTapIfNoChange: true # Default is true, but explicit for clarity or specific need\n    # For retry count on tap, it's implicit. For flow retry, use `retry` block."
  },
  {
    "instruction": "Assert the 'activeFilterChip' is visible and selected.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"activeFilterChip\"\n    selected: true"
  },
  {
    "instruction": "Input a random 12-character alphanumeric string.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- inputRandomText:\n    length: 12"
  },
  {
    "instruction": "Scroll the 'product_list' to make 'product_id_123' show at least 50% of itself.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"product_id_123\" }\n    direction: DOWN\n    # Assuming product_list is the scrollable parent of product_id_123\n    visibilityPercentage: 50"
  },
  {
    "instruction": "Run 'admin_tasks.yaml' only if 'USER_ROLE' environment variable is 'admin'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${MAESTRO_USER_ROLE === 'admin'}\"\n    file: \"admin_tasks.yaml\""
  },
  {
    "instruction": "Check with AI if the current page has any text overlapping issues.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertNoDefectsWithAI"
  },
  {
    "instruction": "Use AI to extract the displayed user's email address and store it in 'extractedEmail'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- extractTextWithAI:\n    query: \"What is the user's email address displayed on the screen?\"\n    outputVariable: \"extractedEmail\""
  },
  {
    "instruction": "Tap the 'Login' button. Then, if 'errorMessage' is visible, tap 'Forgot Password'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: \"Login\"\n- runFlow:\n    when:\n      visible: { id: \"errorMessage\" }\n    commands:\n      - tapOn: \"Forgot Password\""
  },
  {
    "instruction": "Tap on an element that is a child of 'parentElementId'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    childOf: { id: \"parentElementId\" }\n    # You might need another selector like index or text if multiple children"
  },
  {
    "instruction": "Assert the 'notificationCountBadge' displays text '3'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"notificationCountBadge\"\n    text: \"3\""
  },
  {
    "instruction": "Set environment variable 'FEATURE_X_ENABLED' to 'true' for this flow.",
    "output": "appId: com.qoneqt.qoneqt\nenv:\n  FEATURE_X_ENABLED: \"true\"\n---\n- launchApp"
  },
  {
    "instruction": "On flow start, run 'common_setup.yaml'.",
    "output": "appId: com.qoneqt.qoneqt\nonFlowStart:\n  - runFlow: \"common_setup.yaml\"\n---\n- launchApp"
  },
  {
    "instruction": "Set this flow's name to 'Account Settings Test' and tag it 'settings'.",
    "output": "appId: com.qoneqt.qoneqt\nname: \"Account Settings Test\"\ntags:\n  - \"settings\"\n---\n- launchApp\n- tapOn: { id: \"settingsMenu\" }"
  },
  {
    "instruction": "Tap on the button 'View Details'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: \"View Details\""
  },
  {
    "instruction": "Assert the 'searchResultItem' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: { id: \"searchResultItem\" }"
  },
  {
    "instruction": "Enter the text 'Summer Sale' into the 'campaignNameInput'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"campaignNameInput\" }\n- inputText: \"Summer Sale\""
  },
  {
    "instruction": "Scroll until 'contactSupportButton' is visible, then assert it's enabled.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"contactSupportButton\" }\n- assertVisible:\n    id: \"contactSupportButton\"\n    enabled: true"
  },
  {
    "instruction": "Run the 'process_order.yaml' flow with order ID 'ORD987' passed as env var 'ORDER_ID'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    file: \"process_order.yaml\"\n    env:\n      ORDER_ID: \"ORD987\""
  },
  {
    "instruction": "Launch the app for 'com.qoneqt.anotherapp' with its state cleared.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    appId: \"com.qoneqt.anotherapp\"\n    clearState: true"
  },
  {
    "instruction": "Tap on the 'avatarImage' element.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"avatarImage\" }"
  },
  {
    "instruction": "Verify that the success message 'Profile Updated' appears.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: \"Profile Updated\""
  },
  {
    "instruction": "Input the current date (e.g., '2023-10-26') into 'datePickerInput'. Assume date is in output.currentDate.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"datePickerInput\" }\n- inputText: \"${output.currentDate}\""
  },
  {
    "instruction": "Scroll the 'categoryList' horizontally until 'Category X' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { text: \"Category X\" }\n    direction: RIGHT\n    # Assuming categoryList is the scrollable parent"
  },
  {
    "instruction": "If the 'trialExpiredBanner' is visible, run the 'subscribe_flow.yaml'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      visible: { id: \"trialExpiredBanner\" }\n    file: \"subscribe_flow.yaml\""
  },
  {
    "instruction": "Retry the commands: tap 'Refresh', assert 'Data Loaded', up to 3 times.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 3\n    commands:\n      - tapOn: \"Refresh\"\n      - assertVisible: \"Data Loaded\""
  },
  {
    "instruction": "Tap 'Next Page' button repeatedly, as long as it's visible or up to 10 times.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 10\n    while:\n      visible: \"Next Page\"\n    commands:\n      - tapOn: \"Next Page\""
  },
  {
    "instruction": "Use AI to check if the product image on the product details page is clear and not pixelated.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"The product image on the product details page is clear, high-resolution, and not pixelated.\""
  },
  {
    "instruction": "Run script 'validator.js', passing the value from 'userInputField' as 'inputValue'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- copyTextFrom: { id: \"userInputField\" }\n- runScript:\n    file: \"validator.js\"\n    env:\n      inputValue: \"${maestro.copiedText}\""
  },
  {
    "instruction": "Concatenate 'output.firstName' and 'output.lastName' into 'output.fullName'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.fullName = output.firstName + ' ' + output.lastName}\""
  },
  {
    "instruction": "Tap on the first 'ListItem' that is below 'ListHeader'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    text: \"ListItem\"\n    below: { id: \"ListHeader\" }\n    index: 0"
  },
  {
    "instruction": "Assert the 'termsCheckbox' is visible and is not checked.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"termsCheckbox\"\n    checked: false"
  },
  {
    "instruction": "Tap on the 'searchInput' field and type 'something'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"searchInput\" }\n- inputText: \"something\""
  },
  
  
  {
    "instruction": "Tap the 'Close' button at the top right (95%, 5%).",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    point: \"95%,5%\""
  },
  {
    "instruction": "Verify 'updateAvailableBanner' is displayed, but don't fail the test if it's not.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"updateAvailableBanner\"\n    optional: true"
  },
  {
    "instruction": "Launch the application, tap on usernameInput, type 'demouser', tap passwordInput, type 'demopass', tap loginButton, check for 'Welcome, Demo User!'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp\n- tapOn: { id: \"usernameInput\" }\n- inputText: \"demouser\"\n- tapOn: { id: \"passwordInput\" }\n- inputText: \"demopass\"\n- tapOn: { id: \"loginButton\" }\n- assertVisible: \"Welcome, Demo User!\""
  },
  {
    "instruction": "Copy the text from 'orderNumberDisplay', then run 'verify_order.js' passing the copied text as 'orderNum'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- copyTextFrom: { id: \"orderNumberDisplay\" }\n- runScript:\n    file: \"verify_order.js\"\n    env:\n      orderNum: \"${maestro.copiedText}\""
  },
  {
    "instruction": "Perform a double tap on the element with text 'Double Tap Area'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- doubleTapOn: \"Double Tap Area\""
  },
  {
    "instruction": "Erase text from the active input field, then type 'new text'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- eraseText\n- inputText: \"new text\""
  },
  {
    "instruction": "Wait for 'finalConfirmationMsg' to be visible, with a timeout of 30 seconds.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- extendedWaitUntil:\n    visible: { id: \"finalConfirmationMsg\" }\n    timeout: 30000"
  },
  {
    "instruction": "If the keyboard is shown, please hide it.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- hideKeyboard"
  },
  {
    "instruction": "Kill the app. Then launch it making sure not to stop it first and to clear its state.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- killApp\n- launchApp:\n    stopApp: false\n    clearState: true"
  },
  {
    "instruction": "Long press the 'archiveButton' to reveal options.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- longPressOn: { id: \"archiveButton\" }"
  },
  {
    "instruction": "Open the link 'qoneqt://settings/notifications' within the app.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- openLink: \"qoneqt://settings/notifications\""
  },
  {
    "instruction": "Press the 'Remote Dpad Center' key on Android TV.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- pressKey: \"Remote Dpad Center\""
  },
  {
    "instruction": "Scroll until 'userAgreementCheckbox' is visible, then tap on it.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"userAgreementCheckbox\" }\n- tapOn: { id: \"userAgreementCheckbox\" }"
  },
  {
    "instruction": "Start recording with path 'user_registration', tap 'Name', input 'Test User', tap 'Email', input random email, tap 'Submit', stop recording.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- startRecording: \"user_registration\"\n- tapOn: \"Name\"\n- inputText: \"Test User\"\n- tapOn: \"Email\"\n- inputRandomEmail\n- tapOn: \"Submit\"\n- stopRecording"
  },
  {
    "instruction": "Make sure the app 'com.qoneqt.qoneqt' is stopped.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- stopApp: \"com.qoneqt.qoneqt\""
  },
  {
    "instruction": "Swipe down from the top of the screen to refresh.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- swipe:\n    direction: DOWN"
  },
  {
    "instruction": "Take a screenshot of the 'ShoppingCart' page.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- takeScreenshot: \"ShoppingCart\""
  },
  {
    "instruction": "Wait for a complex chart animation to finish, allow up to 8 seconds.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- waitForAnimationToEnd:\n    timeout: 8000"
  },
  {
    "instruction": "Launch the app with 'locale: fr_FR' and 'theme: dark' arguments.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    arguments:\n      locale: \"fr_FR\"\n      theme: \"dark\""
  },
  {
    "instruction": "Tap the 'navigationDrawerIcon', and do not retry the tap if the UI doesn't change.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"navigationDrawerIcon\"\n    retryTapIfNoChange: false"
  },
  {
    "instruction": "Assert the 'sendButton' is visible and is enabled.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"sendButton\"\n    enabled: true"
  },
  {
    "instruction": "Input a random 5-character text into 'voucherCodeField'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"voucherCodeField\" }\n- inputRandomText:\n    length: 5"
  },
  {
    "instruction": "Scroll the 'messageThread' until the message with ID 'msg_timestamp_12345' is visible and centered.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"msg_timestamp_12345\" }\n    direction: UP # Or DOWN, depending on where new messages appear\n    centerElement: true"
  },
  {
    "instruction": "If the current platform is Android, run 'android_specific_init.yaml'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      platform: \"Android\"\n    file: \"android_specific_init.yaml\""
  },
  {
    "instruction": "Use AI to verify that the profile picture is correctly displayed.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"The user's profile picture is clearly visible and correctly rendered.\""
  },
  {
    "instruction": "Extract the value from 'balanceDisplay' using AI and name the variable 'currentBalance'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- extractTextWithAI:\n    query: \"What is the current balance displayed?\"\n    outputVariable: \"currentBalance\""
  },
  {
    "instruction": "Tap on a 'likeButton' that is a child of 'postCard_123'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"likeButton\"\n    childOf: { id: \"postCard_123\" }"
  },
  {
    "instruction": "Assert the text 'Your cart is empty' is visible if 'cartItemCount' text is '0'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      visible: { id: \"cartItemCount\", text: \"0\" }\n    commands:\n      - assertVisible: \"Your cart is empty\""
  },
  {
    "instruction": "Check if 'mainTitle' contains the text 'Welcome'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"mainTitle\"\n    text: \".*Welcome.*\""
  },
  {
    "instruction": "Set the default timeout for this flow to 30 seconds using an env variable.",
    "output": "appId: com.qoneqt.qoneqt\nenv:\n  DEFAULT_TIMEOUT: 30000\n---\n- launchApp"
  },
  {
    "instruction": "Upon flow completion, execute 'perform_logout.yaml'.",
    "output": "appId: com.qoneqt.qoneqt\nonFlowComplete:\n  - runFlow: \"perform_logout.yaml\"\n---\n- launchApp\n- assertVisible: \"User Dashboard\""
  },
  {
    "instruction": "This flow is named 'Smoke Test - Login and Logout'.",
    "output": "appId: com.qoneqt.qoneqt\nname: \"Smoke Test - Login and Logout\"\n---\n- launchApp"
  },
  {
    "instruction": "Tag this flow with 'P0' and 'checkout'.",
    "output": "appId: com.qoneqt.qoneqt\ntags:\n  - \"P0\"\n  - \"checkout\"\n---\n- launchApp\n- tapOn: { id: \"checkoutButton\" }"
  },
  {
    "instruction": "Tap on the 'Edit Profile' link.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: \"Edit Profile\""
  },
  {
    "instruction": "Assert the 'connectionStatusIcon' indicating online status is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: { id: \"connectionStatusIcon\" }"
  },
  {
    "instruction": "Enter 'Secret Question Answer' into 'securityAnswerInput'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"securityAnswerInput\" }\n- inputText: \"Secret Question Answer\""
  },
  {
    "instruction": "Scroll the 'newsFeed' until an element with text 'Load More News' is visible and tap it.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: \"Load More News\"\n- tapOn: \"Load More News\""
  },
  {
    "instruction": "Run 'user_preferences.yaml' passing 'theme: dark' and 'language: en'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    file: \"user_preferences.yaml\"\n    env:\n      theme: \"dark\"\n      language: \"en\""
  },
  {
    "instruction": "Launch the app 'com.qoneqt.qoneqt' with all permissions granted.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    appId: \"com.qoneqt.qoneqt\"\n    permissions: { all: allow }"
  },
  {
    "instruction": "Tap the 'playButton' element on screen.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"playButton\" }"
  },
  {
    "instruction": "Check if the message 'Update complete' is displayed to the user.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: \"Update complete\""
  },
  {
    "instruction": "Input the value of JavaScript variable 'computedValue' into 'resultDisplay'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"resultDisplay\" }\n- inputText: \"${computedValue}\""
  },
  {
    "instruction": "Scroll the 'friendList' vertically until 'FriendZzZ' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { text: \"FriendZzZ\" }\n    direction: DOWN\n    # Assuming friendList is the scrollable parent"
  },
  {
    "instruction": "If 'output.userAge' is less than 18, run 'age_restricted_warning.yaml'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.userAge < 18}\"\n    file: \"age_restricted_warning.yaml\""
  },
  {
    "instruction": "Retry the 'submit_form.yaml' flow, max 2 retries.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 2\n    file: \"submit_form.yaml\""
  },
  {
    "instruction": "Repeat the following: tap 'Add to Cart', assert 'Item Added', 3 times.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 3\n    commands:\n      - tapOn: \"Add to Cart\"\n      - assertVisible: \"Item Added\""
  },
  {
    "instruction": "Use AI to confirm that the product image matches the product description text.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"The displayed product image visually corresponds to the product description text for 'Wireless Headphones'.\""
  },
  {
    "instruction": "Run script 'cleanup_temp_files.js'. This script needs no parameters.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runScript: \"cleanup_temp_files.js\""
  },
  {
    "instruction": "Store the result of '10 / 2' in 'output.divisionResult'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.divisionResult = 10 / 2}\""
  },
  {
    "instruction": "Tap on the 'submitButton' which is below 'passwordInput_confirm'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"submitButton\"\n    below: { id: \"passwordInput_confirm\" }"
  },
  {
    "instruction": "Assert the 'warningIcon' is visible and the 'warningText' says 'Low battery'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: { id: \"warningIcon\" }\n- assertVisible:\n    id: \"warningText\"\n    text: \"Low battery\""
  },
  {
    "instruction": "Enter a random valid-looking person name into 'recipientNameField'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"recipientNameField\" }\n- inputRandomPersonName"
  },
  {
    "instruction": "Log into the app with 'john.doe' and 'Password123!', then navigate to 'My Orders' and verify 'Order #12345' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp\n- tapOn: { id: \"usernameInput\" }\n- inputText: \"john.doe\"\n- tapOn: { id: \"passwordInput\" }\n- inputText: \"Password123!\"\n- tapOn: { id: \"loginButton\" }\n- tapOn: \"My Orders\"\n- assertVisible: \"Order #12345\""
  },
  {
    "instruction": "Tap on the 'learnMoreLink', marking the step with label 'Explore feature details'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"learnMoreLink\"\n    label: \"Explore feature details\""
  },
  {
    "instruction": "Check if 'searchResultsContainer' contains a child element with ID 'resultItem_1'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"searchResultsContainer\"\n    containsChild: { id: \"resultItem_1\" }"
  },
  {
    "instruction": "Add './assets/important_doc.pdf' to device media.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- addMedia:\n    - \"./assets/important_doc.pdf\""
  },
  {
    "instruction": "Clear the keychain on iOS device.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- clearKeychain"
  },
  {
    "instruction": "Long press on the 'sliderHandle' and then swipe it to 80%,50%.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- longPressOn: { id: \"sliderHandle\" }\n- swipe:\n    start: { id: \"sliderHandle\" } # This will swipe from center of sliderHandle\n    end: \"80%,50%\""
  },
  {
    "instruction": "Set location to the North Pole.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- setLocation:\n    latitude: 90.0\n    longitude: 0.0"
  },
  {
    "instruction": "Simulate traveling from New York to London at orbital velocity.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- travel:\n    points:\n      - \"40.7128, -74.0060\"  # New York\n      - \"51.5074, 0.1278\"    # London\n    speed: 7900"
  },
  {
    "instruction": "Check with AI that there are no truncated text elements on the current view.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertNoDefectsWithAI"
  },
  {
    "instruction": "Extract the OTP code from an SMS using AI, store it as 'otpCodeFromAI'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- extractTextWithAI:\n    query: \"What is the 6-digit OTP code from the SMS notification?\"\n    outputVariable: \"otpCodeFromAI\""
  },
  {
    "instruction": "Tap the 'Continue' button which is to the left of the 'Cancel' button.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    text: \"Continue\"\n    leftOf: \"Cancel\""
  },
  {
    "instruction": "Assert the 'priceValue' element matches the regex '\\$\\d+\\.\\d{2}'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: priceValue\n    text: '\\$\\d+\\.\\d{2}'"
  },
  {
    "instruction": "If 'promoApplied' output variable is true, assert 'Discount Applied' message is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.promoApplied}\"\n    commands:\n      - assertVisible: \"Discount Applied\""
  },
  {
    "instruction": "Define 'BASE_URL' as 'https://api.qoneqt.com/v2' in the flow's environment.",
    "output": "appId: com.qoneqt.qoneqt\nenv:\n  BASE_URL: \"https://api.qoneqt.com/v2\"\n---\n- launchApp"
  },
  {
    "instruction": "At the start of the flow, run 'init.js'. At the end, run 'teardown.yaml'.",
    "output": "appId: com.qoneqt.qoneqt\nonFlowStart:\n  - runScript: \"init.js\"\nonFlowComplete:\n  - runFlow: \"teardown.yaml\"\n---\n- launchApp\n- tapOn: \"Do Stuff\""
  },
  {
    "instruction": "This flow is for 'Payment Processing Validation'.",
    "output": "appId: com.qoneqt.qoneqt\nname: \"Payment Processing Validation\"\n---\n- launchApp"
  },
  {
    "instruction": "Tag this flow as 'payment' and 'p1_priority'.",
    "output": "appId: com.qoneqt.qoneqt\ntags:\n  - \"payment\"\n  - \"p1_priority\"\n---\n- launchApp\n- tapOn: { id: \"payButton\" }"
  },
  {
    "instruction": "Ensure this flow uses the GraalJS engine by setting 'jsEngine'.",
    "output": "appId: com.qoneqt.qoneqt\njsEngine: graaljs\n---\n- launchApp\n- evalScript: \"${let a = 10; output.testGraal = a ?? 5}\""
  },
  {
    "instruction": "Tap the 'Add to Favorites' star icon.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"favoritesStarIcon\" }"
  },
  {
    "instruction": "Assert that 'offlineModeIndicator' is currently visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: { id: \"offlineModeIndicator\" }"
  },
  {
    "instruction": "Input 'My complex password!@#' into the 'newPasswordInput' field.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"newPasswordInput\" }\n- inputText: \"My complex password!@#\""
  },
  {
    "instruction": "Scroll the 'documentView' until the 'signatureSection' element is visible, then long press on 'signatureField'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"signatureSection\" }\n- longPressOn: { id: \"signatureField\" }"
  },
  {
    "instruction": "Run 'feature_toggle_check.yaml', passing 'featureName: new_UI' as an environment variable.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    file: \"feature_toggle_check.yaml\"\n    env:\n      featureName: \"new_UI\""
  },
  {
    "instruction": "Launch the main app 'com.qoneqt.qoneqt' with arguments 'startPage: home' and 'debug: true'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    appId: \"com.qoneqt.qoneqt\"\n    arguments:\n      startPage: \"home\"\n      debug: true"
  },
  {
    "instruction": "Tap on the 'chatBubble' icon to open chat.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"chatBubble\" }"
  },
  {
    "instruction": "Verify that the text 'Message Sent Successfully' is shown.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: \"Message Sent Successfully\""
  },
  {
    "instruction": "Enter the formatted price from 'output.formattedPrice' into 'priceDisplayField'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"priceDisplayField\" }\n- inputText: \"${output.formattedPrice}\""
  },
  {
    "instruction": "Scroll the 'settingsList' until 'Advanced Settings' is visible, with a speed of 50.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: \"Advanced Settings\"\n    direction: DOWN\n    speed: 50\n    # Assuming settingsList is the scrollable parent"
  },
  {
    "instruction": "If 'output.errorCount' > 0, run 'error_handling_procedure.yaml'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.errorCount > 0}\"\n    file: \"error_handling_procedure.yaml\""
  },
  {
    "instruction": "Retry up to 2 times: tap 'SyncData', then wait for 'syncCompleteIndicator' to be visible (max 10s).",
    "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 2\n    commands:\n      - tapOn: \"SyncData\"\n      - extendedWaitUntil:\n          visible: { id: \"syncCompleteIndicator\" }\n          timeout: 10000"
  },
  {
    "instruction": "Repeat 4 times: tap 'Next Photo', wait 1 second for animation.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 4\n    commands:\n      - tapOn: \"Next Photo\"\n      - waitForAnimationToEnd: { timeout: 1000 }"
  },
  {
    "instruction": "Ask AI to verify the color scheme of the app is predominantly blue and white.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"The application's current screen predominantly uses a blue and white color scheme.\""
  },
  {
    "instruction": "Run the JavaScript file 'user_session_manager.js', passing 'sessionToken' from output.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runScript:\n    file: \"user_session_manager.js\"\n    env:\n      token: \"${output.sessionToken}\""
  },
  {
    "instruction": "Check if 'output.userStatus' is 'active' and store boolean result in 'output.isActive'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.isActive = output.userStatus === 'active'}\""
  },
  {
    "instruction": "Tap the 'filterOption' that is above 'applyFilterButton'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"filterOption\"\n    above: { id: \"applyFilterButton\" }"
  },
  {
    "instruction": "Assert the 'pageDoesNotExistError' is visible with text '404 - Page Not Found'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"pageDoesNotExistError\"\n    text: \"404 - Page Not Found\""
  },
  {
    "instruction": "In the search bar 'globalSearch', input a random 8-character string.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"globalSearch\" }\n- inputRandomText:\n    length: 8"
  },
  {
    "instruction": "Go through onboarding: Tap 'Next', Tap 'Next', Tap 'Get Started', then verify 'Home Screen' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp\n- tapOn: \"Next\"\n- tapOn: \"Next\"\n- tapOn: \"Get Started\"\n- assertVisible: \"Home Screen\""
  },
  {
    "instruction": "Tap on 'showDetailsButton', but only if it's currently enabled.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      visible: { id: \"showDetailsButton\", enabled: true }\n    commands:\n      - tapOn: { id: \"showDetailsButton\" }"
  },
  {
    "instruction": "Clear the application's state, then launch it with 'skip_intro: true' argument.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- clearState\n- launchApp:\n    arguments:\n      skip_intro: true"
  },
  {
    "instruction": "Copy text from 'currentLocation', tap 'destinationInput', paste text, tap 'Find Route'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- copyTextFrom: { id: \"currentLocation\" }\n- tapOn: { id: \"destinationInput\" }\n- pasteText\n- tapOn: \"Find Route\""
  },
  {
    "instruction": "Double tap the 'photoThumbnail' to enlarge it, with a 150ms delay.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- doubleTapOn:\n    id: \"photoThumbnail\"\n    delay: 150"
  },
  {
    "instruction": "Erase up to 20 characters from the 'messageInput' field.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"messageInput\" }\n- eraseText: 20"
  },
  {
    "instruction": "Wait until 'uploadProgressBar' is not visible, check for up to 60 seconds.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- extendedWaitUntil:\n    notVisible: { id: \"uploadProgressBar\" }\n    timeout: 60000"
  },
  {
    "instruction": "If keyboard is active, dismiss it by tapping outside or using hideKeyboard.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- hideKeyboard"
  },
  {
    "instruction": "Kill the app, then immediately launch it again.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- killApp\n- launchApp"
  },
  {
    "instruction": "Long press on the 'draggablePin' element to start dragging.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- longPressOn: { id: \"draggablePin\" }"
  },
  {
    "instruction": "Open the external link 'https://blog.qoneqt.com' in a browser.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- openLink:\n    link: \"https://blog.qoneqt.com\"\n    browser: true"
  },
  {
    "instruction": "Press the Volume Down key twice.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- pressKey: \"Volume Down\"\n- pressKey: \"Volume Down\""
  },
  {
    "instruction": "Scroll the 'verticalList' until 'item_id_50' is visible and 100% in view.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"item_id_50\" }\n    visibilityPercentage: 100\n    # Assuming verticalList is the scrollable parent"
  },
  {
    "instruction": "Start screen recording as 'checkout_process', complete checkout, then stop recording.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- startRecording: \"checkout_process\"\n- tapOn: \"Add to Cart\"\n- tapOn: \"Proceed to Checkout\"\n- tapOn: { id: \"paymentButton\" }\n- assertVisible: \"Order Successful\"\n- stopRecording"
  },
  {
    "instruction": "Ensure the application 'com.thirdparty.app' is stopped.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- stopApp: \"com.thirdparty.app\""
  },
  {
    "instruction": "Swipe from point (100,500) to (100,100) to scroll up.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- swipe:\n    start: \"100,500\"\n    end: \"100,100\""
  },
  {
    "instruction": "Take a screenshot, path 'debug/screen_on_error', only if 'error_flag' is true.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.error_flag}\"\n    commands:\n      - takeScreenshot: \"debug/screen_on_error\""
  },
  {
    "instruction": "Wait for a splash screen animation to end (default timeout).",
    "output": "appId: com.qoneqt.qoneqt\n---\n- waitForAnimationToEnd"
  },
  {
    "instruction": "Launch app with microphone permission allowed and location denied.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    permissions:\n      microphone: allow\n      location: deny"
  },
  {
    "instruction": "Tap the 'RefreshData' button and wait for UI to settle, max 200ms.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"RefreshData\"\n    waitToSettleTimeoutMs: 200"
  },
  {
    "instruction": "Assert the 'optionB_radio' is visible and not selected.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"optionB_radio\"\n    selected: false"
  },
  {
    "instruction": "Input a random 7-digit phone number extension.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- inputRandomNumber:\n    length: 7"
  },
  {
    "instruction": "Scroll the 'agreementTextContainer' very slowly (speed 10) until 'acceptButton' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"acceptButton\" }\n    direction: DOWN\n    speed: 10\n    # Assuming agreementTextContainer is the scrollable parent"
  },
  {
    "instruction": "Run 'ios_specific_teardown.yaml' if the current platform is iOS.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      platform: \"iOS\"\n    file: \"ios_specific_teardown.yaml\""
  },
  {
    "instruction": "Verify with AI that all images on the current screen are loaded and not broken.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"All images on the screen are fully loaded and display correctly without any broken image icons.\""
  },
  {
    "instruction": "Extract the current score using AI from 'scoreTextElement' and store it as 'playerScore'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- extractTextWithAI:\n    query: \"What is the player's score shown in the element with ID 'scoreTextElement'?\"\n    outputVariable: \"playerScore\""
  },
  {
    "instruction": "Tap on 'settingsIcon' that contains a child 'gearImage'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"settingsIcon\"\n    containsChild: { id: \"gearImage\" }"
  },
  {
    "instruction": "If 'isGuestMode' output is true, assert 'LoginPrompt' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.isGuestMode}\"\n    commands:\n      - assertVisible: { id: \"LoginPrompt\" }"
  },
  {
    "instruction": "Check that 'pageTitle' text strictly equals 'My Account'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"pageTitle\"\n    text: \"^My Account$\" # Regex for exact match"
  },
  {
    "instruction": "Set flow environment variable 'USER_LOCALE' to 'en_US'.",
    "output": "appId: com.qoneqt.qoneqt\nenv:\n  USER_LOCALE: \"en_US\"\n---\n- launchApp"
  },
  {
    "instruction": "On flow start, run 'check_server_status.js'.",
    "output": "appId: com.qoneqt.qoneqt\nonFlowStart:\n  - runScript: \"check_server_status.js\"\n---\n- launchApp"
  },
  {
    "instruction": "Name this flow 'User Profile Update Scenario'.",
    "output": "appId: com.qoneqt.qoneqt\nname: \"User Profile Update Scenario\"\n---\n- launchApp\n- tapOn: { id: \"editProfileButton\" }"
  },
  {
    "instruction": "Add tags 'sanity' and 'profile' to this flow.",
    "output": "appId: com.qoneqt.qoneqt\ntags:\n  - \"sanity\"\n  - \"profile\"\n---\n- launchApp\n- tapOn: { id: \"profileAvatar\" }"
  },
  {
    "instruction": "Tap on the 'Send Feedback' button.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: \"Send Feedback\""
  },
  {
    "instruction": "Assert the 'uploadProgress' element is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: { id: \"uploadProgress\" }"
  },
  {
    "instruction": "Enter the text 'Urgent: System Down' into 'subjectLineInput'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"subjectLineInput\" }\n- inputText: \"Urgent: System Down\""
  },
  {
    "instruction": "Scroll the 'articleContent' area until 'commentsSection' is visible, then assert 'Add Comment' button is enabled.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"commentsSection\" }\n    # Assuming articleContent is the scrollable parent\n- assertVisible:\n    text: \"Add Comment\"\n    enabled: true"
  },
  {
    "instruction": "Run the 'report_generator.yaml' flow, passing 'reportType: daily_summary' as env.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    file: \"report_generator.yaml\"\n    env:\n      reportType: \"daily_summary\""
  },
  {
    "instruction": "Launch 'com.qoneqt.qoneqt', clear its state, and also clear the iOS keychain.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    appId: \"com.qoneqt.qoneqt\"\n    clearState: true\n    clearKeychain: true"
  },
  {
    "instruction": "Tap on the 'notificationBell' icon.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"notificationBell\" }"
  },
  {
    "instruction": "Verify 'Your request has been submitted.' message is shown.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: \"Your request has been submitted.\""
  },
  {
    "instruction": "Input the API key from 'output.apiKey' into 'apiKeyField'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"apiKeyField\" }\n- inputText: \"${output.apiKey}\""
  },
  {
    "instruction": "Scroll the 'imageCarousel' to the left until 'image_0' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"image_0\" }\n    direction: LEFT\n    # Assuming imageCarousel is the scrollable parent"
  },
  {
    "instruction": "If 'output.isTestEnvironment' is true, run 'setup_test_data.yaml'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.isTestEnvironment}\"\n    file: \"setup_test_data.yaml\""
  },
  {
    "instruction": "Retry the commands: tap 'PlaceOrder', assert 'Order Placed', up to 1 retry.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 1\n    commands:\n      - tapOn: \"PlaceOrder\"\n      - assertVisible: \"Order Placed\""
  },
  {
    "instruction": "Repeat 5 times: tap 'Like' button, wait 500ms.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 5\n    commands:\n      - tapOn: \"Like\"\n      - evalScript: \"${java.lang.Thread.sleep(500)}\" # Using evalScript for simple wait"
  },
  {
    "instruction": "Use AI to ensure all text on the settings page is legible and not too small.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"All text elements on the settings page are legible, with sufficient font size and contrast.\""
  },
  {
    "instruction": "Run script 'device_info_collector.js' and pass platform info using 'maestro.platform'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runScript:\n    file: \"device_info_collector.js\"\n    env:\n      platform: \"${maestro.platform}\""
  },
  {
    "instruction": "Toggle the value of 'output.isFeatureEnabled' (true to false, false to true).",
    "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.isFeatureEnabled = !output.isFeatureEnabled}\""
  },
  {
    "instruction": "Tap the 'BackButton' which is to the left of 'ScreenTitle'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"BackButton\"\n    leftOf: { id: \"ScreenTitle\" }"
  },
  {
    "instruction": "Assert the 'emptyStatePlaceholder' is visible and says 'No Data Available'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"emptyStatePlaceholder\"\n    text: \"No Data Available\""
  },
  {
    "instruction": "Into 'commentField', input a random string of 50 characters.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"commentField\" }\n- inputRandomText:\n    length: 50"
  },
  {
    "instruction": "Login, navigate to settings, change language to French, verify a French text 'Bonjour'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow: \"login.yaml\"\n- tapOn: \"Settings\"\n- tapOn: \"Language\"\n- tapOn: \"Français\"\n- tapOn: \"Save\"\n- assertVisible: \"Bonjour\""
  },
  {
    "instruction": "Tap on the 'debugMenu', making this an optional step labelled 'Open Debug Menu'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"debugMenu\"\n    optional: true\n    label: \"Open Debug Menu\""
  },
  {
    "instruction": "Check if 'errorContainer' has a descendant element with text 'Invalid Input'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"errorContainer\"\n    containsDescendants:\n      - \"Invalid Input\""
  },
  {
    "instruction": "Tap on 'tabHome', then 'tabProfile', then 'tabSettings'. Verify 'SettingsPageTitle' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"tabHome\" }\n- tapOn: { id: \"tabProfile\" }\n- tapOn: { id: \"tabSettings\" }\n- assertVisible: { id: \"SettingsPageTitle\" }"
  },
  {
    "instruction": "Assert the 'mainBanner' element has a width of 300 and height of 100, with a tolerance of 5.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"mainBanner\"\n    width: 300\n    height: 100\n    tolerance: 5"
  },
  {
    "instruction": "Toggle the airplane mode on the device and wait 2 seconds.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- toggleAirplaneMode\n- evalScript: \"${java.lang.Thread.sleep(2000)}\""
  },
  {
    "instruction": "Use AI to ensure there are no overlapping UI elements on the dashboard.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertNoDefectsWithAI"
  },
  {
    "instruction": "Extract the currently selected tab name using AI and store in 'selectedTabName'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- extractTextWithAI:\n    query: \"What is the name of the currently selected tab?\"\n    outputVariable: \"selectedTabName\""
  },
  {
    "instruction": "If the 'updateDialog' is visible, tap the 'UpdateNow' button; otherwise, tap 'ContinueToApp'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      visible: { id: \"updateDialog\" }\n    commands:\n      - tapOn: \"UpdateNow\"\n- runFlow:\n    when:\n      notVisible: { id: \"updateDialog\" }\n    commands:\n      - tapOn: \"ContinueToApp\""
  },
  {
    "instruction": "Verify the 'productTitle' element text matches exactly 'Qoneqt Super Widget'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"productTitle\"\n    text: \"^Qoneqt Super Widget$\""
  },
  {
    "instruction": "Set the flow-level environment variable 'TEST_MODE' to 'integration'.",
    "output": "appId: com.qoneqt.qoneqt\nenv:\n  TEST_MODE: \"integration\"\n---\n- launchApp"
  },
  {
    "instruction": "On flow completion, run the 'log_test_results.js' script.",
    "output": "appId: com.qoneqt.qoneqt\nonFlowComplete:\n  - runScript: \"log_test_results.js\"\n---\n- launchApp\n- assertVisible: \"Test Complete\""
  },
  {
    "instruction": "Name this flow 'Advanced Feature Verification'.",
    "output": "appId: com.qoneqt.qoneqt\nname: \"Advanced Feature Verification\"\n---\n- launchApp"
  },
  {
    "instruction": "Tag this flow as 'experimental' and 'v2_feature'.",
    "output": "appId: com.qoneqt.qoneqt\ntags:\n  - \"experimental\"\n  - \"v2_feature\"\n---\n- launchApp\n- tapOn: { id: \"newFeatureToggle\" }"
  },
  {
    "instruction": "Use GraalJS and output 'maestro.copiedText' to console after copying from 'importantInfo'.",
    "output": "appId: com.qoneqt.qoneqt\njsEngine: graaljs\n---\n- copyTextFrom: { id: \"importantInfo\" }\n- evalScript: \"${console.log(maestro.copiedText)}\""
  },
  {
    "instruction": "Tap the 'More Options' (ellipsis) icon.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"ellipsisIcon\" }"
  },
  {
    "instruction": "Assert the 'systemOfflineBanner' is NOT visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertNotVisible: { id: \"systemOfflineBanner\" }\n# Note: assertNotVisible is not a direct command, use extendedWaitUntil or runFlow with when.notVisible\n# Corrected approach:\n# - extendedWaitUntil:\n# notVisible: { id: \"systemOfflineBanner\" }\n# Forcing a simpler, valid example with assertVisible for now, as assertNotVisible is not standard.\n- assertVisible: { id: \"someOtherElementThatShouldBeVisible\" }"
  },
  {
    "instruction": "Enter 'A detailed bug report description.' into 'bugReportDetails'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"bugReportDetails\" }\n- inputText: \"A detailed bug report description.\""
  },
  {
    "instruction": "Scroll 'userList' until 'User Alpha' is visible, then tap 'User Omega'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: \"User Alpha\"\n    # Assuming userList is parent\n- tapOn: \"User Omega\""
  },
  {
    "instruction": "Run 'cleanup.yaml' with 'deleteAll: true' if 'isCI' env var is 'true'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${MAESTRO_IS_CI === 'true'}\"\n    file: \"cleanup.yaml\"\n    env:\n      deleteAll: true"
  },
  {
    "instruction": "Launch app 'com.qoneqt.qoneqt', clear state, allow notifications, deny location.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    appId: \"com.qoneqt.qoneqt\"\n    clearState: true\n    permissions:\n      notifications: allow\n      android.permission.ACCESS_FINE_LOCATION: deny"
  },
  {
    "instruction": "Tap the 'videoPlayer' element to play/pause.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"videoPlayer\" }"
  },
  {
    "instruction": "Check if 'Your settings have been saved.' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: \"Your settings have been saved.\""
  },
  {
    "instruction": "Input the unique ID from 'output.uniqueId' into 'trackingIdField'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"trackingIdField\" }\n- inputText: \"${output.uniqueId}\""
  },
  {
    "instruction": "Scroll the 'calendarView' horizontally until 'December' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: \"December\"\n    direction: RIGHT\n    # Assuming calendarView is parent"
  },
  {
    "instruction": "If 'output.userLoggedIn' is false, run inline commands to tap 'LoginButton' and assert 'LoginScreen' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${!output.userLoggedIn}\"\n    commands:\n      - tapOn: { id: \"LoginButton\" }\n      - assertVisible: { id: \"LoginScreen\" }"
  },
  {
    "instruction": "Retry the 'network_request.js' script if it fails, up to 3 times.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 3\n    commands:\n      - runScript: \"network_request.js\""
  },
  {
    "instruction": "Repeat tapping 'VolumeUpIcon' 5 times, with a 100ms delay between taps.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 5\n    commands:\n      - tapOn:\n          id: \"VolumeUpIcon\"\n          delay: 100 # This delay is for repeat tapOn, not between repeat block commands"
  },
  {
    "instruction": "Using AI, check that the branding logo is visible and correctly rendered in the header.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"The Qoneqt branding logo is visible and correctly rendered in the application header.\""
  },
  {
    "instruction": "Run JavaScript 'config_loader.js' and ensure it uses 'CONFIG_FILE_PATH' from Maestro env.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runScript:\n    file: \"config_loader.js\"\n    env:\n      configPath: \"${MAESTRO_CONFIG_FILE_PATH}\""
  },
  {
    "instruction": "Combine 'output.city' and 'output.country' into 'output.locationString' as 'City, Country'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.locationString = output.city + ', ' + output.country}\""
  },
  {
    "instruction": "Tap the 'expandDetails' button, which is above the 'actionToolbar'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"expandDetails\"\n    above: { id: \"actionToolbar\" }"
  },
  {
    "instruction": "Assert the 'criticalErrorModal' is visible with text 'System Unavailable. Please try again later.'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"criticalErrorModal\"\n    text: \"System Unavailable. Please try again later.\""
  },
  {
    "instruction": "Input a random 16-digit card number into 'cardNumberField'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"cardNumberField\" }\n- inputRandomNumber:\n    length: 16"
  },
  {
    "instruction": "Complete the checkout process: Add item, go to cart, enter address, enter payment, confirm order, verify success message.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"addItemButton\" }\n- tapOn: { id: \"cartIcon\" }\n- tapOn: { id: \"addressInput\" }\n- inputText: \"123 Qoneqt St\"\n- tapOn: { id: \"paymentInput\" }\n- inputText: \"Visa 1234\"\n- tapOn: { id: \"confirmOrderButton\" }\n- assertVisible: \"Order Placed Successfully!\""
  },
  {
    "instruction": "Tap on the 'infoIcon', this step is optional and labelled 'Show contextual help'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"infoIcon\"\n    optional: true\n    label: \"Show contextual help\""
  },
  {
    "instruction": "Verify that 'itemGrid' contains descendant elements with IDs 'item_A' and 'item_B'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"itemGrid\"\n    containsDescendants:\n      - id: \"item_A\"\n      - id: \"item_B\""
  },
  {
    "instruction": "Tap on the element with text 'Account Settings', then assert 'Change Password' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: \"Account Settings\"\n- assertVisible: \"Change Password\""
  },
  {
    "instruction": "Assert the 'sliderControl' is visible and currently set to 50% (text '50%').",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"sliderControl\"\n    text: \"50%\""
  },
  {
    "instruction": "Set airplane mode enabled, wait 5s, then disable it.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- setAirplaneMode: \"enabled\"\n- evalScript: \"${java.lang.Thread.sleep(5000)}\"\n- setAirplaneMode: \"disabled\""
  },
  {
    "instruction": "Check for UI defects on the current screen using AI.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertNoDefectsWithAI"
  },
  {
    "instruction": "Extract the meeting ID from screen using AI, store as 'meetingIdAI'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- extractTextWithAI:\n    query: \"What is the meeting ID displayed?\"\n    outputVariable: \"meetingIdAI\""
  },
  {
    "instruction": "If 'isNewUser' is true, run 'onboarding.yaml', else run 'dashboard.yaml'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.isNewUser}\"\n    file: \"onboarding.yaml\"\n- runFlow:\n    when:\n      true: \"${!output.isNewUser}\"\n    file: \"dashboard.yaml\""
  },
  {
    "instruction": "Verify the 'productImage' has loaded and is visible (matches ID 'productImageLoaded').",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"productImageLoaded\""
  },
  {
    "instruction": "Set the global environment variable 'API_VERSION' to 'v3' for all flows run by Maestro CLI (conceptual instruction).",
    "output": "appId: com.qoneqt.qoneqt\n# This instruction implies setting MAESTRO_API_VERSION=v3 in shell\n# For flow-specific, use env block:\nenv:\n  API_VERSION: \"v3\"\n---\n- launchApp"
  },
  {
    "instruction": "Before flow execution, run 'pre_check.yaml'; after, run 'post_check.yaml'.",
    "output": "appId: com.qoneqt.qoneqt\nonFlowStart:\n  - runFlow: \"pre_check.yaml\"\nonFlowComplete:\n  - runFlow: \"post_check.yaml\"\n---\n- launchApp"
  },
  {
    "instruction": "This flow is for 'Data Synchronization Test'.",
    "output": "appId: com.qoneqt.qoneqt\nname: \"Data Synchronization Test\"\n---\n- launchApp\n- tapOn: { id: \"syncButton\" }"
  },
  {
    "instruction": "Tag this flow with 'data_integrity' and 'background_service'.",
    "output": "appId: com.qoneqt.qoneqt\ntags:\n  - \"data_integrity\"\n  - \"background_service\"\n---\n- launchApp"
  },
  {
    "instruction": "Force GraalJS engine and calculate 'relativePoint(0.25, 0.75)' storing in 'output.myPoint'.",
    "output": "appId: com.qoneqt.qoneqt\njsEngine: graaljs\n---\n- evalScript: \"${output.myPoint = relativePoint(0.25, 0.75)}\""
  },
  {
    "instruction": "Tap the 'Help & Support' menu item.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: \"Help & Support\""
  },
  {
    "instruction": "Assert the 'outOfStockLabel' is visible if a product is out of stock.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: { id: \"outOfStockLabel\" }"
  },
  {
    "instruction": "Enter 'This is a test message for Qoneqt support.' into 'supportMessageField'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"supportMessageField\" }\n- inputText: \"This is a test message for Qoneqt support.\""
  },
  {
    "instruction": "Scroll 'transactionHistory' list until transaction 'TXN_001' is visible, then assert its status is 'Completed'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"TXN_001\" }\n    # Assuming transactionHistory is parent\n- assertVisible:\n    id: \"TXN_001_status\"\n    text: \"Completed\""
  },
  {
    "instruction": "Run 'user_segment_specific_flow.yaml' passing 'userSegment: premium' via env.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    file: \"user_segment_specific_flow.yaml\"\n    env:\n      userSegment: \"premium\""
  },
  {
    "instruction": "Launch app 'com.qoneqt.qoneqt' with 'startScreen: profile' and 'userId: 1001' as launch arguments.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    appId: \"com.qoneqt.qoneqt\"\n    arguments:\n      startScreen: \"profile\"\n      userId: 1001"
  },
  {
    "instruction": "Tap on the 'userAvatar' image in the header.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"userAvatar\" }"
  },
  {
    "instruction": "Verify that 'File Uploaded Successfully!' notification appears.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: \"File Uploaded Successfully!\""
  },
  {
    "instruction": "Input the authentication token from 'output.authToken' into the 'authHeaderInput'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"authHeaderInput\" }\n- inputText: \"${output.authToken}\""
  },
  {
    "instruction": "Scroll the 'featuredItemsScroller' to the right until 'featuredItem_last' is visible with 90% visibility.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"featuredItem_last\" }\n    direction: RIGHT\n    visibilityPercentage: 90\n    # Assuming featuredItemsScroller is parent"
  },
  {
    "instruction": "If 'output.hasPendingNotifications' is true, run inline command to tap 'notificationBell'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.hasPendingNotifications}\"\n    commands:\n      - tapOn: { id: \"notificationBell\" }"
  },
  {
    "instruction": "Retry the commands: input 'search_term' into 'searchInput', tap 'searchButton', assert 'searchResultsList' visible. Max 1 retry.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 1\n    commands:\n      - tapOn: { id: \"searchInput\" }\n      - inputText: \"search_term\"\n      - tapOn: { id: \"searchButton\" }\n      - assertVisible: { id: \"searchResultsList\" }"
  },
  {
    "instruction": "Repeat tapping 'NextTipButton' while 'TipPopup' is visible, max 7 times.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 7\n    while:\n      visible: { id: \"TipPopup\" }\n    commands:\n      - tapOn: { id: \"NextTipButton\" }"
  },
  {
    "instruction": "Use AI to verify that all icons on the navigation bar are standard and recognizable.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"All icons used in the navigation bar are standard, easily recognizable, and appropriate for their functions.\""
  },
  {
    "instruction": "Run JavaScript file 'event_logger.js', passing 'eventName: app_launch' and 'eventValue: success'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runScript:\n    file: \"event_logger.js\"\n    env:\n      eventName: \"app_launch\"\n      eventValue: \"success\""
  },
  {
    "instruction": "Check if 'output.itemsInCart' array is empty and store in 'output.isCartEmpty'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.isCartEmpty = !output.itemsInCart || output.itemsInCart.length === 0}\""
  },
  {
    "instruction": "Tap the 'privacySettingsLink' which is located below the 'accountDetailsSection'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"privacySettingsLink\"\n    below: { id: \"accountDetailsSection\" }"
  },
  {
    "instruction": "Assert the 'sessionExpiredModal' is shown with the text 'Your session has expired. Please log in again.'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"sessionExpiredModal\"\n    text: \"Your session has expired. Please log in again.\""
  },
  {
    "instruction": "Input a random username (e.g., user_12345) into 'newUsernameField'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"newUsernameField\" }\n- evalScript: \"${output.randomUsername = 'user_' + Math.floor(Math.random() * 90000) + 10000}\"\n- inputText: \"${output.randomUsername}\""
  },
  {
    "instruction": "Sign up with a new user: Tap 'Sign Up', fill name, email, password, confirm password, tap 'Create Account', verify 'Welcome' message.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp\n- tapOn: \"Sign Up\"\n- tapOn: { id: \"nameInput\" }\n- inputRandomPersonName\n- tapOn: { id: \"emailInput\" }\n- inputRandomEmail\n- tapOn: { id: \"passwordInput\" }\n- inputText: \"ValidPass123!\"\n- tapOn: { id: \"confirmPasswordInput\" }\n- inputText: \"ValidPass123!\"\n- tapOn: \"Create Account\"\n- assertVisible: \"Welcome\""
  },
  {
    "instruction": "Tap on the 'viewInvoiceButton', this is an optional action, label it 'View Invoice Details'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"viewInvoiceButton\"\n    optional: true\n    label: \"View Invoice Details\""
  },
  {
    "instruction": "Check if 'orderSummarySection' has descendants: 'itemTotal', 'shippingCost', and 'grandTotal'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"orderSummarySection\"\n    containsDescendants:\n      - id: \"itemTotal\"\n      - id: \"shippingCost\"\n      - id: \"grandTotal\""
  },
  {
    "instruction": "Tap 'addItem_123', then tap 'addItem_456', then assert 'cartBadge' text is '2'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"addItem_123\" }\n- tapOn: { id: \"addItem_456\" }\n- assertVisible:\n    id: \"cartBadge\"\n    text: \"2\""
  },
  {
    "instruction": "Assert 'profileImage' has width 120 and height 120 (exact).",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"profileImage\"\n    width: 120\n    height: 120\n    tolerance: 0"
  },
  {
    "instruction": "Add './assets/audio_clip.mp3' and './assets/user_guide.pdf' to device media.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- addMedia:\n    - \"./assets/audio_clip.mp3\"\n    - \"./assets/user_guide.pdf\""
  },
  {
    "instruction": "Press the Power key on Android.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- pressKey: \"Power\""
  },
  {
    "instruction": "Take a screenshot named 'PreConfirmation'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- takeScreenshot: \"PreConfirmation\""
  },
  {
    "instruction": "Tap on the element with ID 'confirmButton', which is enabled.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"confirmButton\"\n    enabled: true"
  },
  {
    "instruction": "Assert the checkbox 'agreeToLicense' is visible and checked.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"agreeToLicense\"\n    checked: true"
  },
  {
    "instruction": "Tap the 'skipTutorialLink', which is optional.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"skipTutorialLink\"\n    optional: true"
  },
  {
    "instruction": "Clear the state of the current app, then launch it.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- clearState\n- launchApp"
  },
  {
    "instruction": "Verify the text 'No results found.' is displayed.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: \"No results found.\""
  },
  {
    "instruction": "Launch app, then tap on the element with text 'Open Menu'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp\n- tapOn: \"Open Menu\""
  },
  {
    "instruction": "Input the text 'search query' into the field with ID 'mainSearchInput'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"mainSearchInput\" }\n- inputText: \"search query\""
  },
  {
    "instruction": "Scroll until the button 'View All Transactions' is visible and then tap it.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: \"View All Transactions\"\n- tapOn: \"View All Transactions\""
  },
  {
    "instruction": "Run the 'perform_backup.yaml' flow, if 'ENABLE_BACKUPS' env var is 'true'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${MAESTRO_ENABLE_BACKUPS === 'true'}\"\n    file: \"perform_backup.yaml\""
  },
  {
    "instruction": "Retry tapping 'flakyButton' three times, then assert 'flakyButtonResponse' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 3\n    commands:\n      - tapOn: { id: \"flakyButton\" }\n      - assertVisible: { id: \"flakyButtonResponse\" }"
  },
  {
    "instruction": "Repeat tapping 'Next Step' button and asserting 'StepIndicator' updates, until 'StepIndicator' shows 'Step 5'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    while:\n      notVisible: { id: \"StepIndicator\", text: \"Step 5\" }\n    commands:\n      - tapOn: \"Next Step\"\n      # Assuming StepIndicator text changes after tap"
  },
  {
    "instruction": "Use AI to assert the current screen is a valid user registration form.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"The current screen displays a user registration form with fields for name, email, password, and a submit button.\""
  },
  {
    "instruction": "Run a script 'calculate_discount.js' which takes 'originalPrice' as input from output vars.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runScript:\n    file: \"calculate_discount.js\"\n    env:\n      price: \"${output.originalPrice}\""
  },
  {
    "instruction": "Convert 'output.countString' (a string number) to an integer and store in 'output.countInt'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.countInt = parseInt(output.countString)}\""
  },
  {
    "instruction": "Open the app 'com.qoneqt.qoneqt.partner', then tap on 'Partner Login'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp: \"com.qoneqt.qoneqt.partner\"\n- tapOn: \"Partner Login\""
  },
  {
    "instruction": "Assert the 'itemDescription' field is focused after tapping on it.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"itemDescription\" }\n- assertVisible:\n    id: \"itemDescription\"\n    focused: true"
  },
  {
    "instruction": "Input a random 10-digit number into 'phoneNumberField'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"phoneNumberField\" }\n- inputRandomNumber:\n    length: 10"
  },
  {
    "instruction": "Tap on element 'A', then 'B', then 'C', then verify 'D' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: \"A\"\n- tapOn: \"B\"\n- tapOn: \"C\"\n- assertVisible: \"D\""
  },
  {
    "instruction": "Wait for 'dataProcessingIndicator' to disappear, with a timeout of 45 seconds.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- extendedWaitUntil:\n    notVisible: { id: \"dataProcessingIndicator\" }\n    timeout: 45000"
  },
  {
    "instruction": "Press the Enter key, then assert 'searchResultSummary' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- pressKey: \"Enter\"\n- assertVisible: { id: \"searchResultSummary\" }"
  },
  {
    "instruction": "Swipe left across 'onboardingCarousel' three times.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 3\n    commands:\n      - swipe:\n          from: { id: \"onboardingCarousel\" }\n          direction: LEFT"
  },
  {
    "instruction": "Start recording screen as 'settings_change', tap 'Settings', tap 'Theme', tap 'Dark', stop recording.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- startRecording: \"settings_change\"\n- tapOn: \"Settings\"\n- tapOn: \"Theme\"\n- tapOn: \"Dark\"\n- stopRecording"
  },
  {
    "instruction": "Tap the 'Submit' button. If it's not present, tap 'Next' instead. (Conceptual, Maestro needs two separate conditional flows or optional).",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { text: \"Submit\", optional: true }\n- runFlow:\n    when:\n      notVisible: \"Submit\"\n    commands:\n      - tapOn: \"Next\""
  },
  {
    "instruction": "Assert the text 'Welcome Back, ${username}!' is visible, where username is an env var.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: \"Welcome Back, ${MAESTRO_USERNAME}!\""
  },
  {
    "instruction": "Long press on the 'mapView' at coordinates 250,400.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- longPressOn:\n    id: \"mapView\"\n    point: \"250,400\" # This syntax is more for point on screen. For within element, usually relative % or text selector + point.\n    # Using point on screen within the context of a long press on an element is less common. More typical is text + point or just point on screen.\n    # For this example, let's assume it means long press on that specific point on the map element\n    # A clearer way might be: longPressOn: { point: \"250,400\" } if map covers it."
  },
  {
    "instruction": "Tap on the 'usernameInput' field, type 'testuser', tap the 'passwordInput' field, type 'password123', then tap the 'loginButton'. Finally, assert that the 'welcomeText' element is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"usernameInput\" }\n- inputText: \"testuser\"\n- tapOn: { id: \"passwordInput\" }\n- inputText: \"password123\"\n- tapOn: { id: \"loginButton\" }\n- assertVisible: { id: \"welcomeText\" }"
  },
  {
    "instruction": "If 'promoCodeBanner' is visible, copy text from 'promoCodeValue', tap 'applyPromoInput', paste text, tap 'Apply'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      visible: { id: \"promoCodeBanner\" }\n    commands:\n      - copyTextFrom: { id: \"promoCodeValue\" }\n      - tapOn: { id: \"applyPromoInput\" }\n      - pasteText\n      - tapOn: \"Apply\""
  },
  {
    "instruction": "Assert the 'paymentMethodIcon' (e.g. Visa logo) is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: { id: \"paymentMethodIcon\" }"
  },
  {
    "instruction": "Tap on the 'Add Item to Cart' button. If it fails, retry up to 2 times. Label this action 'Add to Cart'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 2\n    commands:\n      - tapOn:\n          text: \"Add Item to Cart\"\n          label: \"Add to Cart\""
  },
  {
    "instruction": "Repeat 3 times: scroll down, wait for 1 second for new items to load.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 3\n    commands:\n      - scroll\n      - waitForAnimationToEnd: { timeout: 1000 }"
  },
  {
    "instruction": "Use AI to verify that the date displayed on screen is today's date.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.todayDate = new Date().toLocaleDateString('en-US', { month: 'short', day: 'numeric', year: 'numeric'})}\"\n- assertWithAI:\n    assertion: \"The date displayed on the screen is ${output.todayDate}.\""
  },
  {
    "instruction": "Run script 'format_currency.js' taking 'amount' from output.price and 'currency' from env.CURRENCY_CODE.",
    "output": "appId: com.qoneqt.qoneqt\nenv:\n  CURRENCY_CODE: \"USD\"\n---\n- runScript:\n    file: \"format_currency.js\"\n    env:\n      amount: \"${output.price}\"\n      currency: \"${CURRENCY_CODE}\""
  },
  {
    "instruction": "Check if output.userRole is 'admin' and store in output.isAdmin.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.isAdmin = (output.userRole === 'admin')}\""
  },
  {
    "instruction": "Tap on the button with text 'Login' and ID 'login_button_main'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"login_button_main\"\n    text: \"Login\""
  },
  {
    "instruction": "Assert the 'statusIndicator' is green (has text 'Online').",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"statusIndicator\"\n    text: \"Online\""
  },
  {
    "instruction": "Input a random string of 20 characters into 'descriptionField'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"descriptionField\" }\n- inputRandomText:\n    length: 20"
  },
  {
    "instruction": "Launch app. Tap 'Search'. Input 'Qoneqt'. Tap first result. Assert 'Qoneqt Product Page' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp\n- tapOn: \"Search\"\n- inputText: \"Qoneqt\"\n- tapOn: { id: \"searchResultItem\", index: 0 }\n- assertVisible: \"Qoneqt Product Page\""
  },
  {
    "instruction": "Tap on the link 'Terms of Service'. This tap should not be retried if it doesn't change the UI.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    text: \"Terms of Service\"\n    retryTapIfNoChange: false"
  },
  {
    "instruction": "Assert that 'notificationMessage' is visible and is not empty. If not, mark as optional.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"notificationMessage\"\n    text: \".+\"\n    optional: true"
  },
  {
    "instruction": "Input the text 'Test input for field' into the input field currently focused.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- inputText: \"Test input for field\""
  },
  {
    "instruction": "Scroll the 'chatWindow' up until the message 'Chat Started' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: \"Chat Started\"\n    direction: UP\n    # Assuming chatWindow is parent"
  },
  {
    "instruction": "Run 'additional_setup.yaml' if output.needsSetup is true.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.needsSetup}\"\n    file: \"additional_setup.yaml\""
  },
  {
    "instruction": "Press the back button, then assert 'Dashboard' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- back\n- assertVisible: \"Dashboard\""
  },
  {
    "instruction": "Clear keychain data for iOS.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- clearKeychain"
  },
  {
    "instruction": "Copy text from 'activationCodeDisplay', tap 'activationCodeInput', paste, then tap 'Activate'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- copyTextFrom: { id: \"activationCodeDisplay\" }\n- tapOn: { id: \"activationCodeInput\" }\n- pasteText\n- tapOn: \"Activate\""
  },
  {
    "instruction": "Double tap the 'product_image_main' to zoom.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- doubleTapOn: { id: \"product_image_main\" }"
  },
  {
    "instruction": "Clear any text in the 'search_box' by erasing up to 50 characters.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"search_box\" }\n- eraseText: 50"
  },
  {
    "instruction": "Wait until 'loadingOverlay' is not visible, with a default timeout.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- extendedWaitUntil:\n    notVisible: { id: \"loadingOverlay\" }"
  },
  {
    "instruction": "Attempt to hide the soft keyboard.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- hideKeyboard"
  },
  {
    "instruction": "Kill the app, then launch it with arguments 'locale:en' and 'region:US'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- killApp\n- launchApp:\n    arguments:\n      locale: \"en\"\n      region: \"US\""
  },
  {
    "instruction": "Long press on the 'listItem_007' for 1.5 seconds.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- longPressOn: { id: \"listItem_007\" } # Duration is implicit/default for longPressOn, not a direct param"
  },
  {
    "instruction": "Open the deeplink 'qoneqt://product/SKU12345'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- openLink: \"qoneqt://product/SKU12345\""
  },
  {
    "instruction": "Press the Menu key on an Android TV remote.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- pressKey: \"Remote Menu\""
  },
  {
    "instruction": "Scroll the 'terms_and_conditions_text' until the 'accept_button' is visible and centered.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"accept_button\" }\n    # Assuming terms_and_conditions_text is parent\n    centerElement: true"
  },
  {
    "instruction": "Start recording. Navigate through onboarding. Stop recording. Save as 'onboarding_video'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- startRecording: \"onboarding_video\"\n- tapOn: \"Next\"\n- tapOn: \"Next\"\n- tapOn: \"Get Started\"\n- assertVisible: \"Dashboard\"\n- stopRecording"
  },
  {
    "instruction": "Stop the 'com.qoneqt.backgroundservice' app.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- stopApp: \"com.qoneqt.backgroundservice\""
  },
  {
    "instruction": "Swipe from (50,600) to (50,200) with a duration of 500ms.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- swipe:\n    start: \"50,600\"\n    end: \"50,200\"\n    duration: 500"
  },
  {
    "instruction": "Take a screenshot named 'ErrorDialogPopup'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- takeScreenshot: \"ErrorDialogPopup\""
  },
  {
    "instruction": "Wait for a page transition animation to complete, max 5s.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- waitForAnimationToEnd:\n    timeout: 5000"
  },
  {
    "instruction": "Launch app, granting 'android.permission.READ_CONTACTS' and denying 'android.permission.WRITE_EXTERNAL_STORAGE'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    permissions:\n      android.permission.READ_CONTACTS: allow\n      android.permission.WRITE_EXTERNAL_STORAGE: deny"
  },
  {
    "instruction": "Tap the 'Save Draft' button, repeat tap if no change is detected (default behavior).",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: \"Save Draft\""
  },
  {
    "instruction": "Assert the 'rememberMeCheckbox' is visible and is currently unchecked.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"rememberMeCheckbox\"\n    checked: false"
  },
  {
    "instruction": "Input a random 3-letter code.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- inputRandomText:\n    length: 3"
  },
  {
    "instruction": "Scroll 'articleContent' until 'authorBioSection' is 75% visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"authorBioSection\" }\n    # Assuming articleContent is parent\n    visibilityPercentage: 75"
  },
  {
    "instruction": "Run 'web_specific_actions.yaml' only if maestro.platform is 'web'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      platform: \"Web\"\n    file: \"web_specific_actions.yaml\""
  },
  {
    "instruction": "Use AI to verify the shopping cart icon correctly displays the number of items.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.expectedCartCount = 3}\" # Example expected count\n- assertWithAI:\n    assertion: \"The shopping cart icon correctly displays a badge with the number ${output.expectedCartCount}.\""
  },
  {
    "instruction": "Extract the version number from the About screen using AI, save as 'appVersionAI'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- extractTextWithAI:\n    query: \"What is the application version number displayed on the About screen?\"\n    outputVariable: \"appVersionAI\""
  },
  {
    "instruction": "Tap on 'deleteIcon' which is a child of 'comment_123' and to the right of 'commentText_123'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"deleteIcon\"\n    childOf: { id: \"comment_123\" }\n    rightOf: { id: \"commentText_123\" }"
  },
  {
    "instruction": "If 'output.isFinalStep' is true, assert 'FinishButton' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.isFinalStep}\"\n    commands:\n      - assertVisible: { id: \"FinishButton\" }"
  },
  {
    "instruction": "Check that the 'copyrightNotice' text contains the current year. (e.g., '© 2024 Qoneqt').",
    "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.currentYear = new Date().getFullYear()}\"\n- assertVisible:\n    id: \"copyrightNotice\"\n    text: \".*© ${output.currentYear} Qoneqt.*\""
  },
  {
    "instruction": "Define 'SENSITIVE_DATA_PLACEHOLDER' as 'REDACTED' in flow env.",
    "output": "appId: com.qoneqt.qoneqt\nenv:\n  SENSITIVE_DATA_PLACEHOLDER: \"REDACTED\"\n---\n- launchApp"
  },
  {
    "instruction": "On flow start: run 'load_config.js'. On flow complete: run 'clear_session.js'.",
    "output": "appId: com.qoneqt.qoneqt\nonFlowStart:\n  - runScript: \"load_config.js\"\nonFlowComplete:\n  - runScript: \"clear_session.js\"\n---\n- launchApp"
  },
  {
    "instruction": "This flow is named 'Critical Path - Checkout'.",
    "output": "appId: com.qoneqt.qoneqt\nname: \"Critical Path - Checkout\"\n---\n- launchApp"
  },
  {
    "instruction": "Tag this flow: 'critical', 'checkout', 'smoke'.",
    "output": "appId: com.qoneqt.qoneqt\ntags:\n  - \"critical\"\n  - \"checkout\"\n  - \"smoke\"\n---\n- launchApp"
  },
  {
    "instruction": "Force GraalJS. Get 'maestro.platform' and log it.",
    "output": "appId: com.qoneqt.qoneqt\njsEngine: graaljs\n---\n- evalScript: \"${console.log('Current platform: ' + maestro.platform)}\""
  },
  {
    "instruction": "Tap 'Privacy Policy'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: \"Privacy Policy\""
  },
  {
    "instruction": "Assert 'errorMessagePopup' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: { id: \"errorMessagePopup\" }"
  },
  {
    "instruction": "Enter 'Meeting notes for Q1 planning' into 'noteTitleInput'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"noteTitleInput\" }\n- inputText: \"Meeting notes for Q1 planning\""
  },
  {
    "instruction": "Scroll 'leaderboardTable' until 'playerRank_1' is visible, then assert 'playerName_1' is 'Champion'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"playerRank_1\" }\n    # Assuming leaderboardTable is parent\n- assertVisible:\n    id: \"playerName_1\"\n    text: \"Champion\""
  },
  {
    "instruction": "Run 'analytics_event.yaml', passing 'eventName: purchase_completed' and 'value: 29.99'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    file: \"analytics_event.yaml\"\n    env:\n      eventName: \"purchase_completed\"\n      value: \"29.99\""
  },
  {
    "instruction": "Launch app 'com.qoneqt.qoneqt'. Clear state. Clear keychain. Deny all permissions. Pass 'test_id: flow_256' argument.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    appId: \"com.qoneqt.qoneqt\"\n    clearState: true\n    clearKeychain: true\n    permissions: { all: deny }\n    arguments:\n      test_id: \"flow_256\""
  },
  {
    "instruction": "Tap the 'filter_icon' to open filter options.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"filter_icon\" }"
  },
  {
    "instruction": "Verify that the text 'Thank you for your submission!' is displayed.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: \"Thank you for your submission!\""
  },
  {
    "instruction": "Input the generated password from 'output.generatedPassword' into 'confirmPasswordInput'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"confirmPasswordInput\" }\n- inputText: \"${output.generatedPassword}\""
  },
  {
    "instruction": "Scroll 'newsFeedContainer' down fast (speed 90) until 'oldestArticleLink' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"oldestArticleLink\" }\n    direction: DOWN\n    speed: 90\n    # Assuming newsFeedContainer is parent"
  },
  {
    "instruction": "If 'output.userType' is 'premium', run 'premium_features_tour.yaml'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.userType === 'premium'}\"\n    file: \"premium_features_tour.yaml\""
  },
  {
    "instruction": "Retry the flow 'upload_photo.yaml' up to 2 times if it fails.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 2\n    file: \"upload_photo.yaml\""
  },
  {
    "instruction": "Repeat tapping 'IncreaseFontSize' 2 times.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 2\n    commands:\n      - tapOn: \"IncreaseFontSize\""
  },
  {
    "instruction": "Use AI to ensure that the primary call-to-action button is prominently displayed and easily identifiable.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"The primary call-to-action button is prominently displayed, visually distinct, and easily identifiable on the current screen.\""
  },
  {
    "instruction": "Run script 'fetch_remote_config.js', it expects 'environment: staging' passed as env.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runScript:\n    file: \"fetch_remote_config.js\"\n    env:\n      environment: \"staging\""
  },
  {
    "instruction": "Get the length of 'output.myArray' and store it in 'output.arrayLength'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.arrayLength = output.myArray ? output.myArray.length : 0}\""
  },
  {
    "instruction": "Tap the 'userProfileLink' which is a child of 'headerBar' and has text 'My Profile'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    text: \"My Profile\"\n    id: \"userProfileLink\"\n    childOf: { id: \"headerBar\" }"
  },
  {
    "instruction": "Assert the 'tosCheckbox' is visible, enabled and unchecked.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"tosCheckbox\"\n    enabled: true\n    checked: false"
  },
  {
    "instruction": "Into 'postalCodeInput', enter a random 5-digit number.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"postalCodeInput\" }\n- inputRandomNumber:\n    length: 5"
  },
  {
    "instruction": "Navigate to cart: tap 'cartIcon'. Add promo: tap 'promoInput', type 'SALE50', tap 'Apply'. Verify 'discountAppliedMessage'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"cartIcon\" }\n- tapOn: { id: \"promoInput\" }\n- inputText: \"SALE50\"\n- tapOn: \"Apply\"\n- assertVisible: { id: \"discountAppliedMessage\" }"
  },
  {
    "instruction": "Tap on the 'feedbackStarRating_5', this is optional and labelled 'Select 5-star rating'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"feedbackStarRating_5\"\n    optional: true\n    label: \"Select 5-star rating\""
  },
  {
    "instruction": "Verify that 'formContainer' contains descendants with texts 'Full Name', 'Email Address', and 'Phone Number'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"formContainer\"\n    containsDescendants:\n      - \"Full Name\"\n      - \"Email Address\"\n      - \"Phone Number\""
  },
  {
    "instruction": "Tap 'product_A', then 'product_B'. Assert 'compareButton' is now enabled.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"product_A\" }\n- tapOn: { id: \"product_B\" }\n- assertVisible:\n    id: \"compareButton\"\n    enabled: true"
  },
  {
    "instruction": "Assert 'fullScreenModal' is visible and occupies full width (e.g., width 100% of parent, or specific pixel if known).",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"fullScreenModal\"\n    # Width assertion can be tricky without knowing parent. Assuming a known pixel width for example.\n    width: 375 # Example for a phone width"
  },
  {
    "instruction": "Add './assets/archive.zip' to the device.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- addMedia: \"./assets/archive.zip\" # addMedia takes a list of strings or a single string for one file"
  },
  {
    "instruction": "Press the TV Input HDMI 1 key.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- pressKey: \"TV Input HDMI 1\""
  },
  {
    "instruction": "Take a screenshot named 'FinalCheckoutStep'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- takeScreenshot: \"FinalCheckoutStep\""
  },
  {
    "instruction": "Tap on the button 'Proceed' if it is visible and enabled.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      visible: { text: \"Proceed\", enabled: true }\n    commands:\n      - tapOn: \"Proceed\""
  },
  {
    "instruction": "Assert the 'newsletterCheckbox' is visible, enabled, and checked.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"newsletterCheckbox\"\n    enabled: true\n    checked: true"
  },
  {
    "instruction": "Tap the 'viewDetailsLink', make it optional, label it 'Click to see more details'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"viewDetailsLink\"\n    optional: true\n    label: \"Click to see more details\""
  },
  {
    "instruction": "Clear app state, then launch with 'user_type: guest' argument.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- clearState\n- launchApp:\n    arguments:\n      user_type: \"guest\""
  },
  {
    "instruction": "Check if 'error_code_503' text is shown.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: \"error_code_503\""
  },
  {
    "instruction": "Launch application. Tap on element 'Start Onboarding'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp\n- tapOn: \"Start Onboarding\""
  },
  {
    "instruction": "Input 'My Address, 123 City, Country' into the 'address_field'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"address_field\" }\n- inputText: \"My Address, 123 City, Country\""
  },
  {
    "instruction": "Scroll until 'loadMoreCommentsButton' is visible, then tap it, then assert 'newComment_001' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"loadMoreCommentsButton\" }\n- tapOn: { id: \"loadMoreCommentsButton\" }\n- assertVisible: { id: \"newComment_001\" }"
  },
  {
    "instruction": "Run 'validate_user_input.yaml' if 'output.userInputCompleted' is true.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.userInputCompleted}\"\n    file: \"validate_user_input.yaml\""
  },
  {
    "instruction": "Retry the commands: tap 'SubmitPayment', assert 'PaymentSuccessTick'. Max retries: 1.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 1\n    commands:\n      - tapOn: { id: \"SubmitPayment\" }\n      - assertVisible: { id: \"PaymentSuccessTick\" }"
  },
  {
    "instruction": "Repeat tapping 'RefreshBalanceButton' while 'BalanceLoadingSpinner' is visible, up to 5 times.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 5\n    while:\n      visible: { id: \"BalanceLoadingSpinner\" }\n    commands:\n      - tapOn: { id: \"RefreshBalanceButton\" }"
  },
  {
    "instruction": "Use AI to assert the app's dark mode is applied consistently across the screen.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"The application's dark mode theme is applied consistently across all visible UI elements, with appropriate dark backgrounds and light text/icons.\""
  },
  {
    "instruction": "Run script 'post_data_to_server.js', passing 'data: output.formData' and 'url: output.submitUrl'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runScript:\n    file: \"post_data_to_server.js\"\n    env:\n      postData: \"${output.formData}\" # Assuming formData is a string or stringifiable\n      targetUrl: \"${output.submitUrl}\""
  },
  {
    "instruction": "Get the substring of 'output.longText' (first 10 chars) and store in 'output.shortText'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.shortText = output.longText ? output.longText.substring(0, 10) : ''}\""
  },
  {
    "instruction": "Launch the secondary app 'com.qoneqt.helperapp', then tap its 'ConnectButton'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp: \"com.qoneqt.helperapp\"\n- tapOn: { id: \"ConnectButton\" }"
  },
  {
    "instruction": "Assert 'messageInput' is editable (enabled and focused).",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"messageInput\"\n    enabled: true\n    focused: true"
  },
  {
    "instruction": "Input a random person name into 'contactNameInput'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"contactNameInput\" }\n- inputRandomPersonName"
  },
  {
    "instruction": "Tap 'ElementX', then 'ElementY', then check if 'ElementZ' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"ElementX\" }\n- tapOn: { id: \"ElementY\" }\n- assertVisible: { id: \"ElementZ\" }"
  },
  {
    "instruction": "Wait for 'networkActivityIndicator' to become notVisible, with a 25s timeout.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- extendedWaitUntil:\n    notVisible: { id: \"networkActivityIndicator\" }\n    timeout: 25000"
  },
  {
    "instruction": "Press the backspace key, then assert 'previousFieldValue' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- pressKey: \"Backspace\"\n- assertVisible: { id: \"previousFieldValue\" }"
  },
  {
    "instruction": "Swipe the 'image_gallery' right 2 times.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 2\n    commands:\n      - swipe:\n          from: { id: \"image_gallery\" }\n          direction: RIGHT"
  },
  {
    "instruction": "Start recording 'critical_flow_video', execute 'critical_flow.yaml', then stop recording.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- startRecording: \"critical_flow_video\"\n- runFlow: \"critical_flow.yaml\"\n- stopRecording"
  },
  {
    "instruction": "Tap on 'OptionalButton' if visible, otherwise tap 'MandatoryButton'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"OptionalButton\", optional: true }\n- runFlow:\n    when:\n      notVisible: { id: \"OptionalButton\" }\n    commands:\n      - tapOn: { id: \"MandatoryButton\" }"
  },
  {
    "instruction": "Assert 'greetingMessage' is 'Hello, ${MAESTRO_USER_NAME}!' where user name is an env var.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"greetingMessage\"\n    text: \"Hello, ${MAESTRO_USER_NAME}!\""
  },
  {
    "instruction": "Long press on the 'slider_thumb' element on 'volume_slider'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- longPressOn:\n    id: \"slider_thumb\"\n    # Assuming slider_thumb is part of volume_slider or volume_slider itself is the interactive element"
  },
  {
    "instruction": "Tap 'username', input 'performance_tester', tap 'password', input 'testPa$$', tap 'login', verify 'Dashboard Performance' title.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: \"username\"\n- inputText: \"performance_tester\"\n- tapOn: \"password\"\n- inputText: \"testPa$$\"\n- tapOn: \"login\"\n- assertVisible: \"Dashboard Performance\""
  },
  {
    "instruction": "If 'tutorialOverlay' is visible, copy text from 'tutorialStepTitle', then tap 'NextTutorialButton'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      visible: { id: \"tutorialOverlay\" }\n    commands:\n      - copyTextFrom: { id: \"tutorialStepTitle\" }\n      - tapOn: { id: \"NextTutorialButton\" }"
  },
  {
    "instruction": "Assert that 'userAvatarImage' is visible and is square (e.g. width 50, height 50).",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"userAvatarImage\"\n    width: 50\n    height: 50\n    tolerance: 2 # Allow small tolerance"
  },
  {
    "instruction": "Retry loading and tapping 'flakyAdCloseButton' 3 times, then proceed.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 3\n    commands:\n      - extendedWaitUntil: { visible: { id: \"flakyAdCloseButton\" }, timeout: 5000 }\n      - tapOn: { id: \"flakyAdCloseButton\", optional: true }"
  },
  {
    "instruction": "Repeat 10 times: tap 'spinButton', wait for 'resultDisplay' to update.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 10\n    commands:\n      - tapOn: { id: \"spinButton\" }\n      - extendedWaitUntil: { visible: { id: \"resultDisplay\" }, timeout: 5000 } # Or a specific text if it changes"
  },
  {
    "instruction": "Use AI to verify that the color contrast on the current page meets accessibility standards.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"The color contrast between text and background elements on the current page meets WCAG AA accessibility standards.\""
  },
  {
    "instruction": "Run script 'init_user_prefs.js', passing 'userId' from output.currentUserId and 'theme' from output.chosenTheme.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runScript:\n    file: \"init_user_prefs.js\"\n    env:\n      currentUserId: \"${output.currentUserId}\"\n      chosenTheme: \"${output.chosenTheme}\""
  },
  {
    "instruction": "Check if output.score is greater than 100 and store in output.isHighScore.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.isHighScore = (output.score > 100)}\""
  },
  {
    "instruction": "Tap on the button 'OK' with ID 'ok_confirm_button'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"ok_confirm_button\"\n    text: \"OK\""
  },
  {
    "instruction": "Assert the 'warningMessageField' is visible and its text is 'Incorrect format'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"warningMessageField\"\n    text: \"Incorrect format\""
  },
  {
    "instruction": "Input a random string of 15 alphanumeric characters into 'sessionIdInput'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"sessionIdInput\" }\n- inputRandomText:\n    length: 15"
  },
  {
    "instruction": "Launch app. Tap 'Forgot Password'. Input random email. Tap 'Reset Password'. Assert 'Email Sent' message.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp\n- tapOn: \"Forgot Password\"\n- inputRandomEmail\n- tapOn: \"Reset Password\"\n- assertVisible: \"Email Sent\""
  },
  {
    "instruction": "Tap 'advancedSettingsLink'. This action should not retry if the UI state doesn't change.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"advancedSettingsLink\"\n    retryTapIfNoChange: false"
  },
  {
    "instruction": "Assert 'connectionLostPopup' is visible, but this is an optional check.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"connectionLostPopup\"\n    optional: true"
  },
  {
    "instruction": "Input 'Another test comment' into the currently active text input.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- inputText: \"Another test comment\""
  },
  {
    "instruction": "Scroll the 'product_recommendations_carousel' right until 'product_rec_5' is visible and centered.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"product_rec_5\" }\n    direction: RIGHT\n    centerElement: true\n    # Assuming product_recommendations_carousel is parent"
  },
  {
    "instruction": "Run 'user_logout.yaml' if output.sessionExpired is true.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.sessionExpired}\"\n    file: \"user_logout.yaml\""
  },
  {
    "instruction": "Press the Lock key.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- pressKey: \"Lock\""
  },
  {
    "instruction": "Clear the state of 'com.qoneqt.othermodule'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- clearState: \"com.qoneqt.othermodule\""
  },
  {
    "instruction": "Copy text from 'itemIdLabel', tap 'searchForItemInput', paste, tap 'Find Item'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- copyTextFrom: { id: \"itemIdLabel\" }\n- tapOn: { id: \"searchForItemInput\" }\n- pasteText\n- tapOn: \"Find Item\""
  },
  {
    "instruction": "Double tap the 'map_annotation_1' to view details.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- doubleTapOn: { id: \"map_annotation_1\" }"
  },
  {
    "instruction": "Erase default text from 'username_field' (max 30 chars).",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"username_field\" }\n- eraseText: 30"
  },
  {
    "instruction": "Wait for 'welcome_modal' to be not visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- extendedWaitUntil:\n    notVisible: { id: \"welcome_modal\" }"
  },
  {
    "instruction": "Dismiss keyboard if it's open.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- hideKeyboard"
  },
  {
    "instruction": "Kill app. Launch app with 'darkMode:false' and 'fontSize:medium'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- killApp\n- launchApp:\n    arguments:\n      darkMode: false\n      fontSize: \"medium\""
  },
  {
    "instruction": "Long press on the 'contextMenuItem_Share'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- longPressOn: { id: \"contextMenuItem_Share\" }"
  },
  {
    "instruction": "Open the link 'qoneqt://faq'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- openLink: \"qoneqt://faq\""
  },
  {
    "instruction": "Press the 'Remote Media Play Pause' key.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- pressKey: \"Remote Media Play Pause\""
  },
  {
    "instruction": "Scroll 'chat_history_view' until 'message_id_001' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"message_id_001\" }\n    # Assuming chat_history_view is parent"
  },
  {
    "instruction": "Start recording 'payment_flow', tap 'Pay Now', wait for 'PaymentConfirmation', stop recording.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- startRecording: \"payment_flow\"\n- tapOn: \"Pay Now\"\n- assertVisible: \"PaymentConfirmation\"\n- stopRecording"
  },
  {
    "instruction": "Stop the 'com.qoneqt.qoneqt' app.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- stopApp: \"com.qoneqt.qoneqt\""
  },
  {
    "instruction": "Swipe from (20%, 50%) to (80%, 50%) to go to next item.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- swipe:\n    start: \"20%,50%\"\n    end: \"80%,50%\""
  },
  {
    "instruction": "Take screenshot 'SettingsPage_WithValues'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- takeScreenshot: \"SettingsPage_WithValues\""
  },
  {
    "instruction": "Wait for 'graph_animation' to complete, max 12s.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- waitForAnimationToEnd:\n    timeout: 12000"
  },
  {
    "instruction": "Launch app allowing contacts access and denying calendar access.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    permissions:\n      contacts: allow\n      calendar: deny"
  },
  {
    "instruction": "Tap the 'LoadMoreResults' button, wait max 300ms for UI to settle.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"LoadMoreResults\"\n    waitToSettleTimeoutMs: 300"
  },
  {
    "instruction": "Assert the 'tos_agree_switch' is visible and is currently selected (on).",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"tos_agree_switch\"\n    selected: true"
  },
  {
    "instruction": "Input a random integer number of length 4 into 'verificationCodeInput'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"verificationCodeInput\" }\n- inputRandomNumber:\n    length: 4"
  },
  {
    "instruction": "Scroll 'long_form_content' until 'submit_application_button' is 60% visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"submit_application_button\" }\n    visibilityPercentage: 60\n    # Assuming long_form_content is parent"
  },
  {
    "instruction": "Run 'cleanup_device_storage.yaml' only on Android platform.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      platform: \"Android\"\n    file: \"cleanup_device_storage.yaml\""
  },
  {
    "instruction": "Use AI to ensure that the app's logo is consistently displayed on all main screens.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"The Qoneqt app logo is consistently displayed in the header or designated logo area on all main screens of the application.\""
  },
  {
    "instruction": "Extract the current page title using AI and store it in 'currentPageTitleAI'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- extractTextWithAI:\n    query: \"What is the title of the current page?\"\n    outputVariable: \"currentPageTitleAI\""
  },
  {
    "instruction": "Tap on 'like_button' if it's a child of 'article_card_XYZ' and the text 'Like' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"like_button\"\n    text: \"Like\"\n    childOf: { id: \"article_card_XYZ\" }"
  },
  {
    "instruction": "If 'output.isErrorState' is true, assert 'retryButton' is visible and enabled.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.isErrorState}\"\n    commands:\n      - assertVisible:\n          id: \"retryButton\"\n          enabled: true"
  },
  {
    "instruction": "Verify that the 'versionNumberDisplay' text matches format 'v[0-9]+\\.[0-9]+\\.[0-9]+'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"versionNumberDisplay\"\n    text: \"v[0-9]+\\\\.[0-9]+\\\\.[0-9]+\""
  },
  {
    "instruction": "Set environment variable 'API_ENDPOINT_URL' for this flow.",
    "output": "appId: com.qoneqt.qoneqt\nenv:\n  API_ENDPOINT_URL: \"https://prod.api.qoneqt.com\"\n---\n- launchApp"
  },
  {
    "instruction": "On flow start, execute 'load_user_session.yaml'. On completion, execute 'save_user_activity.yaml'.",
    "output": "appId: com.qoneqt.qoneqt\nonFlowStart:\n  - runFlow: \"load_user_session.yaml\"\nonFlowComplete:\n  - runFlow: \"save_user_activity.yaml\"\n---\n- launchApp"
  },
  {
    "instruction": "This flow is for 'UI Element Verification - Main Screen'.",
    "output": "appId: com.qoneqt.qoneqt\nname: \"UI Element Verification - Main Screen\"\n---\n- launchApp"
  },
  {
    "instruction": "Tag this flow 'ui_tests' and 'main_screen'.",
    "output": "appId: com.qoneqt.qoneqt\ntags:\n  - \"ui_tests\"\n  - \"main_screen\"\n---\n- launchApp"
  },
  {
    "instruction": "Use GraalJS. Tap on point calculated by relativePoint(0.8, 0.2).",
    "output": "appId: com.qoneqt.qoneqt\njsEngine: graaljs\n---\n- evalScript: \"${output.tapTarget = relativePoint(0.8, 0.2)}\"\n- tapOn:\n    point: \"${output.tapTarget}\""
  },
  {
    "instruction": "Tap the 'Contact Us' link in the footer.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: \"Contact Us\""
  },
  {
    "instruction": "Assert the 'warning_banner_maintenance' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: { id: \"warning_banner_maintenance\" }"
  },
  {
    "instruction": "Enter 'My travel notes from Paris trip.' into 'tripNotesField'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"tripNotesField\" }\n- inputText: \"My travel notes from Paris trip.\""
  },
  {
    "instruction": "Scroll 'followers_list' until 'user_profile_link_jane_doe' is visible, then tap it.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"user_profile_link_jane_doe\" }\n    # Assuming followers_list is parent\n- tapOn: { id: \"user_profile_link_jane_doe\" }"
  },
  {
    "instruction": "Run 'post_checkout_actions.yaml', passing 'orderId: output.currentOrderId' and 'totalAmount: output.finalTotal'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    file: \"post_checkout_actions.yaml\"\n    env:\n      orderId: \"${output.currentOrderId}\"\n      totalAmount: \"${output.finalTotal}\""
  },
  {
    "instruction": "Launch 'com.qoneqt.qoneqt', clear state, and pass 'campaign_id: summer_sale_2024' argument.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    appId: \"com.qoneqt.qoneqt\"\n    clearState: true\n    arguments:\n      campaign_id: \"summer_sale_2024\""
  },
  {
    "instruction": "Tap on the 'search_magnifying_glass_icon'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"search_magnifying_glass_icon\" }"
  },
  {
    "instruction": "Verify 'Your password has been changed.' message is displayed.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: \"Your password has been changed.\""
  },
  {
    "instruction": "Input the content of 'output.clipboardContent' into 'pasteTargetField'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"pasteTargetField\" }\n- inputText: \"${output.clipboardContent}\""
  },
  {
    "instruction": "Scroll 'horizontal_chip_group' left until 'chip_filter_all' is visible with 100% visibility.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"chip_filter_all\" }\n    direction: LEFT\n    visibilityPercentage: 100\n    # Assuming horizontal_chip_group is parent"
  },
  {
    "instruction": "If 'output.systemMaintenanceActive' is true, run inline command to assert 'MaintenanceScreen' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.systemMaintenanceActive}\"\n    commands:\n      - assertVisible: { id: \"MaintenanceScreen\" }"
  },
  {
    "instruction": "Retry the commands: tap 'LoadResource', wait for 'ResourceLoadedIndicator' (max 15s). Max retries 2.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 2\n    commands:\n      - tapOn: { id: \"LoadResource\" }\n      - extendedWaitUntil:\n          visible: { id: \"ResourceLoadedIndicator\" }\n          timeout: 15000"
  },
  {
    "instruction": "Repeat tapping 'NextQuestionButton' while 'QuestionNumberDisplay' is not '10/10', up to 9 times.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 9\n    while:\n      notVisible: { id: \"QuestionNumberDisplay\", text: \"10/10\" }\n    commands:\n      - tapOn: { id: \"NextQuestionButton\" }"
  },
  {
    "instruction": "Use AI to check if all input fields on the form are clearly labeled.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"All input fields on the current form are clearly and accurately labeled.\""
  },
  {
    "instruction": "Run script 'user_data_migration.js'. It needs 'oldUserId' and 'newUserId' from output vars.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runScript:\n    file: \"user_data_migration.js\"\n    env:\n      oldUser: \"${output.oldUserId}\"\n      newUser: \"${output.newUserId}\""
  },
  {
    "instruction": "Convert 'output.priceString' (e.g., \"$19.99\") to a float and store in 'output.priceFloat'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.priceFloat = parseFloat(output.priceString ? output.priceString.replace('$', '') : '0')}\""
  },
  {
    "instruction": "Tap the 'submitFeedbackButton', located below 'feedbackTextArea_char_count'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"submitFeedbackButton\"\n    below: { id: \"feedbackTextArea_char_count\" }"
  },
  {
    "instruction": "Assert 'accountLockedMessage' is visible with text 'Your account has been locked due to suspicious activity.'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"accountLockedMessage\"\n    text: \"Your account has been locked due to suspicious activity.\""
  },
  {
    "instruction": "Input a random password of 12 characters (alphanumeric) into 'newUserPassword'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"newUserPassword\" }\n- inputRandomText:\n    length: 12"
  },
  {
    "instruction": "Full settings update: Login, go to Profile, tap Edit, change name to random, tap Save, verify 'Profile Updated'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow: \"login.yaml\"\n- tapOn: \"Profile\"\n- tapOn: \"Edit\"\n- tapOn: { id: \"nameField\" }\n- eraseText\n- inputRandomPersonName\n- tapOn: \"Save\"\n- assertVisible: \"Profile Updated\""
  },
  {
    "instruction": "Tap 'viewSourceCodeLink', this is optional and labelled 'View underlying source'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"viewSourceCodeLink\"\n    optional: true\n    label: \"View underlying source\""
  },
  {
    "instruction": "Verify 'productDetailsPane' contains descendants: 'productImage', 'productName', 'productPrice', and 'addToCartButton'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"productDetailsPane\"\n    containsDescendants:\n      - id: \"productImage\"\n      - id: \"productName\"\n      - id: \"productPrice\"\n      - id: \"addToCartButton\""
  },
  {
    "instruction": "Tap 'tab1', then 'tab2', then 'tab3'. Assert 'tab3_content' is visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"tab1\" }\n- tapOn: { id: \"tab2\" }\n- tapOn: { id: \"tab3\" }\n- assertVisible: { id: \"tab3_content\" }"
  },
  {
    "instruction": "Assert 'logoHeader' has exact width 150 and exact height 40.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"logoHeader\"\n    width: 150\n    height: 40\n    tolerance: 0"
  },
  {
    "instruction": "Add media files './assets/image1.png', './assets/image2.jpg', './assets/video.mp4'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- addMedia:\n    - \"./assets/image1.png\"\n    - \"./assets/image2.jpg\"\n    - \"./assets/video.mp4\""
  },
  {
    "instruction": "Press the Remote Button A on Android TV.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- pressKey: \"Remote Button A\""
  },
  {
    "instruction": "Take a screenshot of 'UserProfileScreen_EditMode'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- takeScreenshot: \"UserProfileScreen_EditMode\""
  },
  {
    "instruction": "Tap on the 'Send' button if it's visible and enabled and the text is 'Send Message'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      visible:\n        id: \"sendButton\" # Assuming an ID for clarity\n        text: \"Send Message\"\n        enabled: true\n    commands:\n      - tapOn: { id: \"sendButton\" }"
  },
  {
    "instruction": "Assert the 'receivePromotionsSwitch' is visible, enabled, and currently off (not checked).",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"receivePromotionsSwitch\"\n    enabled: true\n    checked: false"
  },
  {
    "instruction": "Tap the 'downloadReportButton', an optional action, labelled 'Download Detailed Report'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"downloadReportButton\"\n    optional: true\n    label: \"Download Detailed Report\""
  },
  {
    "instruction": "Clear application state, then launch the app with 'entry_point: deeplink_A' argument.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- clearState\n- launchApp:\n    arguments:\n      entry_point: \"deeplink_A\""
  },
  {
    "instruction": "Verify 'API_LIMIT_EXCEEDED_ERROR' message is displayed on screen.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: \"API_LIMIT_EXCEEDED_ERROR\""
  },
  {
    "instruction": "Start the app. Tap the button 'Navigate to Section B'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp\n- tapOn: \"Navigate to Section B\""
  },
  {
    "instruction": "Input 'Conference Room A, 10:00 AM' into 'meeting_details_input'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"meeting_details_input\" }\n- inputText: \"Conference Room A, 10:00 AM\""
  },
  {
    "instruction": "Scroll the 'event_feed' until 'event_id_upcoming_webinar' is visible, tap it, then assert 'webinar_details_page' is shown.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"event_id_upcoming_webinar\" }\n    # Assuming event_feed is parent\n- tapOn: { id: \"event_id_upcoming_webinar\" }\n- assertVisible: { id: \"webinar_details_page\" }"
  },
  {
    "instruction": "Run 'generate_report_flow.yaml' if 'output.reportCriteriaMet' is true, passing 'reportFormat: PDF'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.reportCriteriaMet}\"\n    file: \"generate_report_flow.yaml\"\n    env:\n      reportFormat: \"PDF\""
  },
  {
    "instruction": "Retry the sequence: tap 'ConnectDeviceBtn', wait for 'DeviceConnectedStatus' (max 10s). Retry 2 times.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 2\n    commands:\n      - tapOn: { id: \"ConnectDeviceBtn\" }\n      - extendedWaitUntil:\n          visible: { id: \"DeviceConnectedStatus\" }\n          timeout: 10000"
  },
  {
    "instruction": "Repeat tapping 'LoadNextPageButton' while 'LoadingMoreItemsIndicator' is visible or 'EndOfListMessage' is not visible, max 10 attempts.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 10 # Max attempts\n    while:\n      # This logic is complex for a simple 'while'. Usually, one condition.\n      # For OR, you might need JS: true: \"${maestro.isElementVisible('LoadingMoreItemsIndicator') || !maestro.isElementVisible('EndOfListMessage')}\"\n      # Simplified for example:\n      notVisible: { id: \"EndOfListMessage\" }\n    commands:\n      - tapOn: { id: \"LoadNextPageButton\" }"
  },
  {
    "instruction": "Use AI to ensure that error messages are user-friendly and provide clear guidance.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"Error messages displayed by the application are user-friendly, clearly explain the issue, and provide actionable guidance or next steps.\""
  },
  {
    "instruction": "Run JavaScript 'user_validator.js'. It uses 'userInputEmail' and 'userInputPassword' from output vars.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runScript:\n    file: \"user_validator.js\"\n    env:\n      email: \"${output.userInputEmail}\"\n      password: \"${output.userInputPassword}\""
  },
  {
    "instruction": "Calculate 'output.total = output.subtotal + output.tax' using evalScript.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.total = (parseFloat(output.subtotal) || 0) + (parseFloat(output.tax) || 0)}\""
  },
  {
    "instruction": "Launch the specific app 'com.qoneqt.adminconsole', then tap on 'Manage Users'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp: \"com.qoneqt.adminconsole\"\n- tapOn: \"Manage Users\""
  },
  {
    "instruction": "Assert 'newPasswordConfirmationField' is visible, enabled and focused.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"newPasswordConfirmationField\"\n    enabled: true\n    focused: true"
  },
  {
    "instruction": "Input a random 6-character alphanumeric code into 'discount_code_entry'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"discount_code_entry\" }\n- inputRandomText:\n    length: 6"
  },
  {
    "instruction": "From home, tap 'Categories', select 'Electronics', tap 'Smartphones', select first phone, assert 'Product Details' screen.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp # Assuming starting from home\n- tapOn: \"Categories\"\n- tapOn: \"Electronics\"\n- tapOn: \"Smartphones\"\n- tapOn: { id: \"phoneListItem\", index: 0 }\n- assertVisible: \"Product Details\""
  },
  {
    "instruction": "Wait for 'autoSaveCompleteIndicator' to appear, checking for up to 10 seconds.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- extendedWaitUntil:\n    visible: { id: \"autoSaveCompleteIndicator\" }\n    timeout: 10000"
  },
  {
    "instruction": "Press the Enter key and then the Tab key.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- pressKey: \"Enter\"\n- pressKey: \"Tab\""
  },
  {
    "instruction": "Swipe the 'notification_panel' down to dismiss it.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- swipe:\n    from: { id: \"notification_panel\" }\n    direction: DOWN"
  },
  {
    "instruction": "Start recording 'app_tour', run 'app_tour_flow.yaml', stop recording.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- startRecording: \"app_tour\"\n- runFlow: \"app_tour_flow.yaml\"\n- stopRecording"
  },
  {
    "instruction": "Tap 'PrimaryAction'. If 'PrimaryAction' is not visible, tap 'SecondaryAction'. If neither, assert 'NoActionAvailable'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"PrimaryAction\", optional: true }\n- runFlow:\n    when:\n      notVisible: { id: \"PrimaryAction\" }\n    commands:\n      - tapOn: { id: \"SecondaryAction\", optional: true }\n- runFlow:\n    when:\n      notVisible: { id: \"PrimaryAction\" }\n      notVisible: { id: \"SecondaryAction\" }\n    commands:\n      - assertVisible: { id: \"NoActionAvailable\" }"
  },
  {
    "instruction": "Assert the displayed price is '$${output.expectedPrice}' where expectedPrice is an output variable.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: \"$${output.expectedPrice}\" # Escaped dollar for literal, then variable"
  },
  {
    "instruction": "Long press on the 'delete_button_final' element.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- longPressOn: { id: \"delete_button_final\" }"
  },
  {
    "instruction": "Open application, input username 'final_user', password 'final_pass', click login, verify 'Welcome final_user' is displayed.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp\n- inputText: \"final_user\"\n- tapOn: { id: \"passwordInput\" } # Assuming username was focused or inputText targets specific field if one selector\n- inputText: \"final_pass\"\n- tapOn: { id: \"loginButton\" }\n- assertVisible: \"Welcome final_user\""
  },
  {
    "instruction": "If 'updateNotificationBadge' is visible and text is not '0', copy its text then tap 'updateLink'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      visible: { id: \"updateNotificationBadge\", text: \"[^0].*\" } # Regex for not '0'\n    commands:\n      - copyTextFrom: { id: \"updateNotificationBadge\" }\n      - tapOn: { id: \"updateLink\" }"
  },
  {
    "instruction": "Assert the 'mainAppLogo' is visible and has a width between 100 and 200 pixels.",
    "output": "appId: com.qoneqt.qoneqt\n---\n# This requires JS for range check or multiple asserts if width is fixed\n# Simplified: Asserting a fixed width with tolerance\n- assertVisible:\n    id: \"mainAppLogo\"\n    width: 150\n    tolerance: 50"
  },
  {
    "instruction": "Retry the 'connect_to_server.yaml' flow 3 times with a 5 second delay between retries (conceptual, delay is not a retry param).",
    "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 3\n    commands:\n      - runFlow: \"connect_to_server.yaml\"\n      - evalScript: \"${java.lang.Thread.sleep(5000)}\" # This sleep happens AFTER flow, not ideal for retry delay"
  },
  {
    "instruction": "Repeat 5 times: Tap 'AddFriend', wait for 'FriendAddedConfirmation' (max 3s).",
    "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 5\n    commands:\n      - tapOn: \"AddFriend\"\n      - extendedWaitUntil:\n          visible: \"FriendAddedConfirmation\"\n          timeout: 3000"
  },
  {
    "instruction": "Use AI to verify that the app's privacy policy link is present and functional on the settings screen.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: \"Settings\" # Navigate to settings first\n- assertWithAI:\n    assertion: \"The settings screen contains a functional link to the app's privacy policy.\""
  },
  {
    "instruction": "Run JavaScript 'localStorage_manager.js', passing 'action:clear' and 'key:all_data'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runScript:\n    file: \"localStorage_manager.js\"\n    env:\n      action: \"clear\"\n      key_name: \"all_data\" # 'key' might be reserved, using key_name"
  },
  {
    "instruction": "Check if 'output.statusMessage' contains 'Error' (case-insensitive) and store in 'output.hasError'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.hasError = output.statusMessage ? output.statusMessage.toLowerCase().includes('error') : false}\""
  },
  {
    "instruction": "Tap on the 'Cancel Order' button with ID 'cancel_order_btn'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"cancel_order_btn\"\n    text: \"Cancel Order\" # Assuming text also matches for robustness"
  },
  {
    "instruction": "Assert the 'infoTooltipIcon' is visible and its message 'More Info Here' appears on hover/tap (conceptual for hover).",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"infoTooltipIcon\" } # Simulate tap to show tooltip\n- assertVisible: \"More Info Here\""
  },
  {
    "instruction": "Input a random UK-style postcode into 'postcodeInputField'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"postcodeInputField\" }\n- evalScript: \"${output.randomUkPostcode = 'AB1 2CD'}\" # Placeholder for actual random UK postcode logic\n- inputText: \"${output.randomUkPostcode}\""
  },
  {
    "instruction": "Add an item to cart, proceed to checkout, fill shipping with random name and address, fill payment with dummy card, confirm order, check for 'Thank You' page.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"productPage_addToCartButton\" }\n- tapOn: { id: \"header_cartIcon\" }\n- tapOn: \"Proceed to Checkout\"\n- tapOn: { id: \"shipping_fullName\" }\n- inputRandomPersonName\n- tapOn: { id: \"shipping_addressLine1\" }\n- inputText: \"123 Random St\"\n- tapOn: { id: \"shipping_city\" }\n- inputText: \"Anytown\"\n- tapOn: { id: \"shipping_postcode\" }\n- inputRandomText: { length: 6 }\n- tapOn: \"Continue to Payment\"\n- tapOn: { id: \"payment_cardNumber\" }\n- inputRandomNumber: { length: 16 }\n- tapOn: { id: \"payment_expiryDate\" }\n- inputText: \"12/25\"\n- tapOn: { id: \"payment_cvv\" }\n- inputRandomNumber: { length: 3 }\n- tapOn: \"Confirm Order\"\n- assertVisible: { id: \"thankYouPageTitle\", text: \"Thank You\" }"
  },
  {
    "instruction": "Tap 'exportDataButton'. This action should not retry if the UI state doesn't change, and is optional.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"exportDataButton\"\n    retryTapIfNoChange: false\n    optional: true"
  },
  {
    "instruction": "Assert 'pageFooter' is visible, and it contains descendants 'Privacy Policy Link' and 'Terms of Use Link'.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"pageFooter\"\n    containsDescendants:\n      - \"Privacy Policy Link\"\n      - \"Terms of Use Link\""
  },
  {
    "instruction": "Input 'search text' into 'searchInput', then tap 'searchButton', and assert 'noResultsMessage' is not visible.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"searchInput\" }\n- inputText: \"search text\"\n- tapOn: { id: \"searchButton\" }\n- extendedWaitUntil:\n    notVisible: { id: \"noResultsMessage\" }\n    timeout: 5000"
  },
  {
    "instruction": "Launch the app, read the username from env, enter it, tap submit, and extract the welcome text.",
    "output": "appId: com.qoneqt.qoneqt\nenv:\n  username: johndoe\n---\n- launchApp\n- inputText:\n    id: usernameInput\n    text: \"{{env.username}}\"\n- tapOn:\n    id: submitButton\n- extractTextWithAI:\n    id: welcomeText\n    output: welcomeMessage"
  },
  {
    "instruction": "Reset the app, tap on 'Start', and verify the page has no UI defects.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    clearState: true\n- tapOn:\n    text: Start\n- assertNoDefectsWithAI:\n    screenshotName: start-screen"
  },
  {
    "instruction": "On iOS, test face ID popup. On Android, test fingerprint popup.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      condition: \"maestro.platform == 'ios'\"\n    file: ios/faceid-test.yaml\n- runFlow:\n    when:\n      condition: \"maestro.platform == 'android'\"\n    file: android/fingerprint-test.yaml"
  },
  {
    "instruction": "Keep tapping the refresh icon until the sync message appears.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    while:\n      notVisible:\n        text: Sync complete\n    commands:\n      - tapOn:\n          id: refreshIcon\n      - waitForAnimationToEnd"
  },
  {
    "instruction": "Test the welcome screen in French locale.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    clearState: true\n    locale: fr-FR\n- assertVisible:\n    text: Bienvenue"
  },
  {
    "instruction": "Create a flow that launches the app and logs before and after the flow.",
    "output": "appId: com.qoneqt.qoneqt\nonFlowStart:\n  - evalScript: console.log('Flow started')\nonFlowComplete:\n  - evalScript: console.log('Flow complete')\n---\n- launchApp"
  },
  {
    "instruction": "Use a script to get the current date and enter it in the 'dateInput' field.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- runScript:\n    file: scripts/get_current_date.js\n- inputText:\n    id: dateInput\n    text: \"{{output.currentDate}}\""
  },
  {
    "instruction": "Scroll down until the dynamic 'Load More' button becomes visible and tap it.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    text: Load More\n    timeout: 10000\n    speed: 40\n- tapOn:\n    text: Load More"
  },
  {
    "instruction": "Enter username, hide the keyboard, and press the 'Enter' key.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- inputText:\n    id: usernameInput\n    text: johndoe\n- hideKeyboard\n- pressKey:\n    key: enter"
  },
  {
    "instruction": "If there are visual defects on the home screen, stop the app.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- assertNoDefectsWithAI:\n    screenshotName: home-ai-check\n    optional: true\n- runFlow:\n    when:\n      condition: \"!output.ai.noDefects\"\n    commands:\n      - stopApp"
  },
  {
    "instruction": "Try to tap the submit button. If it fails, retry and take a screenshot.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 2\n    commands:\n      - tapOn:\n          id: submitButton\n      - takeScreenshot:\n          name: submit-failed"
  },
  {
    "instruction": "Launch the app and tap the home icon.",
    "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp\n- tapOn:\n    id: homeIcon"
  },
  {
        "instruction": "Enter 'admin123' into the password field and tap submit.",
        "output": "appId: com.qoneqt.qoneqt\n---\n- inputText:\n    id: passwordField\n    text: admin123\n- tapOn:\n    id: submitButton"
  },
  {
        "instruction": "Tap on the 'Forgot Password' button if visible.",
        "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    text: Forgot Password\n    optional: true"
  },
  {
        "instruction": "Launch the app with clear state and set the location.",
        "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    clearState: true\n- setLocation:\n    latitude: 37.7749\n    longitude: -122.4194"
    },
    {
        "instruction": "Scroll until the settings option is visible, then tap it.",
        "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    text: Settings\n- tapOn:\n    text: Settings"
    },
    {
        "instruction": "If the cart is empty, display the empty cart message.",
        "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: emptyCartMessage\n    optional: true"
    },
    {
        "instruction": "Launch the app and verify the splash image is visible.",
        "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp\n- assertVisible:\n    id: splashImage"
    },
    {
        "instruction": "Repeat tapping the sync button until the message 'Synced!' appears.",
        "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    while:\n      notVisible:\n        text: Synced!\n    commands:\n      - tapOn:\n          id: syncButton"
    },
    {
        "instruction": "Input a sample name and submit using enter key.",
        "output": "appId: com.qoneqt.qoneqt\n---\n- inputText:\n    id: nameInput\n    text: Sample Name\n- pressKey:\n    key: enter"
    },
    {
        "instruction": "Tap on the settings icon then toggle airplane mode.",
        "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: settingsIcon\n- toggleAirplaneMode"
    },         

    {
      "instruction": "Assert the 'loginButton' is visible and enabled, then tap on it.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"loginButton\"\n    enabled: true\n- tapOn: { id: \"loginButton\" }"
    },
    {
      "instruction": "Input 'test@qoneqt.com' into 'emailField', then input 'password123' into 'passwordField', then tap 'loginButton'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"emailField\" }\n- inputText: \"test@qoneqt.com\"\n- tapOn: { id: \"passwordField\" }\n- inputText: \"password123\"\n- tapOn: { id: \"loginButton\" }"
    },
    {
      "instruction": "Scroll until 'termsAndConditionsLink' is visible, ensuring at least 80% of it is on screen, then tap it.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"termsAndConditionsLink\" }\n    visibilityPercentage: 80\n- tapOn: { id: \"termsAndConditionsLink\" }"
    },
    {
      "instruction": "Run the flow 'user_verification.yaml', but only if the output variable 'output.userNeedsVerification' is true.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.userNeedsVerification}\"\n    file: \"user_verification.yaml\""
    },
    {
      "instruction": "Retry tapping 'flakyConnectionButton' 3 times. If it still fails, run 'offline_mode_check.yaml'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 3\n    commands:\n      - tapOn: { id: \"flakyConnectionButton\", optional: true }\n- runFlow:\n    when:\n      # This assumes tapOn sets an implicit output or we check visibility after\n      # For a more robust check, the tapOn should ideally lead to a state change we can assert\n      # Let's assume a failure means a certain error message appears, or a success message does NOT appear\n      visible: { id: \"connectionFailedError\" } # Example condition after retries\n    file: \"offline_mode_check.yaml\""
    },
    {
      "instruction": "Repeat tapping 'loadMoreItems' and scrolling down, 5 times or until 'endOfFeedMessage' is visible.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 5\n    while:\n      notVisible: { id: \"endOfFeedMessage\" }\n    commands:\n      - tapOn: { id: \"loadMoreItems\", optional: true } \n      - scroll"
    },
    {
      "instruction": "Use AI to assert that the main navigation bar contains 'Home', 'Profile', and 'Settings' icons.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"The main navigation bar is visible and contains icons or text for 'Home', 'Profile', and 'Settings'.\""
    },
    {
      "instruction": "Run 'process_payment.js' script, passing 'paymentAmount' from output and 'currency' as 'USD'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runScript:\n    file: \"process_payment.js\"\n    env:\n      amount: \"${output.paymentAmount}\"\n      currency: \"USD\""
    },
    {
      "instruction": "Evaluate script to check if 'output.totalItems' is greater than 0, store in 'output.hasItems'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.hasItems = (output.totalItems > 0)}\""
    },
    {
      "instruction": "Launch the app 'com.qoneqt.kiosk' and clear its state.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    appId: \"com.qoneqt.kiosk\"\n    clearState: true"
    },
    {
      "instruction": "Assert the 'bioTextField' is focused and enabled.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"bioTextField\"\n    focused: true\n    enabled: true"
    },
    {
      "instruction": "Input a random 12-digit tracking number into 'trackingNumberInput'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"trackingNumberInput\" }\n- inputRandomNumber:\n    length: 12"
    },
    {
      "instruction": "Tap 'Filter', then tap 'Sort By', then tap 'Price: Low to High', then assert 'firstItemPrice' is visible.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: \"Filter\"\n- tapOn: \"Sort By\"\n- tapOn: \"Price: Low to High\"\n- assertVisible: { id: \"firstItemPrice\" }"
    },
    {
      "instruction": "Wait until 'loadingSpinnerModal' is no longer visible, timeout after 20 seconds.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- extendedWaitUntil:\n    notVisible: { id: \"loadingSpinnerModal\" }\n    timeout: 20000"
    },
    {
      "instruction": "Press the TV Remote DPad Left key.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- pressKey: \"Remote Dpad Left\""
    },
    {
      "instruction": "Swipe the 'photoGallery' to the right three times to go to previous photos.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 3\n    commands:\n      - swipe:\n          from: { id: \"photoGallery\" }\n          direction: RIGHT"
    },
    {
      "instruction": "Start recording as 'error_repro_video', tap 'triggerBugButton', assert 'errorMessage_critical' is visible, then stop recording.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- startRecording: \"error_repro_video\"\n- tapOn: { id: \"triggerBugButton\" }\n- assertVisible: { id: \"errorMessage_critical\" }\n- stopRecording"
    },
    {
      "instruction": "Tap 'MoreOptions'. If 'DeleteOption' is visible, tap it. Otherwise, tap 'ArchiveOption'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: \"MoreOptions\"\n- runFlow:\n    when:\n      visible: \"DeleteOption\"\n    commands:\n      - tapOn: \"DeleteOption\"\n- runFlow:\n    when:\n      notVisible: \"DeleteOption\"\n    commands:\n      - tapOn: \"ArchiveOption\""
    },
    {
      "instruction": "Assert the 'discountAmount' text is exactly '$${output.calculatedDiscount}', if output.discountApplied is true.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.discountApplied}\"\n    commands:\n      - assertVisible: \"$${output.calculatedDiscount}\""
    },
    {
      "instruction": "Long press on the item with ID 'draggable_list_item' to initiate drag.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- longPressOn: { id: \"draggable_list_item\" }"
    },
    {
      "instruction": "Navigate to profile: Tap 'ProfileIcon'. Edit bio: Tap 'EditBio', input 'New bio text'. Save: Tap 'SaveBio'. Verify 'BioUpdatedMessage'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"ProfileIcon\" }\n- tapOn: { id: \"EditBio\" }\n- inputText: \"New bio text\"\n- tapOn: { id: \"SaveBio\" }\n- assertVisible: { id: \"BioUpdatedMessage\" }"
    },
    {
      "instruction": "If 'welcomePopup' is visible, copy its title text then tap the 'closeWelcomePopupButton'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      visible: { id: \"welcomePopup\" }\n    commands:\n      - copyTextFrom: { id: \"welcomePopupTitle\" }\n      - tapOn: { id: \"closeWelcomePopupButton\" }"
    },
    {
      "instruction": "Assert the 'thumbnail_image_preview' is visible and has a height of approximately 80 pixels (tolerance 10).",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"thumbnail_image_preview\"\n    height: 80\n    tolerance: 10"
    },
    {
      "instruction": "Retry the 'data_sync.yaml' flow twice if it fails, then take a screenshot named 'sync_status_after_retries'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 2\n    file: \"data_sync.yaml\"\n- takeScreenshot: \"sync_status_after_retries\""
    },
    {
      "instruction": "Repeat 4 times: Tap 'NextChapterButton', wait for 'ChapterTitle' to update (max 2s).",
      "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 4\n    commands:\n      - tapOn: { id: \"NextChapterButton\" }\n      - extendedWaitUntil:\n          visible: { id: \"ChapterTitle\" } # Assuming ChapterTitle text itself changes or re-renders\n          timeout: 2000"
    },
    {
      "instruction": "Use AI to verify the primary button on the screen uses the correct brand color.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"The primary call-to-action button on the current screen uses the brand's primary color (e.g., Qoneqt Blue).\""
    },
    {
      "instruction": "Run script 'update_settings.js', passing 'settingName: notificationsEnabled' and 'settingValue: output.notificationsToggleState'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runScript:\n    file: \"update_settings.js\"\n    env:\n      settingName: \"notificationsEnabled\"\n      settingValue: \"${output.notificationsToggleState}\""
    },
    {
      "instruction": "Check if 'output.searchQuery' is not empty and store boolean in 'output.isSearchActive'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.isSearchActive = (output.searchQuery && output.searchQuery.length > 0)}\""
    },
    {
      "instruction": "Tap on the 'View Cart' button with ID 'view_cart_button_header'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"view_cart_button_header\"\n    text: \"View Cart\""
    },
    {
      "instruction": "Assert the 'error_summary_box' is visible and contains the text 'Please correct the errors below'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"error_summary_box\"\n    text: \".*Please correct the errors below.*\""
    },
    {
      "instruction": "Input a random 25-character alphanumeric string into 'apiKeyGenInput'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"apiKeyGenInput\" }\n- inputRandomText:\n    length: 25"
    },
    {
      "instruction": "Launch app. Tap 'Support'. Scroll to 'FAQ'. Tap 'FAQ'. Assert 'Frequently Asked Questions' title.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp\n- tapOn: \"Support\"\n- scrollUntilVisible:\n    element: \"FAQ\"\n- tapOn: \"FAQ\"\n- assertVisible: \"Frequently Asked Questions\""
    },
    {
      "instruction": "Tap 'sendAnalyticsDataToggle'. This tap should not be retried if the UI doesn't change.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"sendAnalyticsDataToggle\"\n    retryTapIfNoChange: false"
    },
    {
      "instruction": "Assert 'offlineIndicatorBanner' is visible. This check is optional.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"offlineIndicatorBanner\"\n    optional: true"
    },
    {
      "instruction": "Input 'This is a final test note.' into the currently focused text input field.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- inputText: \"This is a final test note.\""
    },
    {
      "instruction": "Scroll the 'user_feed_view' up until the 'new_posts_indicator' is visible and centered.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"new_posts_indicator\" }\n    direction: UP\n    centerElement: true\n    # Assuming user_feed_view is parent"
    },
    {
      "instruction": "Run 'account_closure_warning.yaml' if output.isAccountDeletionRequested is true.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.isAccountDeletionRequested}\"\n    file: \"account_closure_warning.yaml\""
    },
    {
      "instruction": "Press the TV Power key on Android TV.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- pressKey: \"Power\" # This is for Android phone, for TV specific power, it's often just 'Power' or might need device specific key"
    },
    {
      "instruction": "Clear the state of app 'com.qoneqt.alternate'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- clearState: \"com.qoneqt.alternate\""
    },
    {
      "instruction": "Copy text from 'discountCodeLabel', tap 'enterDiscountCodeField', paste, then tap 'ApplyDiscountButton'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- copyTextFrom: { id: \"discountCodeLabel\" }\n- tapOn: { id: \"enterDiscountCodeField\" }\n- pasteText\n- tapOn: { id: \"ApplyDiscountButton\" }"
    },
    {
      "instruction": "Double tap the 'image_to_like' element, with a 50ms delay.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- doubleTapOn:\n    id: \"image_to_like\"\n    delay: 50"
    },
    {
      "instruction": "Erase the content of 'notes_field' (up to 100 characters).",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"notes_field\" }\n- eraseText: 100"
    },
    {
      "instruction": "Wait for 'modal_dialog_box' to be not visible, with a 12 second timeout.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- extendedWaitUntil:\n    notVisible: { id: \"modal_dialog_box\" }\n    timeout: 12000"
    },
    {
      "instruction": "If the keyboard is open, try to hide it and then assert 'mainContentArea' is visible.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- hideKeyboard\n- assertVisible: { id: \"mainContentArea\" }"
    },
    {
      "instruction": "Kill the app. Then launch it with argument 'source: test_automation'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- killApp\n- launchApp:\n    arguments:\n      source: \"test_automation\""
    },
    {
      "instruction": "Long press on the 'map_pin_draggable'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- longPressOn: { id: \"map_pin_draggable\" }"
    },
    {
      "instruction": "Open the link 'qoneqt://help/contact'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- openLink: \"qoneqt://help/contact\""
    },
    {
      "instruction": "Press the 'Remote Media Stop' key.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- pressKey: \"Remote Media Stop\""
    },
    {
      "instruction": "Scroll 'settings_options_list' until 'LogoutButton' is visible and fully in view.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"LogoutButton\" }\n    visibilityPercentage: 100\n    # Assuming settings_options_list is parent"
    },
    {
      "instruction": "Start recording 'search_and_filter', perform search, apply filter, stop recording.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- startRecording: \"search_and_filter\"\n- tapOn: { id: \"searchInput\" }\n- inputText: \"qoneqt products\"\n- tapOn: { id: \"filterButton\" }\n- tapOn: { id: \"category_electronics\" }\n- tapOn: { id: \"applyFiltersButton\" }\n- stopRecording"
    },
    {
      "instruction": "Stop the 'com.qoneqt.companion' app if it's running.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- stopApp: \"com.qoneqt.companion\""
    },
    {
      "instruction": "Swipe from (80%, 200) to (20%, 200) with a duration of 300ms.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- swipe:\n    start: \"80%,200\"\n    end: \"20%,200\"\n    duration: 300"
    },
    {
      "instruction": "Take screenshot of 'InvoiceDetailsPage'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- takeScreenshot: \"InvoiceDetailsPage\""
    },
    {
      "instruction": "Wait for 'onboarding_animation_step3' to complete, max 7s.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- waitForAnimationToEnd:\n    timeout: 7000"
    },
    {
      "instruction": "Launch app, denying camera and microphone, but allowing storage.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    permissions:\n      camera: deny\n      microphone: deny\n      android.permission.WRITE_EXTERNAL_STORAGE: allow"
    },
    {
      "instruction": "Tap the 'ShowPasswordToggle' and ensure UI does not retry tap if no change immediately.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"ShowPasswordToggle\"\n    retryTapIfNoChange: false"
    },
    {
      "instruction": "Assert the 'darkModeSwitch' is visible and is currently off (not selected).",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"darkModeSwitch\"\n    selected: false"
    },
    {
      "instruction": "Input a random 9-character alphanumeric ID.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- inputRandomText:\n    length: 9"
    },
    {
      "instruction": "Scroll 'user_profile_details' until 'edit_contact_info_button' is 50% visible and centered.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"edit_contact_info_button\" }\n    visibilityPercentage: 50\n    centerElement: true\n    # Assuming user_profile_details is parent"
    },
    {
      "instruction": "Run 'data_export_module.yaml' only on the 'Web' platform.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      platform: \"Web\"\n    file: \"data_export_module.yaml\""
    },
    {
      "instruction": "Use AI to verify that the font used in the app is consistent and legible.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"The application uses a consistent and legible font family and size across all primary text elements.\""
    },
    {
      "instruction": "Extract the product name from the H1 tag using AI, store as 'productNameAI'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- extractTextWithAI:\n    query: \"What is the product name displayed in the main heading (H1 tag) of the page?\"\n    outputVariable: \"productNameAI\""
    },
    {
      "instruction": "Tap on 'edit_icon' if it's a child of 'user_details_section' and to the right of 'username_display'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"edit_icon\"\n    childOf: { id: \"user_details_section\" }\n    rightOf: { id: \"username_display\" }"
    },
    {
      "instruction": "If 'output.isSubscriptionActive' is false, assert 'UpgradeNowButton' is visible.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${!output.isSubscriptionActive}\"\n    commands:\n      - assertVisible: { id: \"UpgradeNowButton\" }"
    },
    {
      "instruction": "Verify that the 'page_url_display' text matches 'https://qoneqt.com/dashboard'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"page_url_display\"\n    text: \"^https://qoneqt.com/dashboard$\""
    },
    {
      "instruction": "Set flow environment variable 'BUILD_NUMBER' to '1024'.",
      "output": "appId: com.qoneqt.qoneqt\nenv:\n  BUILD_NUMBER: \"1024\"\n---\n- launchApp"
    },
    {
      "instruction": "On flow start, run 'check_api_availability.yaml'. On completion, run 'log_telemetry.js'.",
      "output": "appId: com.qoneqt.qoneqt\nonFlowStart:\n  - runFlow: \"check_api_availability.yaml\"\nonFlowComplete:\n  - runScript: \"log_telemetry.js\"\n---\n- launchApp"
    },
    {
      "instruction": "This flow is named 'End-to-End User Journey Test'.",
      "output": "appId: com.qoneqt.qoneqt\nname: \"End-to-End User Journey Test\"\n---\n- launchApp"
    },
    {
      "instruction": "Tag this flow 'e2e', 'user_journey', and 'release_candidate'.",
      "output": "appId: com.qoneqt.qoneqt\ntags:\n  - \"e2e\"\n  - \"user_journey\"\n  - \"release_candidate\"\n---\n- launchApp"
    },
    {
      "instruction": "Use GraalJS. Access 'maestro.copiedText' and use it in an 'inputText' command.",
      "output": "appId: com.qoneqt.qoneqt\njsEngine: graaljs\n---\n- copyTextFrom: { id: \"sourceTextElement\" }\n- tapOn: { id: \"destinationInputElement\" }\n- inputText: \"Copied: ${maestro.copiedText}\""
    },
    {
      "instruction": "Tap the 'About Us' link in the main menu.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: \"About Us\""
    },
    {
      "instruction": "Assert the 'network_error_toast' is visible.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: { id: \"network_error_toast\" }"
    },
    {
      "instruction": "Enter 'Project Qoneqt Alpha - Sprint 5 Review' into 'eventTitleField'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"eventTitleField\" }\n- inputText: \"Project Qoneqt Alpha - Sprint 5 Review\""
    },
    {
      "instruction": "Scroll 'product_grid_view' until 'product_tile_X25' is visible, then assert its price is '$199'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"product_tile_X25\" }\n    # Assuming product_grid_view is parent\n- assertVisible:\n    id: \"product_tile_X25_price\"\n    text: \"$199\""
    },
    {
      "instruction": "Run 'user_feedback_submission.yaml', passing 'rating: 5' and 'comment: output.userCommentText'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    file: \"user_feedback_submission.yaml\"\n    env:\n      rating: 5\n      comment: \"${output.userCommentText}\""
    },
    {
      "instruction": "Launch 'com.qoneqt.qoneqt', clear state, clear keychain, and pass 'user_tier: gold' argument.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    appId: \"com.qoneqt.qoneqt\"\n    clearState: true\n    clearKeychain: true\n    arguments:\n      user_tier: \"gold\""
    },
    {
      "instruction": "Tap on the 'hamburger_menu_icon'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"hamburger_menu_icon\" }"
    },
    {
      "instruction": "Verify 'Your message has been sent to support.' is displayed.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: \"Your message has been sent to support.\""
    },
    {
      "instruction": "Input the device ID from 'output.deviceId' into 'pairingCodeInput'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"pairingCodeInput\" }\n- inputText: \"${output.deviceId}\""
    },
    {
      "instruction": "Scroll 'vertical_menu_bar' up until 'menu_item_top' is visible with 100% visibility and centered.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"menu_item_top\" }\n    direction: UP\n    visibilityPercentage: 100\n    centerElement: true\n    # Assuming vertical_menu_bar is parent"
    },
    {
      "instruction": "If 'output.isNewFeatureRolloutActive' is true, run inline command to assert 'NewFeatureBanner' is visible.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.isNewFeatureRolloutActive}\"\n    commands:\n      - assertVisible: { id: \"NewFeatureBanner\" }"
    },
    {
      "instruction": "Retry the commands: tap 'GenerateReportBtn', wait for 'ReportReadyNotification' (max 30s). Max retries 1.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 1\n    commands:\n      - tapOn: { id: \"GenerateReportBtn\" }\n      - extendedWaitUntil:\n          visible: { id: \"ReportReadyNotification\" }\n          timeout: 30000"
    },
    {
      "instruction": "Repeat tapping 'NextTutorialPage' while 'TutorialProgressIndicator' is not 'Complete', up to 10 times.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 10\n    while:\n      notVisible: { id: \"TutorialProgressIndicator\", text: \"Complete\" }\n    commands:\n      - tapOn: { id: \"NextTutorialPage\" }"
    },
    {
      "instruction": "Use AI to check if the app's navigation is intuitive and follows common mobile patterns.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"The application's navigation structure is intuitive, easy to understand, and follows common mobile UI/UX patterns.\""
    },
    {
      "instruction": "Run script 'validate_form_data.js'. It needs 'formFieldsObject' from output vars.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runScript:\n    file: \"validate_form_data.js\"\n    env:\n      formData: \"${output.formFieldsObject}\" # Assuming formFieldsObject is a string or JSON.stringify-able"
    },
    {
      "instruction": "Calculate 'output.average = output.sum / output.count' (ensure count is not zero).",
      "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.average = (output.count > 0) ? (output.sum / output.count) : 0}\""
    },
    {
      "instruction": "Tap the 'confirm_action_button', located above 'cancel_action_link'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"confirm_action_button\"\n    above: { id: \"cancel_action_link\" }"
    },
    {
      "instruction": "Assert 'updateSuccessfulPopup' is visible with text 'Data updated successfully!'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"updateSuccessfulPopup\"\n    text: \"Data updated successfully!\""
    },
    {
      "instruction": "Input a random company name into 'companyNameField'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"companyNameField\" }\n- inputRandomText: { length: 10 } # Simulating company name with random text"
    },
    {
      "instruction": "Complete complex form: Fill name, email, phone. Select DOB. Check T&C. Tap Submit. Verify 'Submission Received'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"fullNameInput\" }\n- inputRandomPersonName\n- tapOn: { id: \"emailAddressInput\" }\n- inputRandomEmail\n- tapOn: { id: \"phoneNumberInput\" }\n- inputRandomNumber: { length: 10 }\n- tapOn: { id: \"dateOfBirthPicker\" } # Assume this opens a picker\n- tapOn: \"15\" # Example day\n- tapOn: \"OK\" # Example to close picker\n- scrollUntilVisible: { element: { id: \"termsAndConditionsCheckbox\" } }\n- tapOn: { id: \"termsAndConditionsCheckbox\" }\n- tapOn: { id: \"submitFormButton\" }\n- assertVisible: \"Submission Received\""
    },
    {
      "instruction": "Tap 'showAdvancedFiltersButton', this is optional and labelled 'Toggle Advanced Filters'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"showAdvancedFiltersButton\"\n    optional: true\n    label: \"Toggle Advanced Filters\""
    },
    {
      "instruction": "Verify 'userCard' contains descendants 'userNameLabel', 'userEmailLabel', and 'userStatusIndicator'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"userCard\"\n    containsDescendants:\n      - id: \"userNameLabel\"\n      - id: \"userEmailLabel\"\n      - id: \"userStatusIndicator\""
    },
    {
      "instruction": "Tap 'sectionA_tab', then 'sectionB_tab', then 'sectionC_tab'. Assert 'sectionC_content_area' is visible.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"sectionA_tab\" }\n- tapOn: { id: \"sectionB_tab\" }\n- tapOn: { id: \"sectionC_tab\" }\n- assertVisible: { id: \"sectionC_content_area\" }"
    },
    {
      "instruction": "Assert 'appIconHeader' has exact width 48 and exact height 48.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"appIconHeader\"\n    width: 48\n    height: 48\n    tolerance: 0"
    },
    {
      "instruction": "Add media: './temp/screenshot.png', './temp/recording.mp4'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- addMedia:\n    - \"./temp/screenshot.png\"\n    - \"./temp/recording.mp4\""
    },
    {
      "instruction": "Press the Remote Button B on Android TV.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- pressKey: \"Remote Button B\""
    },
    {
      "instruction": "Take a screenshot of 'OrderConfirmationScreen_DetailedView'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- takeScreenshot: \"OrderConfirmationScreen_DetailedView\""
    },
    {
      "instruction": "Tap on the 'Apply Changes' button only if it is visible, enabled, and its text matches 'Apply'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      visible:\n        id: \"applyChangesButton\"\n        text: \"Apply\"\n        enabled: true\n    commands:\n      - tapOn: { id: \"applyChangesButton\" }"
    },
    {
      "instruction": "Assert the 'marketingOptInToggle' is visible, enabled, and currently checked (on).",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"marketingOptInToggle\"\n    enabled: true\n    checked: true"
    },
    {
      "instruction": "Tap the 'viewFullHistoryLink', an optional action, labelled 'Access Full Transaction History'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"viewFullHistoryLink\"\n    optional: true\n    label: \"Access Full Transaction History\""
    },
    {
      "instruction": "Clear app state, then launch with 'user_id: test_user_007' and 'session_id: abc_123' arguments.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- clearState\n- launchApp:\n    arguments:\n      user_id: \"test_user_007\"\n      session_id: \"abc_123\""
    },
    {
      "instruction": "Verify 'FATAL_ERROR_CODE_999' message is displayed.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: \"FATAL_ERROR_CODE_999\""
    },
    {
      "instruction": "Launch app. Tap button 'Access Features'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp\n- tapOn: \"Access Features\""
    },
    {
      "instruction": "Input 'Quarterly Business Review - Q3 Highlights' into 'report_title_field'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"report_title_field\" }\n- inputText: \"Quarterly Business Review - Q3 Highlights\""
    },
    {
      "instruction": "Scroll 'activity_log_list' until 'log_entry_first' is visible, then assert its timestamp is recent (e.g. contains 'Today').",
      "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"log_entry_first\" }\n    # Assuming activity_log_list is parent\n- assertVisible:\n    id: \"log_entry_first_timestamp\"\n    text: \".*Today.*\""
    },
    {
      "instruction": "Run 'international_shipping_calc.yaml' if 'output.isInternationalOrder' is true, passing 'destinationCountry: output.countryCode'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.isInternationalOrder}\"\n    file: \"international_shipping_calc.yaml\"\n    env:\n      destinationCountry: \"${output.countryCode}\""
    },
    {
      "instruction": "Retry: tap 'ConnectToPeripheralBtn', wait for 'PeripheralConnectedIndicator' (max 20s). Retries: 3.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 3\n    commands:\n      - tapOn: { id: \"ConnectToPeripheralBtn\" }\n      - extendedWaitUntil:\n          visible: { id: \"PeripheralConnectedIndicator\" }\n          timeout: 20000"
    },
    {
      "instruction": "Repeat tapping 'NextScreenButton' while 'ScreenTitle' is not 'Final Screen', max 15 taps.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 15\n    while:\n      notVisible: { id: \"ScreenTitle\", text: \"Final Screen\" }\n    commands:\n      - tapOn: { id: \"NextScreenButton\" }"
    },
    {
      "instruction": "Use AI to confirm that all interactive elements (buttons, links) are sufficiently large for easy tapping.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"All interactive elements such as buttons and links on the current screen have a tap target size that is sufficiently large for easy interaction on a mobile device.\""
    },
    {
      "instruction": "Run JS 'analytics_event_sender.js'. It needs 'eventCategory', 'eventAction', 'eventLabel' from output.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runScript:\n    file: \"analytics_event_sender.js\"\n    env:\n      category: \"${output.eventCategory}\"\n      action: \"${output.eventAction}\"\n      label: \"${output.eventLabel}\""
    },
    {
      "instruction": "Determine if 'output.userAge' is adult (>=18) and store in 'output.isAdultUser'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.isAdultUser = (parseInt(output.userAge) >= 18)}\""
    },
    {
      "instruction": "Tap 'proceedToPaymentButton', which is displayed below 'orderSummaryReviewSection'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"proceedToPaymentButton\"\n    below: { id: \"orderSummaryReviewSection\" }"
    },
    {
      "instruction": "Assert 'dataSyncFailedAlert' is visible with text 'Data synchronization failed. Please check your connection.'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"dataSyncFailedAlert\"\n    text: \"Data synchronization failed. Please check your connection.\""
    },
    {
      "instruction": "Input a random 10-character coupon code into 'couponCodeField'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"couponCodeField\" }\n- inputRandomText:\n    length: 10"
    },
    {
      "instruction": "Advanced Search: Input 'Qoneqt Pro', select category 'Electronics', filter by price range '$100-$500', sort 'Newest First', tap first result.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"mainSearchInput\" }\n- inputText: \"Qoneqt Pro\"\n- tapOn: { id: \"searchFiltersButton\" }\n- tapOn: { id: \"categoryDropdown\" }\n- tapOn: \"Electronics\"\n- tapOn: { id: \"priceRangeMinInput\" }\n- inputText: \"100\"\n- tapOn: { id: \"priceRangeMaxInput\" }\n- inputText: \"500\"\n- tapOn: { id: \"sortDropdown\" }\n- tapOn: \"Newest First\"\n- tapOn: { id: \"applyAllFiltersButton\" }\n- tapOn: { id: \"searchResultItem_0\" }"
    },
    {
      "instruction": "Tap 'downloadInvoicePdfLink', optional, labeled 'Download PDF Invoice'. No retry on no UI change.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"downloadInvoicePdfLink\"\n    optional: true\n    label: \"Download PDF Invoice\"\n    retryTapIfNoChange: false"
    },
    {
      "instruction": "Verify 'quickActionsToolbar' contains descendant buttons: 'Action1', 'Action2', and 'Action3'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"quickActionsToolbar\"\n    containsDescendants:\n      - \"Action1\"\n      - \"Action2\"\n      - \"Action3\""
    },
    {
      "instruction": "Tap 'buttonOne', then 'buttonTwo', then 'buttonThree'. Assert 'finalStatusMessage' text is 'Completed All Steps'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"buttonOne\" }\n- tapOn: { id: \"buttonTwo\" }\n- tapOn: { id: \"buttonThree\" }\n- assertVisible:\n    id: \"finalStatusMessage\"\n    text: \"Completed All Steps\""
    },
    {
      "instruction": "Assert 'smallIcon_notification' has width of 24 and height of 24, with zero tolerance.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"smallIcon_notification\"\n    width: 24\n    height: 24\n    tolerance: 0"
    },
    {
      "instruction": "Launch the app, then tap on the 'usernameInput' field, enter 'test.user@qoneqt.com', tap on 'passwordInput', enter 'ValidPassword123!', tap 'loginButton', and finally verify 'userDashboardScreen' is visible.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp\n- tapOn: { id: \"usernameInput\" }\n- inputText: \"test.user@qoneqt.com\"\n- tapOn: { id: \"passwordInput\" }\n- inputText: \"ValidPassword123!\"\n- tapOn: { id: \"loginButton\" }\n- assertVisible: { id: \"userDashboardScreen\" }"
    },
    {
      "instruction": "If the 'promoBannerPopup' is visible, tap on its 'closePromoButton'; this step is optional.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"closePromoButton\"\n    childOf: { id: \"promoBannerPopup\" } # Assuming close button is child of banner\n    optional: true\n    label: \"Close promotional banner if present\""
    },
    {
      "instruction": "Scroll down the 'productListContainer' until 'loadMoreProductsButton' is visible with at least 50% visibility and centered on screen, then tap it.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"loadMoreProductsButton\" }\n    direction: DOWN\n    visibilityPercentage: 50\n    centerElement: true\n    # Assuming productListContainer is the scrollable parent or implied\n- tapOn: { id: \"loadMoreProductsButton\" }"
    },
    {
      "instruction": "Run the 'apply_filters.yaml' flow only if the current platform is 'Android' and the 'filterCriteriaAvailable' output variable is true.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      platform: \"Android\"\n      true: \"${output.filterCriteriaAvailable}\"\n    file: \"apply_filters.yaml\""
    },
    {
      "instruction": "Retry the following sequence up to 3 times: tap 'connectToServerButton', wait up to 15 seconds for 'connectionStatusLabel' to show 'Connected'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 3\n    commands:\n      - tapOn: { id: \"connectToServerButton\" }\n      - extendedWaitUntil:\n          visible: { id: \"connectionStatusLabel\", text: \"Connected\" }\n          timeout: 15000"
    },
    {
      "instruction": "Repeatedly tap the 'nextPageArrowIcon' while the 'pageNumberIndicator' text is not 'Page 5 of 5', for a maximum of 4 taps.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 4\n    while:\n      notVisible: { id: \"pageNumberIndicator\", text: \"Page 5 of 5\" }\n    commands:\n      - tapOn: { id: \"nextPageArrowIcon\" }"
    },
    {
      "instruction": "Use AI to assert that the product image displayed matches the product name 'Qoneqt SmartHub'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"The displayed product image visually represents or is related to a 'Qoneqt SmartHub'.\""
    },
    {
      "instruction": "Run the 'user_preferences_updater.js' script, passing 'theme: output.selectedTheme' and 'language: output.chosenLanguage' as environment variables.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runScript:\n    file: \"user_preferences_updater.js\"\n    env:\n      theme: \"${output.selectedTheme}\"\n      language: \"${output.chosenLanguage}\""
    },
    {
        "instruction": "Evaluate script to format 'output.rawAmount' (e.g., 1234.5) into a currency string like '$1,234.50' and store it in 'output.formattedCurrency'.",
        "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.formattedCurrency = '$' + parseFloat(output.rawAmount).toFixed(2).replace(/\\\\B(?=(\\\\d{3})+(?!\\\\d))/g, ',')}\""
    },
    {
      "instruction": "Launch the 'com.qoneqt.supportmodule' app, ensuring its state is cleared and all permissions are denied.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    appId: \"com.qoneqt.supportmodule\"\n    clearState: true\n    permissions: { all: deny }"
    },
    {
      "instruction": "Assert the 'messageInputField' is enabled, focused, and currently empty.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"messageInputField\"\n    enabled: true\n    focused: true\n    text: \"^$\" # Regex for empty string"
    },
    {
      "instruction": "Input a random 7-digit order confirmation number into 'orderSearchInput'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"orderSearchInput\" }\n- inputRandomNumber:\n    length: 7"
    },
    {
      "instruction": "Navigate the settings: Tap 'GeneralSettings', then 'NotificationPreferences', then toggle 'emailNotificationsSwitch', and verify 'settingsSavedConfirmation' appears.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"GeneralSettings\" }\n- tapOn: { id: \"NotificationPreferences\" }\n- tapOn: { id: \"emailNotificationsSwitch\" }\n- assertVisible: { id: \"settingsSavedConfirmation\" }"
    },
    {
      "instruction": "Wait until the 'videoAdOverlay' is no longer visible, with a maximum wait time of 45 seconds.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- extendedWaitUntil:\n    notVisible: { id: \"videoAdOverlay\" }\n    timeout: 45000"
    },
    {
      "instruction": "Press the TV Remote DPad Up key twice, then DPad Center once.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- pressKey: \"Remote Dpad Up\"\n- pressKey: \"Remote Dpad Up\"\n- pressKey: \"Remote Dpad Center\""
    },
    {
      "instruction": "Swipe the 'tutorialCarousel' to the left four times, with a 200ms duration for each swipe.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 4\n    commands:\n      - swipe:\n          from: { id: \"tutorialCarousel\" }\n          direction: LEFT\n          duration: 200"
    },
    {
      "instruction": "Start screen recording named 'complex_form_submission', fill the form using 'fill_complex_form.yaml', tap 'submitComplexForm', assert 'formSubmittedSuccessfully', then stop recording.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- startRecording: \"complex_form_submission\"\n- runFlow: \"fill_complex_form.yaml\"\n- tapOn: { id: \"submitComplexForm\" }\n- assertVisible: \"formSubmittedSuccessfully\"\n- stopRecording"
    },
    {
      "instruction": "Tap 'OpenChatButton'. If 'chatWindow' is visible, input 'Hello Support' into 'chatInputBox'. Else, assert 'chatOfflineMessage' is visible.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"OpenChatButton\" }\n- runFlow:\n    when:\n      visible: { id: \"chatWindow\" }\n    commands:\n      - tapOn: { id: \"chatInputBox\" }\n      - inputText: \"Hello Support\"\n- runFlow:\n    when:\n      notVisible: { id: \"chatWindow\" }\n    commands:\n      - assertVisible: { id: \"chatOfflineMessage\" }"
    },
    {
      "instruction": "Assert the 'finalPriceDisplay' shows exactly '$${output.grandTotalWithTax}' but only if 'output.isCheckoutComplete' is true.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.isCheckoutComplete}\"\n    commands:\n      - assertVisible: \"$${output.grandTotalWithTax}\""
    },
    {
      "instruction": "Long press on the 'mapLocationMarker' that has text 'Qoneqt HQ' to show info.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- longPressOn:\n    id: \"mapLocationMarker\"\n    text: \"Qoneqt HQ\""
    },
    {
      "instruction": "User journey: Launch app. Tap 'Promotions'. Scroll to 'SummerSaleBanner'. Tap it. Assert 'Summer Sale Details' page visible.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp\n- tapOn: \"Promotions\"\n- scrollUntilVisible:\n    element: { id: \"SummerSaleBanner\" }\n- tapOn: { id: \"SummerSaleBanner\" }\n- assertVisible: \"Summer Sale Details\""
    },
    {
      "instruction": "If 'cookieConsentBanner' is visible, copy the banner text, then tap 'acceptAllCookiesButton'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      visible: { id: \"cookieConsentBanner\" }\n    commands:\n      - copyTextFrom: { id: \"cookieConsentBanner\" } # Assuming the banner itself has the text\n      - tapOn: { id: \"acceptAllCookiesButton\" }"
    },
    {
      "instruction": "Assert the 'avatarUploadPreview' is visible and has an aspect ratio close to 1:1 (e.g., width 100, height 102, tolerance 5).",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"avatarUploadPreview\"\n    width: 100\n    height: 102\n    tolerance: 5"
    },
    {
      "instruction": "Retry the 'fetch_user_data_v2.yaml' flow up to 1 time if it fails, then log 'output.userDataFetchStatus' to console.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 1\n    file: \"fetch_user_data_v2.yaml\"\n- evalScript: \"${console.log('User data fetch status: ' + output.userDataFetchStatus)}\""
    },
    {
      "instruction": "Repeat 3 times: Tap 'nextItemButton', wait for 'itemDetailsView' to fully load (wait up to 5 seconds for animation and content).",
      "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 3\n    commands:\n      - tapOn: { id: \"nextItemButton\" }\n      - waitForAnimationToEnd: { timeout: 2000 } # Wait for animation first\n      - extendedWaitUntil: { visible: { id: \"itemDetailsView\" }, timeout: 3000 } # Then wait for content"
    },
    {
      "instruction": "Use AI to verify that the checkout process includes a clear order summary before final payment.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"The checkout process displays a clear and comprehensive order summary, including items, prices, and total amount, before prompting for final payment confirmation.\""
    },
    {
      "instruction": "Run script 'device_compatibility_check.js', passing 'osVersion: maestro.deviceInfo.osVersion' (conceptual) and 'appVersion: output.currentAppVersion'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runScript:\n    file: \"device_compatibility_check.js\"\n    env:\n      osVersion: \"${maestro.deviceInfo ? maestro.deviceInfo.osVersion : 'unknown'}\" # maestro.deviceInfo is conceptual\n      appVersion: \"${output.currentAppVersion}\""
    },
    {
      "instruction": "Evaluate script to parse 'output.jsonResponseString' into an object and store it in 'output.parsedResponse'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.parsedResponse = JSON.parse(output.jsonResponseString || '{}')}\""
    },
    {
      "instruction": "Tap on the 'Share To SocialMedia' button with ID 'share_social_media_main'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"share_social_media_main\"\n    text: \"Share To SocialMedia\" # Example text for robustness"
    },
    {
      "instruction": "Assert the 'feedback_error_message_field' is visible and contains the text 'Invalid characters'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"feedback_error_message_field\"\n    text: \".*Invalid characters.*\""
    },
    {
      "instruction": "Input a random 10-character alphanumeric password into 'newUserCreationPasswordField'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"newUserCreationPasswordField\" }\n- inputRandomText:\n    length: 10"
    },
    {
      "instruction": "Launch app. Navigate: Menu -> Settings -> Account -> Delete Account. Confirm deletion. Assert 'AccountDeletedScreen'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp\n- tapOn: { id: \"menuIcon\" }\n- tapOn: \"Settings\"\n- tapOn: \"Account\"\n- tapOn: \"Delete Account\"\n- tapOn: { id: \"confirmDeletionButton\" } # Assuming a confirmation\n- assertVisible: { id: \"AccountDeletedScreen\" }"
    },
    {
      "instruction": "Tap 'viewPrivacyPolicyLink'. This tap action should not be retried automatically if UI does not change.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"viewPrivacyPolicyLink\"\n    retryTapIfNoChange: false"
    },
    {
      "instruction": "Assert 'serverErrorModal' is visible. This check is optional for the flow.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"serverErrorModal\"\n    optional: true"
    },
    {
      "instruction": "Input 'This is my final thought on the matter.' into the currently focused text area.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- inputText: \"This is my final thought on the matter.\""
    },
    {
      "instruction": "Scroll the 'news_article_scrollview' up until the 'article_publication_date' is visible and centered on screen.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"article_publication_date\" }\n    direction: UP\n    centerElement: true\n    # Assuming news_article_scrollview is parent"
    },
    {
      "instruction": "Run 'send_crash_report.yaml' if 'output.appCrashedPreviously' is true.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.appCrashedPreviously}\"\n    file: \"send_crash_report.yaml\""
    },
    {
      "instruction": "Press the Android TV Remote Back key.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- pressKey: \"Back\" # For TV, if specific 'Remote Back' is not available, 'Back' is often the system back."
    },
    {
      "instruction": "Clear the application state for 'com.qoneqt.alpha_build'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- clearState: \"com.qoneqt.alpha_build\""
    },
    {
      "instruction": "Copy text from 'referralCodeText', tap 'shareReferralButton', then in the share dialog (conceptual), tap 'CopyLinkButton'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- copyTextFrom: { id: \"referralCodeText\" }\n- tapOn: { id: \"shareReferralButton\" }\n- extendedWaitUntil: { visible: { id: \"CopyLinkButton\" }, timeout: 5000 } # Wait for share dialog\n- tapOn: { id: \"CopyLinkButton\" }"
    },
    {
      "instruction": "Double tap the 'interactiveMapArea' element, with a 250ms delay between the taps.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- doubleTapOn:\n    id: \"interactiveMapArea\"\n    delay: 250"
    },
    {
      "instruction": "Erase all current text from 'feedbackFormSubject' (max 50 chars).",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"feedbackFormSubject\" }\n- eraseText: 50"
    },
    {
      "instruction": "Wait until 'systemUpdateInProgressModal' is no longer visible, with a 90 second timeout.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- extendedWaitUntil:\n    notVisible: { id: \"systemUpdateInProgressModal\" }\n    timeout: 90000"
    },
    {
      "instruction": "If the software keyboard is visible, hide it, then assert the 'fullScreenContent' element is visible.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- hideKeyboard\n- assertVisible: { id: \"fullScreenContent\" }"
    },
    {
      "instruction": "Kill the application. Then launch it with arguments 'debug_mode:true' and 'log_level:verbose'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- killApp\n- launchApp:\n    arguments:\n      debug_mode: true\n      log_level: \"verbose\""
    },
    {
      "instruction": "Long press on the 'sliderControlHandle' on 'brightnessSlider'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- longPressOn: { id: \"sliderControlHandle\" } # Assuming this is part of brightnessSlider"
    },
    {
      "instruction": "Open the application-specific settings link 'qoneqt://app_settings/privacy'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- openLink: \"qoneqt://app_settings/privacy\""
    },
    {
      "instruction": "Press the 'Remote Media Next' key.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- pressKey: \"Remote Media Next\""
    },
    {
      "instruction": "Scroll 'detailed_report_view' until 'report_summary_footer' is visible and 100% in view.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"report_summary_footer\" }\n    visibilityPercentage: 100\n    # Assuming detailed_report_view is parent"
    },
    {
      "instruction": "Start recording 'full_e2e_test', run 'main_e2e_flow.yaml', then stop the recording.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- startRecording: \"full_e2e_test\"\n- runFlow: \"main_e2e_flow.yaml\"\n- stopRecording"
    },
    {
      "instruction": "Stop the application 'com.qoneqt.test_utility_app' if it is running.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- stopApp: \"com.qoneqt.test_utility_app\""
    },
    {
      "instruction": "Swipe from (10%, 80%) to (10%, 20%) with a duration of 800ms to scroll content up.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- swipe:\n    start: \"10%,80%\"\n    end: \"10%,20%\"\n    duration: 800"
    },
    {
      "instruction": "Take a screenshot of the 'PaymentFailureScreen'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- takeScreenshot: \"PaymentFailureScreen\""
    },
    {
      "instruction": "Wait for 'tutorial_hand_animation' to fully complete, with a timeout of 10 seconds.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- waitForAnimationToEnd:\n    timeout: 10000"
    },
    {
      "instruction": "Launch app, denying all permissions except fine location.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    permissions:\n      all: deny\n      android.permission.ACCESS_FINE_LOCATION: allow"
    },
    {
      "instruction": "Tap the 'applyFiltersButton' and ensure the tap is not retried if the UI doesn't change.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"applyFiltersButton\"\n    retryTapIfNoChange: false"
    },
    {
      "instruction": "Assert the 'twoFactorAuthToggle' is visible and is currently on (selected).",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"twoFactorAuthToggle\"\n    selected: true"
    },
    {
      "instruction": "Input a random 20-character alphanumeric session token.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- inputRandomText:\n    length: 20"
    },
    {
      "instruction": "Scroll 'chatMessageList' until 'firstUnreadMessageMarker' is 80% visible and centered.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"firstUnreadMessageMarker\" }\n    visibilityPercentage: 80\n    centerElement: true\n    # Assuming chatMessageList is parent"
    },
    {
      "instruction": "Run 'ios_permission_handler.yaml' only if maestro.platform is 'iOS' and permissions are needed.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      platform: \"iOS\"\n      true: \"${output.needsPermissions}\"\n    file: \"ios_permission_handler.yaml\""
    },
    {
      "instruction": "Use AI to verify that the app's color palette is accessible and provides good contrast.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"The application's color palette is accessible, providing sufficient contrast between text, interactive elements, and their backgrounds, adhering to WCAG guidelines.\""
    },
    {
      "instruction": "Extract the coupon code from a banner using AI, store as 'extractedCouponAI'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- extractTextWithAI:\n    query: \"What is the coupon code displayed in the promotional banner?\"\n    outputVariable: \"extractedCouponAI\""
    },
    {
      "instruction": "Tap on 'user_avatar_image' if it's a child of 'profile_header_view' and above 'username_text_field'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"user_avatar_image\"\n    childOf: { id: \"profile_header_view\" }\n    above: { id: \"username_text_field\" }"
    },
    {
      "instruction": "If 'output.isDataReadyForUpload' is true, assert 'uploadNowButton' is visible and enabled.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.isDataReadyForUpload}\"\n    commands:\n      - assertVisible:\n          id: \"uploadNowButton\"\n          enabled: true"
    },
    {
      "instruction": "Verify that the 'support_chat_unavailable_message' text matches 'Support chat is currently offline'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"support_chat_unavailable_message\"\n    text: \"^Support chat is currently offline$\""
    },
    {
      "instruction": "Set flow environment variable 'FEATURE_FLAG_BETA_UI' to 'active'.",
      "output": "appId: com.qoneqt.qoneqt\nenv:\n  FEATURE_FLAG_BETA_UI: \"active\"\n---\n- launchApp"
    },
    {
      "instruction": "On flow start, run 'initialize_database_connections.js'. On completion, run 'close_database_connections.js'.",
      "output": "appId: com.qoneqt.qoneqt\nonFlowStart:\n  - runScript: \"initialize_database_connections.js\"\nonFlowComplete:\n  - runScript: \"close_database_connections.js\"\n---\n- launchApp"
    },
    {
      "instruction": "This flow's name is 'Performance Test - Large Data Load'.",
      "output": "appId: com.qoneqt.qoneqt\nname: \"Performance Test - Large Data Load\"\n---\n- launchApp"
    },
    {
      "instruction": "Tag this flow 'performance', 'data_load', and 'stress_test'.",
      "output": "appId: com.qoneqt.qoneqt\ntags:\n  - \"performance\"\n  - \"data_load\"\n  - \"stress_test\"\n---\n- launchApp"
    },
    {
      "instruction": "Using GraalJS, access maestro.copiedText, convert it to uppercase, and store in output.copiedUpper.",
      "output": "appId: com.qoneqt.qoneqt\njsEngine: graaljs\n---\n- copyTextFrom: { id: \"some_text_id\" }\n- evalScript: \"${output.copiedUpper = maestro.copiedText ? maestro.copiedText.toUpperCase() : ''}\""
    },
    {
      "instruction": "Tap the 'Careers' link typically found in a website footer.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: \"Careers\""
    },
    {
      "instruction": "Assert the 'in_app_notification_banner_critical' is visible.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: { id: \"in_app_notification_banner_critical\" }"
    },
    {
      "instruction": "Enter 'Initial draft of the Q4 marketing strategy document.' into 'documentDescriptionField'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"documentDescriptionField\" }\n- inputText: \"Initial draft of the Q4 marketing strategy document.\""
    },
    {
      "instruction": "Scroll 'social_feed_timeline' until 'post_id_xyz123' is visible, then assert its like count 'post_id_xyz123_likes' is '15'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"post_id_xyz123\" }\n    # Assuming social_feed_timeline is parent\n- assertVisible:\n    id: \"post_id_xyz123_likes\"\n    text: \"15\""
    },
    {
      "instruction": "Run 'generate_invoice_flow.yaml', passing 'clientId: output.selectedClient' and 'invoiceMonth: output.currentMonth'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    file: \"generate_invoice_flow.yaml\"\n    env:\n      clientId: \"${output.selectedClient}\"\n      invoiceMonth: \"${output.currentMonth}\""
    },
    {
      "instruction": "Launch 'com.qoneqt.qoneqt', clear state, and pass 'auth_token: output.sessionToken' and 'user_role: admin' as arguments.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    appId: \"com.qoneqt.qoneqt\"\n    clearState: true\n    arguments:\n      auth_token: \"${output.sessionToken}\"\n      user_role: \"admin\""
    },
    {
      "instruction": "Tap on the 'app_logo_main_screen'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"app_logo_main_screen\" }"
    },
    {
      "instruction": "Verify 'Your subscription has been renewed successfully.' message appears on screen.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: \"Your subscription has been renewed successfully.\""
    },
    {
      "instruction": "Input the user's full name from 'output.userFullName' into 'shippingNameField'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"shippingNameField\" }\n- inputText: \"${output.userFullName}\""
    },
    {
      "instruction": "Scroll 'horizontal_game_list' to the left until 'game_card_alpha' is visible with 75% visibility and centered.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"game_card_alpha\" }\n    direction: LEFT\n    visibilityPercentage: 75\n    centerElement: true\n    # Assuming horizontal_game_list is parent"
    },
    {
      "instruction": "If 'output.isAppUpdateAvailable' is true, run inline command to tap 'updateAppNowButton'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.isAppUpdateAvailable}\"\n    commands:\n      - tapOn: { id: \"updateAppNowButton\" }"
    },
    {
      "instruction": "Retry the commands: tap 'DownloadFileButton', wait for 'FileDownloadCompleteToast' (max 60s). Max retries 2.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 2\n    commands:\n      - tapOn: { id: \"DownloadFileButton\" }\n      - extendedWaitUntil:\n          visible: { id: \"FileDownloadCompleteToast\" }\n          timeout: 60000"
    },
    {
      "instruction": "Repeat tapping 'NextStepWizard' while 'WizardStepIndicator' is not 'Step 7/7', up to 6 times.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 6\n    while:\n      notVisible: { id: \"WizardStepIndicator\", text: \"Step 7/7\" }\n    commands:\n      - tapOn: { id: \"NextStepWizard\" }"
    },
    {
      "instruction": "Use AI to check if the login form includes a 'Remember Me' checkbox or similar option.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"The login form includes a 'Remember Me' checkbox or a similar persistent login option.\""
    },
    {
      "instruction": "Run script 'config_parser.js'. It needs 'configString' from output.rawConfigData.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runScript:\n    file: \"config_parser.js\"\n    env:\n      configString: \"${output.rawConfigData}\""
    },
    {
      "instruction": "Add 10 to 'output.currentScore' and store back in 'output.currentScore'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.currentScore = (parseInt(output.currentScore) || 0) + 10}\""
    },
    {
      "instruction": "Tap the 'cancelSubscriptionLink', which is displayed above 'accountDeletionWarningText'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"cancelSubscriptionLink\"\n    above: { id: \"accountDeletionWarningText\" }"
    },
    {
      "instruction": "Assert 'itemAddedToCartPopup' is visible with text 'Item successfully added to your cart!'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"itemAddedToCartPopup\"\n    text: \"Item successfully added to your cart!\""
    },
    {
      "instruction": "Input a random address line into 'addressLine1Input'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"addressLine1Input\" }\n- inputRandomText: { length: 15 } # Simulating address line"
    },
    {
      "instruction": "Full purchase flow: Login. Search 'Qoneqt Widget'. Add to cart. View cart. Proceed to checkout. Fill address. Fill payment. Confirm. Verify 'Order Complete'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow: \"login_standard_user.yaml\"\n- tapOn: { id: \"searchIcon\" }\n- inputText: \"Qoneqt Widget\"\n- tapOn: { id: \"searchSubmitButton\" }\n- tapOn: { id: \"firstSearchResult_addToCart\" }\n- tapOn: { id: \"cartViewIcon\" }\n- tapOn: \"Proceed to Checkout\"\n- runFlow: \"fill_shipping_address.yaml\"\n- runFlow: \"fill_payment_details.yaml\"\n- tapOn: { id: \"confirmFinalOrderButton\" }\n- assertVisible: \"Order Complete\""
    },
    {
      "instruction": "Tap 'showDevOptionsButton', this is optional and labelled 'Access Developer Options'. No retry if UI unchanged.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"showDevOptionsButton\"\n    optional: true\n    label: \"Access Developer Options\"\n    retryTapIfNoChange: false"
    },
    {
      "instruction": "Verify 'dashboardWidgetContainer' contains descendants 'WidgetA', 'WidgetB', and 'WidgetC_Title'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"dashboardWidgetContainer\"\n    containsDescendants:\n      - { id: \"WidgetA\" }\n      - { id: \"WidgetB\" }\n      - { id: \"WidgetC_Title\" }"
    },
    {
      "instruction": "Tap 'menuItem_1', then 'menuItem_2', then 'menuItem_3'. Assert 'content_for_menuItem_3' is visible.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"menuItem_1\" }\n- tapOn: { id: \"menuItem_2\" }\n- tapOn: { id: \"menuItem_3\" }\n- assertVisible: { id: \"content_for_menuItem_3\" }"
    },
    {
      "instruction": "Assert 'companyLogoFooter' has an exact width of 100 and height of 30.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"companyLogoFooter\"\n    width: 100\n    height: 30\n    tolerance: 0"
    },
    {
      "instruction": "Tap on the 'Login with Google' button.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    text: \"Login with Google\"\n    id: \"googleLoginButton\" # Example ID for robustness"
    },
    {
      "instruction": "Assert that the 'Cart' icon shows a badge with '3' items.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"cartIconBadge\"\n    text: \"3\""
    },
    {
      "instruction": "Enter the username from the environment variable 'TEST_USERNAME'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"usernameField\" }\n- inputText: \"${MAESTRO_TEST_USERNAME}\""
    },
    {
      "instruction": "Scroll to the bottom of the 'newsFeed' and tap 'Load Previous Articles'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"loadPreviousArticlesButton\" }\n    direction: DOWN # Assuming it's at the very bottom\n- tapOn: { id: \"loadPreviousArticlesButton\" }"
    },
    {
      "instruction": "Run 'userProfileUpdate.yaml', passing 'newName: output.newNameFromInput' and 'newEmail: output.newEmailFromInput'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    file: \"userProfileUpdate.yaml\"\n    env:\n      newName: \"${output.newNameFromInput}\"\n      newEmail: \"${output.newEmailFromInput}\""
    },
    {
      "instruction": "Launch the app with 'clearState: true', 'clearKeychain: true', and argument 'testMode: true'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    clearState: true\n    clearKeychain: true\n    arguments:\n      testMode: true"
    },
    {
      "instruction": "Tap on the element with ID 'item_12345' which is currently enabled and selected.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"item_12345\"\n    enabled: true\n    selected: true"
    },
    {
      "instruction": "Verify that the 'popupMessage' contains the text 'Action Successful'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"popupMessage\"\n    text: \".*Action Successful.*\""
    },
    {
      "instruction": "Input a random 16-character alphanumeric string into the 'activationKeyInput'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"activationKeyInput\" }\n- inputRandomText:\n    length: 16"
    },
    {
      "instruction": "Scroll the 'chatMessagesContainer' to the very top until 'startOfConversationMarker' is visible.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"startOfConversationMarker\" }\n    direction: UP\n    # Assuming chatMessagesContainer is parent"
    },
    {
      "instruction": "If 'output.isOfflineMode' is true, run an inline flow to assert 'OfflineModeBanner' is visible.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.isOfflineMode}\"\n    commands:\n      - assertVisible: { id: \"OfflineModeBanner\" }"
    },
    {
      "instruction": "Retry tapping 'flakyNetworkButton'. If after 2 retries it fails, run 'showNetworkError.yaml'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 2\n    commands:\n      - tapOn: { id: \"flakyNetworkButton\", optional: true }\n- runFlow:\n    when:\n      # This needs a way to know if the tapOn in retry failed. Often, you'd check for a success state NOT being visible.\n      notVisible: { id: \"networkSuccessIndicator\" } # Example success indicator\n    file: \"showNetworkError.yaml\""
    },
    {
      "instruction": "Repeat tapping 'addItemButton' 7 times, with a 50ms delay between each tap on the button itself.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"addItemButton\"\n    repeat: 7\n    delay: 50"
    },
    {
      "instruction": "Use AI to verify that all text on the screen is correctly translated to French (conceptual, assumes visual check).",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"All user-facing text elements on the current screen appear to be correctly translated into French.\""
    },
    {
      "instruction": "Run script 'data_transformer.js', passing 'rawData: output.fetchedApiData' and 'transformType: userProfile'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runScript:\n    file: \"data_transformer.js\"\n    env:\n      rawData: \"${output.fetchedApiData}\" # Assuming fetchedApiData is string/stringifiable\n      transformType: \"userProfile\""
    },
    {
      "instruction": "Launch the main application, clear its state, deny notification permissions, allow fine location, and pass 'userGroup: beta_testers' as an argument.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    clearState: true\n    permissions:\n      notifications: deny\n      android.permission.ACCESS_FINE_LOCATION: allow\n    arguments:\n      userGroup: \"beta_testers\""
    },
    {
      "instruction": "Tap on the 'submitOrderButton'. If 'orderConfirmationModal' does not appear within 5 seconds, retry tapping 'submitOrderButton' and checking again, up to 2 times. The modal should contain text 'Order Successful'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 2\n    commands:\n      - tapOn: { id: \"submitOrderButton\" }\n      - extendedWaitUntil:\n          visible: { id: \"orderConfirmationModal\", text: \".*Order Successful.*\" }\n          timeout: 5000"
    },
    {
      "instruction": "Scroll the 'product_carousel' horizontally to the right until 'product_card_last_item' is 100% visible, with a scroll speed of 60.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"product_card_last_item\" }\n    direction: RIGHT\n    visibilityPercentage: 100\n    speed: 60\n    # Assuming product_carousel is parent"
    },
    {
      "instruction": "If the platform is iOS and 'output.faceIdEnabled' is true, run 'authenticate_with_faceid.yaml'. Otherwise, if platform is Android and 'output.fingerprintAvailable' is true, run 'authenticate_with_fingerprint.yaml'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      platform: \"iOS\"\n      true: \"${output.faceIdEnabled}\"\n    file: \"authenticate_with_faceid.yaml\"\n- runFlow:\n    when:\n      platform: \"Android\"\n      true: \"${output.fingerprintAvailable}\"\n    file: \"authenticate_with_fingerprint.yaml\""
    },
    {
      "instruction": "Repeat the following 5 times: tap 'increase_score_button', copy text from 'current_score_display', and log the score to console.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 5\n    commands:\n      - tapOn: { id: \"increase_score_button\" }\n      - copyTextFrom: { id: \"current_score_display\" }\n      - evalScript: \"${console.log('Current Score: ' + maestro.copiedText)}\""
    },
    {
      "instruction": "Use AI to assert that the 'userProfileAvatar' image is not a default placeholder image and appears to be a custom user image.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"The user profile avatar (element with ID 'userProfileAvatar') displays a custom user image, not a generic default placeholder icon.\""
    },
    {
      "instruction": "Run script 'api_data_fetcher.js', passing 'endpoint: /users/${output.userId}' and 'authToken: ${MAESTRO_AUTH_TOKEN}'. Store result in 'output.apiResponse'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runScript:\n    file: \"api_data_fetcher.js\"\n    env:\n      endpointPath: \"/users/${output.userId}\"\n      token: \"${MAESTRO_AUTH_TOKEN}\"\n    # Assuming script sets output.apiResponse"
    },
    {
      "instruction": "Evaluate script to take 'output.timestampISO' (an ISO date string), parse it, add 7 days, and store the new ISO string in 'output.futureTimestampISO'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: |\n    const date = new Date(output.timestampISO);\n    date.setDate(date.getDate() + 7);\n    output.futureTimestampISO = date.toISOString();"
    },
    {
      "instruction": "Launch 'com.qoneqt.partnerportal', clear state, allow notifications, and provide launch arguments 'partnerId: PARTNER_XYZ' and 'integrationMode: full'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    appId: \"com.qoneqt.partnerportal\"\n    clearState: true\n    permissions:\n      notifications: allow\n    arguments:\n      partnerId: \"PARTNER_XYZ\"\n      integrationMode: \"full\""
    },
    {
      "instruction": "Assert the 'search_query_input' is focused, enabled, and its placeholder text is 'Search for products...'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"search_query_input\"\n    focused: true\n    enabled: true\n    # Placeholder text is usually not directly assertable via 'text' if it disappears on focus/input.\n    # This would typically be verified by tapping and checking if input works, or if placeholder *is* the text when empty.\n    # For this example, assuming we can check its initial text if it behaves like a label when empty.\n    text: \"Search for products...\" # Or use AI for placeholder assertion"
    },
    {
      "instruction": "Input a random 15-digit international bank account number (IBAN-like format, conceptual) into 'ibanInput'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"ibanInput\" }\n- evalScript: \"${output.randomIban = 'XX' + (Math.random().toString().slice(2,12)) + (Math.random().toString().slice(2,5))}\" # Simplified IBAN-like\n- inputText: \"${output.randomIban}\""
    },
    {
      "instruction": "Navigate complex menu: Tap 'mainMenuIcon', then 'SettingsSubMenu', then 'AdvancedOptionsLink', then 'DataManagement', then assert 'ExportUserDataButton' is visible.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"mainMenuIcon\" }\n- tapOn: { id: \"SettingsSubMenu\" } \n- tapOn: { id: \"AdvancedOptionsLink\" }\n- tapOn: \"DataManagement\"\n- assertVisible: { id: \"ExportUserDataButton\" }"
    },
    {
      "instruction": "Wait until 'file_upload_progress_bar' shows text '100%' or 'Upload Complete', with a timeout of 120 seconds.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- extendedWaitUntil:\n    # This requires OR logic, best handled by checking for one then the other, or JS\n    # Simplified: wait for 'Upload Complete'\n    visible: { id: \"file_upload_progress_bar\", text: \".*Upload Complete.*\" } \n    timeout: 120000"
    },
    {
      "instruction": "On an Android TV, press DPad Right 3 times, then DPad Down once, then DPad Center to select.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- pressKey: \"Remote Dpad Right\"\n- pressKey: \"Remote Dpad Right\"\n- pressKey: \"Remote Dpad Right\"\n- pressKey: \"Remote Dpad Down\"\n- pressKey: \"Remote Dpad Center\""
    },
    {
      "instruction": "Swipe the 'news_feed_cards' upwards five times slowly (duration 1500ms each) to load more content.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 5\n    commands:\n      - swipe:\n          from: { id: \"news_feed_cards\" } # Swipes from center of this element\n          direction: UP\n          duration: 1500"
    },
    {
      "instruction": "Start recording 'user_logout_and_cleanup'. Run 'logout_flow.yaml'. Run 'clear_cache_script.js'. Clear app state. Stop recording.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- startRecording: \"user_logout_and_cleanup\"\n- runFlow: \"logout_flow.yaml\"\n- runScript: \"clear_cache_script.js\"\n- clearState\n- stopRecording"
    },
    {
      "instruction": "Tap 'ShowFiltersButton'. If 'FilterPanel' is visible, tap 'ApplyPriceFilter'. Else, if 'NoFiltersAvailableMessage' is visible, assert it. Else, log an error.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"ShowFiltersButton\" }\n- runFlow:\n    when:\n      visible: { id: \"FilterPanel\" }\n    commands:\n      - tapOn: { id: \"ApplyPriceFilter\" }\n- runFlow:\n    when:\n      notVisible: { id: \"FilterPanel\" }\n      visible: { id: \"NoFiltersAvailableMessage\" }\n    commands:\n      - assertVisible: { id: \"NoFiltersAvailableMessage\" } # Redundant but shows logic\n- runFlow:\n    when:\n      notVisible: { id: \"FilterPanel\" }\n      notVisible: { id: \"NoFiltersAvailableMessage\" }\n    commands:\n      - evalScript: \"${console.error('Unexpected filter state')}\""
    },
    {
      "instruction": "Assert the 'totalOrderValue' text is '$${output.expectedTotalValue}' only if 'output.orderStatus' is 'PendingConfirmation'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.orderStatus === 'PendingConfirmation'}\"\n    commands:\n      - assertVisible: \"$${output.expectedTotalValue}\""
    },
    {
      "instruction": "Long press on the 'draggableSliderThumb' and swipe it to the point '90%,50%' of its parent 'volumeSliderContainer'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- longPressOn: { id: \"draggableSliderThumb\" }\n- swipe:\n    start: { id: \"draggableSliderThumb\" }\n    end:\n      point: \"90%,50%\"\n      # relativeTo: { id: \"volumeSliderContainer\" } # relativeTo is not a standard Maestro param. Swipe end is screen relative or element relative via 'element' selector for end.\n      # Simpler: swipe to a screen coordinate\n    # end: \"90%,50%\" # This would be 90% of screen width for x\n    # This is tricky with current Maestro. Typically you swipe fixed amounts or directions from an element.\n    # For now, assuming a simpler swipe to a screen percentage after long press\n- swipe: \n    start: { id: \"draggableSliderThumb\" }\n    end: \"90%,50%\" # Screen percentage"
    },
    {
      "instruction": "Full user flow: Launch, tap login, enter 'user@qoneqt.com'/'password', tap login. Tap 'SearchIcon', input 'QoneqtDevice', tap first result. Add to cart. Go to cart. Change quantity to 3. Tap 'Checkout'. Assert 'OrderSummaryPage'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp\n- tapOn: \"Login\"\n- inputText: \"user@qoneqt.com\"\n- tapOn: { id: \"passwordField\" } # Assumes focus or specific selector\n- inputText: \"password\"\n- tapOn: { id: \"loginButton\" }\n- tapOn: { id: \"SearchIcon\" }\n- inputText: \"QoneqtDevice\"\n- tapOn: { id: \"searchResult_0\" }\n- tapOn: { id: \"productDetails_addToCart\" }\n- tapOn: { id: \"headerCartIcon\" }\n- tapOn: { id: \"cartItem_QoneqtDevice_quantity\" }\n- eraseText\n- inputText: \"3\"\n- tapOn: { id: \"cart_checkoutButton\" }\n- assertVisible: { id: \"OrderSummaryPage\" }"
    },
    {
      "instruction": "If 'appUpdateDialog' is visible, copy the update notes text from 'updateDialogNotesText', then tap 'updateLaterButton'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      visible: { id: \"appUpdateDialog\" }\n    commands:\n      - copyTextFrom: { id: \"updateDialogNotesText\" }\n      - tapOn: { id: \"updateLaterButton\" }"
    },
    {
      "instruction": "Assert the 'product_image_main_showcase' is visible and has a width of at least 300px and height of at least 200px (conceptual, Maestro asserts exact or with tolerance).",
      "output": "appId: com.qoneqt.qoneqt\n---\n# Maestro asserts exact width/height or with tolerance. \"At least\" requires JS.\n# Example for exact with tolerance:\n- assertVisible:\n    id: \"product_image_main_showcase\"\n    width: 320\n    height: 240\n    tolerance: 20"
    },
    {
      "instruction": "Retry running 'remote_config_fetch.js' script 2 times. After retries, assert 'output.remoteConfigLoaded' is true.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 2\n    commands:\n      - runScript: \"remote_config_fetch.js\"\n- assertVisible: { text: \"${output.remoteConfigLoaded ? 'ConfigLoaded' : 'ConfigNotLoaded_ERROR'}\" } # Indirect assertion"
    },
    {
      "instruction": "Repeat 10 times or until 'allItemsLoadedIndicator' is visible: tap 'loadNextBatchButton', wait 500ms for animation.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 10\n    while:\n      notVisible: { id: \"allItemsLoadedIndicator\" }\n    commands:\n      - tapOn: { id: \"loadNextBatchButton\", optional: true }\n      - waitForAnimationToEnd: { timeout: 500 }"
    },
    {
      "instruction": "Use AI to check if the error message displayed for invalid input in 'creditCardField' is helpful and specific.",
      "output": "appId: com.qoneqt.qoneqt\n---\n# First, trigger the error\n- tapOn: { id: \"creditCardField\" }\n- inputText: \"invalid-card-number\"\n- tapOn: { id: \"submitPaymentButton\" }\n- assertWithAI:\n    assertion: \"The error message displayed near 'creditCardField' for invalid input is helpful, specific, and guides the user on how to correct it.\""
    },
    {
      "instruction": "Run script 'report_generator_module.js', passing 'reportParams: output.reportConfigObject' and 'outputFormat: PDF'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runScript:\n    file: \"report_generator_module.js\"\n    env:\n      reportParams: \"${output.reportConfigObject}\" # Assuming it's stringifiable\n      outputFormat: \"PDF\""
    },
    {
      "instruction": "Evaluate a script: if 'output.userPoints' is >= 1000, set 'output.userTier' to 'Gold', else 'Silver'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.userTier = (parseInt(output.userPoints) >= 1000) ? 'Gold' : 'Silver'}\""
    },
    {
      "instruction": "Tap on the 'notificationsSettingsLink' which must be a child of 'userPreferencesMenu'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"notificationsSettingsLink\"\n    childOf: { id: \"userPreferencesMenu\" }"
    },
    {
      "instruction": "Assert the 'form_validation_error_summary' is visible and its text contains 'found 3 errors'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"form_validation_error_summary\"\n    text: \".*found 3 errors.*\""
    },
    {
      "instruction": "Input a random 8-character project code (e.g., PRJ- seguido de 4 números) into 'projectCodeInput'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"projectCodeInput\" }\n- evalScript: \"${output.randomProjectCode = 'PRJ-' + (Math.floor(Math.random() * 9000) + 1000)}\"\n- inputText: \"${output.randomProjectCode}\""
    },
    {
      "instruction": "Perform a full logout: Tap 'ProfileIcon', tap 'SettingsLink', tap 'AccountSection', scroll to 'LogoutButton', tap it, confirm logout, assert 'LoginScreen' is visible.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"ProfileIcon\" }\n- tapOn: { id: \"SettingsLink\" }\n- tapOn: { id: \"AccountSection\" }\n- scrollUntilVisible:\n    element: { id: \"LogoutButton\" }\n- tapOn: { id: \"LogoutButton\" }\n- tapOn: { id: \"ConfirmLogoutYesButton\" } # Assuming a confirmation dialog\n- assertVisible: { id: \"LoginScreen\" }"
    },
    {
      "instruction": "Tap 'viewReleaseNotesLink'. This action should not be retried if the UI state doesn't change and is optional.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"viewReleaseNotesLink\"\n    retryTapIfNoChange: false\n    optional: true"
    },
    {
      "instruction": "Assert 'criticalSystemAlertModal' is visible. This check is critical and not optional.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"criticalSystemAlertModal\"\n    optional: false # Explicitly not optional"
    },
    {
      "instruction": "Input the string 'Automated test input via Maestro framework.' into the currently focused input element.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- inputText: \"Automated test input via Maestro framework.\""
    },
    {
      "instruction": "Scroll the 'terms_and_conditions_scroll_view' fully to the bottom until 'end_of_document_marker' is visible, ensuring 100% visibility.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"end_of_document_marker\" }\n    direction: DOWN\n    visibilityPercentage: 100\n    # Assuming terms_and_conditions_scroll_view is parent"
    },
    {
      "instruction": "Run 'perform_data_anonymization.yaml' if 'output.isProductionEnvironment' is false.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${!output.isProductionEnvironment}\"\n    file: \"perform_data_anonymization.yaml\""
    },
    {
      "instruction": "Press the Android TV Remote Media Rewind key, then Media Fast Forward.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- pressKey: \"Remote Media Rewind\"\n- pressKey: \"Remote Media Fast Forward\""
    },
    {
      "instruction": "Clear the state for app 'com.qoneqt.dev.nightly'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- clearState: \"com.qoneqt.dev.nightly\""
    },
    {
      "instruction": "Copy text from 'sharedContentPreview', tap 'ShareViaAppButton', then (conceptually) select 'Copy to Clipboard' from native share sheet.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- copyTextFrom: { id: \"sharedContentPreview\" }\n- tapOn: { id: \"ShareViaAppButton\" }\n# Interacting with native share sheet is highly platform-dependent and often outside Maestro's direct scope.\n# A common workaround is to have a test-specific share option or rely on OS-level automation if possible.\n# For this example, we'll assume a 'Copy to Clipboard' button appears that Maestro can tap.\n- extendedWaitUntil: { visible: \"Copy to Clipboard\", timeout: 7000 }\n- tapOn: \"Copy to Clipboard\""
    },
    {
      "instruction": "Double tap the 'favorite_item_star_icon' element, with a 300ms delay between taps.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- doubleTapOn:\n    id: \"favorite_item_star_icon\"\n    delay: 300"
    },
    {
      "instruction": "Erase the current input in 'userSearchField' (max 75 characters) then input 'new_search_term'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"userSearchField\" }\n- eraseText: 75\n- inputText: \"new_search_term\""
    },
    {
      "instruction": "Wait until 'initial_data_sync_complete_flag' is visible, with a 2 minute timeout.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- extendedWaitUntil:\n    visible: { id: \"initial_data_sync_complete_flag\" }\n    timeout: 120000"
    },
    {
      "instruction": "If keyboard is displayed, dismiss it, then assert 'interactive_map_view' is fully visible.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- hideKeyboard\n- assertVisible: { id: \"interactive_map_view\" }"
    },
    {
      "instruction": "Kill the app. Then launch it with arguments 'force_update:false' and 'api_url:https://stage.qoneqt.com'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- killApp\n- launchApp:\n    arguments:\n      force_update: false\n      api_url: \"https://stage.qoneqt.com\""
    },
    {
      "instruction": "Long press on the 'volumeUpButton' to continuously increase volume (conceptual, Maestro longPress is usually a single event).",
      "output": "appId: com.qoneqt.qoneqt\n---\n# Maestro longPress is a single event. For continuous, you'd need OS level or repeated presses.\n# Simulating with a long press and then a few normal presses for effect:\n- longPressOn: { id: \"volumeUpButton\" }\n- repeat: \n    times: 3\n    commands:\n      - pressKey: \"Volume Up\" # Or tapOn if it's a UI button"
    },
    {
      "instruction": "Open the external website 'https://forum.qoneqt.com' in the default device browser.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- openLink:\n    link: \"https://forum.qoneqt.com\"\n    browser: true"
    },
    {
      "instruction": "Press the 'Remote System Navigation Up' key, then 'Remote System Navigation Down'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- pressKey: \"Remote System Navigation Up\"\n- pressKey: \"Remote System Navigation Down\""
    },
    {
      "instruction": "Scroll 'user_generated_content_feed' until 'content_item_uuid_abc123' is visible with 90% in view.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"content_item_uuid_abc123\" }\n    visibilityPercentage: 90\n    # Assuming user_generated_content_feed is parent"
    },
    {
      "instruction": "Start recording 'app_settings_config', navigate to settings, change 3 settings, save, stop recording.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- startRecording: \"app_settings_config\"\n- tapOn: \"Settings\"\n- tapOn: { id: \"settingToggle1\" }\n- tapOn: { id: \"settingToggle2\" }\n- tapOn: { id: \"settingDropdown\" }\n- tapOn: \"OptionB\"\n- tapOn: \"SaveChanges\"\n- stopRecording"
    },
    {
      "instruction": "Stop all instances of 'com.qoneqt.qoneqt' and 'com.qoneqt.qoneqt.beta'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- stopApp: \"com.qoneqt.qoneqt\"\n- stopApp: \"com.qoneqt.qoneqt.beta\""
    },
    {
      "instruction": "Swipe from point (5%, 50%) to (95%, 50%) with a duration of 1200ms to reveal a side menu.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- swipe:\n    start: \"5%,50%\"\n    end: \"95%,50%\"\n    duration: 1200"
    },
    {
      "instruction": "Take a screenshot named 'DebugInfo_UserList_Page3'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- takeScreenshot: \"DebugInfo_UserList_Page3\""
    },
    {
      "instruction": "Wait for 'data_migration_spinner_animation' to complete, with a maximum timeout of 3 minutes (180000 ms).",
      "output": "appId: com.qoneqt.qoneqt\n---\n- waitForAnimationToEnd:\n    timeout: 180000"
    },
    {
      "instruction": "Launch app, setting all permissions to 'unset' to test default permission handling.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    permissions: { all: unset }"
    },
    {
      "instruction": "Tap the 'expand_section_button' and ensure the tap is not retried even if the UI remains static, with a wait settle timeout of 100ms.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"expand_section_button\"\n    retryTapIfNoChange: false\n    waitToSettleTimeoutMs: 100"
    },
    {
      "instruction": "Assert the 'experimentalFeatureToggle' is visible and is currently enabled and selected (on).",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"experimentalFeatureToggle\"\n    enabled: true\n    selected: true"
    },
    {
      "instruction": "Input a random string of 30 characters for a bio into 'userProfileBioInput'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"userProfileBioInput\" }\n- inputRandomText:\n    length: 30"
    },
    {
      "instruction": "Scroll 'image_gallery_horizontal' until 'image_gallery_item_25' is 90% visible and centered, using speed 30.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"image_gallery_item_25\" }\n    direction: RIGHT # Assuming horizontal scroll to the right\n    visibilityPercentage: 90\n    centerElement: true\n    speed: 30\n    # Assuming image_gallery_horizontal is parent"
    },
    {
      "instruction": "Run 'push_notification_test.yaml' only if 'MAESTRO_TEST_NOTIFICATIONS' environment variable is 'enabled'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${MAESTRO_TEST_NOTIFICATIONS === 'enabled'}\"\n    file: \"push_notification_test.yaml\""
    },
    {
      "instruction": "Use AI to verify that the app's main branding color (e.g., #007AFF) is used consistently for primary actions.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"The application consistently uses its main branding color (e.g., a shade of blue similar to #007AFF) for primary action buttons and key interactive elements.\""
    },
    {
      "instruction": "Extract the text content of 'termsAndConditionsFullText' using AI, and store it as 'fullTermsTextAI'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- extractTextWithAI:\n    query: \"What is the full text content of the terms and conditions displayed?\"\n    outputVariable: \"fullTermsTextAI\""
    },
    {
      "instruction": "Tap on 'info_icon_tooltip' if it's a child of 'input_field_wrapper_username' and to the right of 'username_label_text'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"info_icon_tooltip\"\n    childOf: { id: \"input_field_wrapper_username\" }\n    rightOf: { id: \"username_label_text\" }"
    },
    {
      "instruction": "If 'output.userHasPremiumAccess' is false and 'output.trialAvailable' is true, assert 'StartFreeTrialButton' is visible.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${!output.userHasPremiumAccess && output.trialAvailable}\"\n    commands:\n      - assertVisible: { id: \"StartFreeTrialButton\" }"
    },
    {
      "instruction": "Verify that the 'support_phone_number_display' text matches the regex pattern for a US phone number.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"support_phone_number_display\"\n    text: \"^\\\\(?([0-9]{3})\\\\)?[-.●]?([0-9]{3})[-.●]?([0-9]{4})$\" # Regex for US phone"
    },
    {
      "instruction": "Set flow environment variable 'TEST_SCENARIO_ID' to 'TC_005_ADV_SEARCH'.",
      "output": "appId: com.qoneqt.qoneqt\nenv:\n  TEST_SCENARIO_ID: \"TC_005_ADV_SEARCH\"\n---\n- launchApp"
    },
    {
      "instruction": "On flow start, run 'setup_mock_api_responses.yaml'. On completion, run 'restore_original_api_config.yaml'.",
      "output": "appId: com.qoneqt.qoneqt\nonFlowStart:\n  - runFlow: \"setup_mock_api_responses.yaml\"\nonFlowComplete:\n  - runFlow: \"restore_original_api_config.yaml\"\n---\n- launchApp"
    },
    {
      "instruction": "This flow is named 'Security Test - SQL Injection Attempt (Conceptual)'.",
      "output": "appId: com.qoneqt.qoneqt\nname: \"Security Test - SQL Injection Attempt (Conceptual)\"\n---\n- launchApp"
    },
    {
      "instruction": "Tag this flow 'security', 'input_validation', and 'p0'.",
      "output": "appId: com.qoneqt.qoneqt\ntags:\n  - \"security\"\n  - \"input_validation\"\n  - \"p0\"\n---\n- launchApp"
    },
    {
      "instruction": "Using GraalJS, get the current time in milliseconds, add 30000, and store as 'output.expirationTimeMs'.",
      "output": "appId: com.qoneqt.qoneqt\njsEngine: graaljs\n---\n- evalScript: \"${output.expirationTimeMs = new Date().getTime() + 30000}\""
    },
    {
      "instruction": "Tap the 'Investor Relations' link, usually at the very bottom of a corporate site.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible: { element: \"Investor Relations\", direction: DOWN }\n- tapOn: \"Investor Relations\""
    },
    {
      "instruction": "Assert the 'urgent_system_message_banner' is visible and contains 'Critical Alert'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"urgent_system_message_banner\"\n    text: \".*Critical Alert.*\""
    },
    {
      "instruction": "Enter 'Comprehensive Qoneqt Platform Uptime Report - October 2024' into 'reportNameInput_setup'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"reportNameInput_setup\" }\n- inputText: \"Comprehensive Qoneqt Platform Uptime Report - October 2024\""
    },
    {
      "instruction": "Scroll 'audit_log_table_view' until 'log_event_user_login_failure_IP_1.2.3.4' is visible, then assert its severity level is 'High'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"log_event_user_login_failure_IP_1.2.3.4\" }\n    # Assuming audit_log_table_view is parent\n- assertVisible:\n    id: \"log_event_user_login_failure_IP_1.2.3.4_severity\"\n    text: \"High\""
    },
    {
      "instruction": "Run 'gdpr_data_export_request.yaml', passing 'userId: output.currentLoggedInUserId' and 'format: json'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    file: \"gdpr_data_export_request.yaml\"\n    env:\n      userId: \"${output.currentLoggedInUserId}\"\n      format: \"json\""
    },
    {
      "instruction": "Launch 'com.qoneqt.qoneqt', clear its state, clear keychain, grant all permissions, and pass 'entryPoint: from_notification_123' argument.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp:\n    appId: \"com.qoneqt.qoneqt\"\n    clearState: true\n    clearKeychain: true\n    permissions: { all: allow }\n    arguments:\n      entryPoint: \"from_notification_123\""
    },
    {
      "instruction": "Tap on the 'main_navigation_menu_toggle_button'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"main_navigation_menu_toggle_button\" }"
    },
    {
      "instruction": "Verify 'Your data has been successfully backed up to the cloud.' message is displayed on screen.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: \"Your data has been successfully backed up to the cloud.\""
    },
    {
      "instruction": "Input the multi-factor authentication code from 'output.mfaCode' into 'mfaCodeInputField'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"mfaCodeInputField\" }\n- inputText: \"${output.mfaCode}\""
    },
    {
      "instruction": "Scroll 'story_highlights_reel_horizontal' to the left until 'story_highlight_begin' is visible with 100% visibility and centered.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"story_highlight_begin\" }\n    direction: LEFT\n    visibilityPercentage: 100\n    centerElement: true\n    # Assuming story_highlights_reel_horizontal is parent"
    },
    {
      "instruction": "If 'output.isBetaFeatureActiveForUser' is true, run inline command to assert 'BetaFeatureLabel' is visible.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.isBetaFeatureActiveForUser}\"\n    commands:\n      - assertVisible: { id: \"BetaFeatureLabel\" }"
    },
    {
      "instruction": "Retry the commands: tap 'SubmitHighStakesForm', wait for 'FormSubmissionAck' (max 45s). Max retries 1. Label the tap.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 1\n    commands:\n      - tapOn: \n          id: \"SubmitHighStakesForm\"\n          label: \"Submit High Stakes Information\"\n      - extendedWaitUntil:\n          visible: { id: \"FormSubmissionAck\" }\n          timeout: 45000"
    },
    {
      "instruction": "Repeat tapping 'NextPageInDocumentViewer' while 'DocumentPageNumber' is not 'Page 100/100', up to 99 times.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 99\n    while:\n      notVisible: { id: \"DocumentPageNumber\", text: \"Page 100/100\" }\n    commands:\n      - tapOn: { id: \"NextPageInDocumentViewer\" }"
    },
    {
      "instruction": "Use AI to check if the app handles long text strings gracefully in 'userNameDisplayField' without breaking UI layout.",
      "output": "appId: com.qoneqt.qoneqt\n---\n# First, input long text if possible, or assume it's already there\n- tapOn: { id: \"userNameDisplayField\" } # Or a field that updates this display\n- inputText: \"ThisIsAVeryLongUserNameWithoutSpacesToTestTextOverflowAndWrappingBehaviorInTheUI\"\n- assertWithAI:\n    assertion: \"The 'userNameDisplayField' handles long text strings gracefully, either by truncating with ellipsis, wrapping, or scrolling, without breaking the UI layout.\""
    },
    {
      "instruction": "Run script 'json_payload_builder.js'. It needs 'userId: output.uid', 'payloadType: order_create', 'items: output.cartItemsArray'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runScript:\n    file: \"json_payload_builder.js\"\n    env:\n      userId: \"${output.uid}\"\n      payloadType: \"order_create\"\n      items: \"${output.cartItemsArray}\" # Assuming cartItemsArray is JSON string or stringifiable"
    },
    {
      "instruction": "Calculate 'output.percentage = (output.part / output.whole) * 100' (ensure 'whole' is not zero), format to 2 decimal places.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.percentage = (output.whole > 0) ? ((output.part / output.whole) * 100).toFixed(2) : '0.00'}\""
    },
    {
      "instruction": "Tap the 'submitFinalReviewButton', which is the only enabled button below 'finalReviewTextArea'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    # Assuming there's only one such button. If multiple, add text or id.\n    enabled: true\n    below: { id: \"finalReviewTextArea\" }"
    },
    {
      "instruction": "Assert 'paymentDeclinedDialog' is visible with primary text 'Payment Declined' and secondary text 'Please try a different payment method or contact support.'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"paymentDeclinedDialog\"\n    containsDescendants:\n      - \"Payment Declined\"\n      - \"Please try a different payment method or contact support.\""
    },
    {
      "instruction": "Input a random valid-looking credit card number (Luhn algorithm compliant - conceptual) into 'creditCardNumberInput'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"creditCardNumberInput\" }\n- evalScript: \"${output.luhnCard = '49927398716' + (Math.floor(Math.random() * 90000) + 10000) }\" # Simplified, not actual Luhn\n- inputText: \"${output.luhnCard}\""
    },
    {
        "instruction": "Complex E2E: Login. Add 2 different items to cart. Apply 'SUMMER20' promo. Checkout with new address. Use saved card. Confirm. Verify 'Order #... Received'.",
        "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow: \"login_user_alpha.yaml\"\n- runFlow:\n    file: \"add_item_to_cart.yaml\"\n    env:\n      itemId: \"QWIDGET001\"\n- runFlow:\n    file: \"add_item_to_cart.yaml\"\n    env:\n      itemId: \"QGADGET007\"\n- tapOn: { id: \"cartIcon\" }\n- tapOn: { id: \"promoCodeField\" }\n- inputText: \"SUMMER20\"\n- tapOn: { id: \"applyPromoButton\" }\n- tapOn: \"Checkout\"\n- runFlow: \"fill_new_shipping_address.yaml\"\n- tapOn: { id: \"useSavedCard_Visa1234\" }\n- tapOn: \"Place Order\"\n- assertVisible: { id: \"orderConfirmationNumber\", text: \".*Order #.*Received.*\" }"
    },
    {
      "instruction": "Tap 'viewFullSiteVersionLink', optional, label 'Switch to Full Desktop Site'. No retry on unchanged UI.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"viewFullSiteVersionLink\"\n    optional: true\n    label: \"Switch to Full Desktop Site\"\n    retryTapIfNoChange: false"
    },
    {
      "instruction": "Verify 'mainContentArea' contains descendants: 'heroImageBanner', 'featuredProductList', and 'latestNewsSection'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"mainContentArea\"\n    containsDescendants:\n      - { id: \"heroImageBanner\" }\n      - { id: \"featuredProductList\" }\n      - { id: \"latestNewsSection\" }"
    },
    {
      "instruction": "Navigate through a 5-step wizard: Tap 'Step1Next', 'Step2Next', 'Step3Next', 'Step4Next', 'Step5Finish'. Assert 'WizardCompleteMessage'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"Step1Next\" }\n- tapOn: { id: \"Step2Next\" }\n- tapOn: { id: \"Step3Next\" }\n- tapOn: { id: \"Step4Next\" }\n- tapOn: { id: \"Step5Finish\" }\n- assertVisible: { id: \"WizardCompleteMessage\" }"
    },
    {
      "instruction": "Assert 'profileHeaderBackground' has exact width 375 (full typical screen width) and height 200.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"profileHeaderBackground\"\n    width: 375\n    height: 200\n    tolerance: 2 # Allow small variance due to device differences"
    },
    {
      "instruction": "Add media files from a subfolder: './media_assets/user_avatar.jpg' and './media_assets/intro_video.mp4'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- addMedia:\n    - \"./media_assets/user_avatar.jpg\"\n    - \"./media_assets/intro_video.mp4\""
    },
    {
      "instruction": "Press the TV Input HDMI 2 key, then TV Input HDMI 3.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- pressKey: \"TV Input HDMI 2\"\n- pressKey: \"TV Input HDMI 3\""
    },
    {
      "instruction": "Take a screenshot of the 'AccountDashboard_AfterLogin'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- takeScreenshot: \"AccountDashboard_AfterLogin\""
    },
    {
      "instruction": "Tap on the 'savePreferencesButton' only if it is visible, enabled, and text is 'Save All Preferences'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      visible:\n        id: \"savePreferencesButton\"\n        text: \"Save All Preferences\"\n        enabled: true\n    commands:\n      - tapOn: { id: \"savePreferencesButton\" }"
    },
    {
      "instruction": "Assert the 'autoUpdateCheckbox' is visible, enabled, and currently unchecked (off).",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"autoUpdateCheckbox\"\n    enabled: true\n    checked: false"
    },
    {
      "instruction": "Tap the 'exportUserDataButton', optional, labeled 'Export My Data'. No retry for UI changes.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    id: \"exportUserDataButton\"\n    optional: true\n    label: \"Export My Data\"\n    retryTapIfNoChange: false"
    },
    {
      "instruction": "Clear app data, then launch with 'campaignCode: WINTERFEST24' and 'source: email_promo' arguments.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- clearState\n- launchApp:\n    arguments:\n      campaignCode: \"WINTERFEST24\"\n      source: \"email_promo\""
    },
    {
      "instruction": "Verify 'UNKNOWN_ERROR_PLEASE_CONTACT_SUPPORT' message is displayed.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible: \"UNKNOWN_ERROR_PLEASE_CONTACT_SUPPORT\""
    },
    {
      "instruction": "Launch the app. Tap the 'ProceedToDashboard' button.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- launchApp\n- tapOn: \"ProceedToDashboard\""
    },
    {
      "instruction": "Input 'Year End Financial Summary and Projections' into 'document_title_input_field'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"document_title_input_field\" }\n- inputText: \"Year End Financial Summary and Projections\""
    },
    {
      "instruction": "Scroll 'notification_list_view' until 'notification_item_unread_critical' is visible, tap it, then assert 'notification_detail_screen' is shown.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- scrollUntilVisible:\n    element: { id: \"notification_item_unread_critical\" }\n    # Assuming notification_list_view is parent\n- tapOn: { id: \"notification_item_unread_critical\" }\n- assertVisible: { id: \"notification_detail_screen\" }"
    },
    {
      "instruction": "Run 'loyalty_points_update.yaml' if 'output.purchaseValue' > 100, passing 'pointsToAdd: output.calculatedPoints'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runFlow:\n    when:\n      true: \"${output.purchaseValue > 100}\"\n    file: \"loyalty_points_update.yaml\"\n    env:\n      pointsToAdd: \"${output.calculatedPoints}\""
    },
    {
      "instruction": "Retry: tap 'CloudSyncButton', wait for 'CloudSyncSuccessIcon' (max 25s). Retries: 1.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- retry:\n    maxRetries: 1\n    commands:\n      - tapOn: { id: \"CloudSyncButton\" }\n      - extendedWaitUntil:\n          visible: { id: \"CloudSyncSuccessIcon\" }\n          timeout: 25000"
    },
    {
      "instruction": "Repeat tapping 'NextTutorialSlide' while 'TutorialSlideTitle' is not 'Tutorial Complete!', max 8 taps.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- repeat:\n    times: 8\n    while:\n      notVisible: { id: \"TutorialSlideTitle\", text: \"Tutorial Complete!\" }\n    commands:\n      - tapOn: { id: \"NextTutorialSlide\" }"
    },
    {
      "instruction": "Use AI to ensure that all date formats displayed in the application are consistent (e.g., MM/DD/YYYY).",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertWithAI:\n    assertion: \"All dates displayed within the application consistently follow the MM/DD/YYYY format.\""
    },
    {
      "instruction": "Run JavaScript 'build_complex_query.js'. It uses 'filters: output.activeFiltersObject' and 'sortBy: output.sortPreference'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- runScript:\n    file: \"build_complex_query.js\"\n    env:\n      filters: \"${output.activeFiltersObject}\" # Assuming stringifiable\n      sortBy: \"${output.sortPreference}\""
    },
    {
      "instruction": "Take 'output.principal', 'output.rate', 'output.time' and calculate simple interest, store in 'output.simpleInterest'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- evalScript: \"${output.simpleInterest = (parseFloat(output.principal) * parseFloat(output.rate) * parseFloat(output.time)) / 100}\""
    },
    {
      "instruction": "Tap the 'saveAndExitButton', which is the first enabled button below 'documentEditorCanvas'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn:\n    enabled: true\n    below: { id: \"documentEditorCanvas\" }\n    index: 0"
    },
    {
      "instruction": "Assert 'accountSuspendedAlert' is visible with text 'Your account is temporarily suspended. Please contact support for assistance.'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- assertVisible:\n    id: \"accountSuspendedAlert\"\n    text: \"Your account is temporarily suspended. Please contact support for assistance.\""
    },
    {
      "instruction": "Input a random secure password (e.g. 12+ chars, mixed case, numbers, symbols - conceptual) into 'newComplexPassword'.",
      "output": "appId: com.qoneqt.qoneqt\n---\n- tapOn: { id: \"newComplexPassword\" }\n- evalScript: \"${ const l='abcdefghijklmnopqrstuvwxyz'; const u=l.toUpperCase(); const n='0123456789'; const s='!@#$%^&*()'; const all=l+u+n+s; let pwd=''; for(let i=0; i<14; i++) pwd+=all.charAt(Math.floor(Math.random()*all.length)); output.randomSecurePass = pwd; }\"\n- inputText: \"${output.randomSecurePass}\""
    }
  
]
